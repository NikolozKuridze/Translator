@model IEnumerable<Translator.Application.Features.Template.Queries.GetAllTemplates.GetAllTemplatesResponse>

@{
Layout = "_Layout";
ViewBag.Title = "Templates";
var currentPage = ViewBag.CurrentPage ?? 1;
var pageSize = ViewBag.PageSize ?? 10;
var sortBy = ViewBag.SortBy as string ?? "name";
var sortDirection = ViewBag.SortDirection as string ?? "asc";

string flipDirection(string dir) => dir == "asc" ? "desc" : "asc";
string getSortIcon(string column) =>
sortBy == column ? (sortDirection == "asc" ? "fa-sort-up" : "fa-sort-down") : "fa-sort";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>Templates</h2>
    <button class="btn btn-success" type="button" data-bs-toggle="collapse" data-bs-target="#createTemplateSection">
        <i class="fas fa-plus"></i> Create Template
    </button>
</div>

@if (TempData["SuccessMessage"] != null)
{
<div class="alert alert-success alert-dismissible fade show">
    @TempData["SuccessMessage"]
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
</div>
}

<div class="collapse mb-4" id="createTemplateSection">
    <div class="card">
        <div class="card-header">
            <h5 class="mb-0">Create New Template</h5>
        </div>
        <div class="card-body">
            @using (Html.BeginForm("Create", "Templates", FormMethod.Post, new { id = "createTemplateForm" }))
            {
            <div class="mb-3">
                @Html.Label("templateName", "Template Name", new { @class = "form-label" })
                @Html.TextBox("templateName", "", new { @class = "form-control", required = "required" })
            </div>

            <div class="mb-3">
                <label class="form-label">Template Values</label>
                <div id="valuesContainer">
                    <div class="input-group mb-2 value-input-group">
                        @Html.TextBox("values", "", new { @class = "form-control", placeholder = "Enter value", required = "required" })
                        <button class="btn btn-outline-danger" type="button" onclick="removeValueInput(this)" disabled>
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
                <button type="button" class="btn btn-outline-primary btn-sm" onclick="addValueInput()">
                    <i class="fas fa-plus"></i> Add Value
                </button>
            </div>

            <div class="d-flex gap-2">
                <button type="submit" class="btn btn-success">Create</button>
                <button type="button" class="btn btn-secondary" onclick="clearForm()">Clear</button>
            </div>
            }
        </div>
    </div>
</div>

<div class="card">
    <div class="card-body" style="padding:0;">
        <div class="table-responsive">
            <table class="table table-hover align-middle mb-0">
                <thead class="table-light">
                <tr>
                    <th>
                        Name
                        <a href="@Url.Action("Index", new {
                        sortBy = "name",
                        sortDirection = flipDirection(sortDirection),
                        pageNumber = currentPage,
                        pageSize
                        })" class="btn btn-link btn-sm p-1 ms-1" title="Sort by name">
                            <i class="fas @getSortIcon("name")"></i>
                        </a>
                    </th>
                    <th>
                        Value Count
                        <a href="@Url.Action("Index", new {
                        sortBy = "value",
                        sortDirection = flipDirection(sortDirection),
                        pageNumber = currentPage,
                        pageSize
                        })" class="btn btn-link btn-sm p-1 ms-1" title="Sort by value count">
                            <i class="fas @getSortIcon("value")"></i>
                        </a>
                    </th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody>
                @if (Model != null && Model.Any())
                {
                foreach (var template in Model)
                {
                <tr>
                    <td>
                        <span class="badge bg-primary">@template.TemplateName</span>
                    </td>
                    <td>
                        <span class="badge bg-secondary">@template.ValueCount</span>
                    </td>
                    <td>
                        @Html.ActionLink("View", "Details", "Templates", new { templateName = template.TemplateName }, new { @class = "btn btn-sm btn-outline-primary me-2" })
                        <button class="btn btn-sm btn-outline-danger" onclick="showDeleteModal('@Html.Raw(Html.Encode(template.TemplateName))')">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>
                }
                }
                else
                {
                <tr>
                    <td colspan="3" class="text-center text-muted py-4">
                        <i class="fas fa-inbox fa-3x mb-3"></i>
                        <div>No templates found</div>
                    </td>
                </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

@if (Model != null && Model.Any())
{
<nav class="mt-4">
    <ul class="pagination justify-content-center">
        <!-- First page button -->
        @if (currentPage > 1)
        {
        <li class="page-item">
            <a class="page-link" href="@Url.Action("Index", new {
            pageNumber = 1,
            pageSize,
            sortBy,
            sortDirection
            })" title="First page">
                <i class="fas fa-angle-double-left"></i> First
            </a>
        </li>
        }
        else
        {
        <li class="page-item disabled">
            <span class="page-link"><i class="fas fa-angle-double-left"></i> First</span>
        </li>
        }

        <!-- Previous button -->
        @if (currentPage > 1)
        {
        <li class="page-item">
            <a class="page-link" href="@Url.Action("Index", new {
            pageNumber = currentPage - 1,
            pageSize,
            sortBy,
            sortDirection
            })">Previous</a>
        </li>
        }
        else
        {
        <li class="page-item disabled">
            <span class="page-link">Previous</span>
        </li>
        }

        <!-- Page numbers -->
        @{
        var totalPages = ViewBag.TotalPages ?? currentPage + 2;
        }
        @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
        {
        if (i == currentPage)
        {
        <li class="page-item active">
            <span class="page-link">@i</span>
        </li>
        }
        else
        {
        <li class="page-item">
            <a class="page-link" href="@Url.Action("Index", new {
            pageNumber = i,
            pageSize,
            sortBy,
            sortDirection
            })">@i</a>
        </li>
        }
        }

        <!-- Next button -->
        @if (currentPage < totalPages)
        {
        <li class="page-item">
            <a class="page-link" href="@Url.Action("Index", new {
            pageNumber = currentPage + 1,
            pageSize,
            sortBy,
            sortDirection
            })">Next</a>
        </li>
        }
        else
        {
        <li class="page-item disabled">
            <span class="page-link">Next</span>
        </li>
        }

        <!-- Last page button -->
        @if (currentPage < totalPages)
        {
        <li class="page-item">
            <a class="page-link" href="@Url.Action("Index", new {
            pageNumber = totalPages,
            pageSize,
            sortBy,
            sortDirection
            })" title="Last page">
                Last <i class="fas fa-angle-double-right"></i>
            </a>
        </li>
        }
        else
        {
        <li class="page-item disabled">
            <span class="page-link">Last <i class="fas fa-angle-double-right"></i></span>
        </li>
        }
    </ul>
</nav>

<div class="d-flex justify-content-end align-items-center mt-3">
    @using (Html.BeginForm("Index", "Templates", FormMethod.Get, new { @class = "d-flex align-items-center" }))
    {
    @Html.Hidden("pageNumber", 1)
    @Html.Hidden("sortBy", sortBy)
    @Html.Hidden("sortDirection", sortDirection)

    <label class="form-label me-2 mb-0">Show:</label>
    @Html.DropDownList("pageSize", new List<SelectListItem>
    {
    new SelectListItem { Text = "5", Value = "5", Selected = pageSize == 5 },
    new SelectListItem { Text = "10", Value = "10", Selected = pageSize == 10 },
    new SelectListItem { Text = "25", Value = "25", Selected = pageSize == 25 },
    new SelectListItem { Text = "50", Value = "50", Selected = pageSize == 50 }
    }, new {
    @class = "form-select form-select-sm",
    style = "width: 80px;",
    onchange = "this.form.submit();"
    })
    }
</div>
}

<div class="modal fade" id="deleteTemplateModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Template</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete template <strong id="templateNameToDelete"></strong>?</p>
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle"></i>
                    <strong>Warning:</strong> This action cannot be undone!
                </div>
            </div>
            <div class="modal-footer">
                @using (Html.BeginForm("Delete", "Templates", FormMethod.Post, new { id = "deleteTemplateForm" }))
                {
                @Html.Hidden("templateName", "")
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" class="btn btn-danger">
                    <i class="fas fa-trash"></i> Delete
                </button>
                }
            </div>
        </div>
    </div>
</div>

<script>
    function addValueInput() {
        const container = document.getElementById('valuesContainer');
        const div = document.createElement('div');
        div.className = 'input-group mb-2 value-input-group';
        div.innerHTML = `
            <input type="text" name="values" class="form-control" placeholder="Enter value" required />
            <button class="btn btn-outline-danger" type="button" onclick="removeValueInput(this)">
                <i class="fas fa-trash"></i>
            </button>
        `;
        container.appendChild(div);
        updateRemoveButtons();
    }

    function removeValueInput(button) {
        button.closest('.value-input-group').remove();
        updateRemoveButtons();
    }

    function updateRemoveButtons() {
        const groups = document.querySelectorAll('.value-input-group');
        groups.forEach(group => {
            const removeBtn = group.querySelector('.btn-outline-danger');
            removeBtn.disabled = groups.length === 1;
        });
    }

    function clearForm() {
        const form = document.getElementById('createTemplateForm');
        if (form) {
            form.reset();
            const container = document.getElementById('valuesContainer');
            container.innerHTML = `
                <div class="input-group mb-2 value-input-group">
                    <input type="text" name="values" class="form-control" placeholder="Enter value" required />
                    <button class="btn btn-outline-danger" type="button" onclick="removeValueInput(this)" disabled>
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            `;
        }
    }

    function showDeleteModal(templateName) {
        document.getElementById('templateNameToDelete').textContent = templateName;
        document.querySelector('#deleteTemplateForm input[name="templateName"]').value = templateName;
        const modal = new bootstrap.Modal(document.getElementById('deleteTemplateModal'));
        modal.show();
    }

    document.addEventListener('DOMContentLoaded', function() {
        updateRemoveButtons();

        const successAlert = document.querySelector('.alert-success');
        if (successAlert) {
            setTimeout(() => {
                const alert = new bootstrap.Alert(successAlert);
                alert.close();
            }, 5000);
        }
    });
</script>

<style>
    .value-input-group .form-control {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
    }

    .value-input-group .btn {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
    }

    .badge {
        font-size: 0.875em;
    }

    .gap-2 {
        gap: 0.5rem;
    }
</style>
