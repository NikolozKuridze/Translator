@model IEnumerable<Translator.Application.Features.Template.Queries.GetAllTemplates.GetAllTemplatesResponse>

@{
Layout = "_Layout";
ViewBag.Title = "Templates";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>Templates</h2>
    <button class="btn btn-success" type="button" data-bs-toggle="collapse" data-bs-target="#createTemplateSection">
        <i class="fas fa-plus"></i> Create Template
    </button>
</div>

<!-- Alert container -->
<div id="alertContainer"></div>

<div class="collapse mb-4" id="createTemplateSection">
    <div class="card">
        <div class="card-header">
            <h5 class="mb-0">Create New Template</h5>
        </div>
        <div class="card-body">
            <form id="createTemplateForm">
                <div class="mb-3">
                    <label for="templateName" class="form-label">Template Name</label>
                    <input type="text" name="templateName" id="templateName" class="form-control" required>
                </div>

                <div class="mb-3">
                    <label class="form-label">Template Values</label>
                    <div id="valuesContainer">
                        <div class="input-group mb-2 value-input-group">
                            <input type="text" name="values" class="form-control" placeholder="Enter value" required>
                            <button class="btn btn-outline-danger" type="button" onclick="removeValueInput(this)" disabled>
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                    <button type="button" class="btn btn-outline-primary btn-sm" onclick="addValueInput()">
                        <i class="fas fa-plus"></i> Add Value
                    </button>
                </div>

                <div class="d-flex gap-2">
                    <button type="submit" class="btn btn-success">
                        <span class="spinner-border spinner-border-sm d-none me-2" role="status"></span>
                        Create
                    </button>
                    <button type="button" class="btn btn-secondary" onclick="clearForm()">Clear</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-body" style="padding:0;">
        <div class="table-responsive">
            <table class="table table-hover align-middle mb-0">
                <thead class="table-light">
                <tr>
                    <th>
                        Name
                        <button class="btn btn-link btn-sm p-1 ms-1 sort-btn" data-sort="name" title="Sort by name">
                            <i class="fas fa-sort sort-icon-name"></i>
                        </button>
                    </th>
                    <th>
                        Value Count
                        <button class="btn btn-link btn-sm p-1 ms-1 sort-btn" data-sort="value" title="Sort by value count">
                            <i class="fas fa-sort sort-icon-value"></i>
                        </button>
                    </th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody id="templatesTableBody">
                <tr id="tableLoader">
                    <td colspan="3" class="text-center py-4">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </td>
                </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Pagination container -->
<div id="paginationContainer"></div>

<!-- Page size selector container -->
<div id="pageSizeContainer"></div>

<div class="modal fade" id="deleteTemplateModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Template</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete template <strong id="templateNameToDelete"></strong>?</p>
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle"></i>
                    <strong>Warning:</strong> This action cannot be undone!
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">
                    <span class="spinner-border spinner-border-sm d-none me-2" role="status"></span>
                    <i class="fas fa-trash"></i> Delete
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    if (typeof jQuery === 'undefined') {
        console.error('jQuery не загружен!');
    } else {
        console.log('jQuery готов');
    }

    class TemplateManager {
        constructor() {
            this.currentPage = 1;
            this.pageSize = 10;
            this.sortBy = 'name';
            this.sortDirection = 'asc';

            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', () => this.init());
            } else {
                this.init();
            }
        }

        init() {
            console.log('🚀 Initializing TemplateManager...');
            this.bindEvents();
            this.loadTemplates();
        }

        bindEvents() {
            console.log('📎 Binding events...');

            const self = this;

            const createForm = document.getElementById('createTemplateForm');
            if (createForm) {
                createForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    self.createTemplate();
                });
            }

            // Sort buttons
            document.querySelectorAll('.sort-btn').forEach(btn => {
                btn.addEventListener('click', function(e) {
                    e.preventDefault();
                    const sortBy = this.getAttribute('data-sort');
                    self.sortTemplates(sortBy);
                });
            });

            // Delete confirm button
            const deleteBtn = document.getElementById('confirmDeleteBtn');
            if (deleteBtn) {
                deleteBtn.addEventListener('click', function() {
                    const templateName = document.getElementById('templateNameToDelete').textContent;
                    self.deleteTemplate(templateName);
                });
            }
        }

        async loadTemplates() {
            console.log('Loading templates...');
            this.showTableLoader();
            this.updateSortIcons();

            try {
                const params = new URLSearchParams({
                    pageNumber: this.currentPage,
                    pageSize: this.pageSize,
                    sortBy: this.sortBy,
                    sortDirection: this.sortDirection
                });

                const response = await fetch(`/Templates/?${params}`, {
                    method: 'GET',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest',
                        'Content-Type': 'application/json'
                    }
                });

                console.log('Response status:', response.status);

                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }

                const result = await response.json();
                console.log('Response data:', result);

                if (result.success) {
                    this.renderTemplates(result.data || []);
                    this.renderPagination(result);
                    this.renderPageSizeSelector();
                } else {
                    this.showError('Failed to load templates: ' + (result.message || 'Unknown error'));
                    this.renderEmptyState();
                }
            } catch (error) {
                console.error('Error loading templates:', error);
                this.showError('Network error: ' + error.message);
                this.renderEmptyState();
            } finally {
                this.hideTableLoader();
            }
        }

        async createTemplate() {
            console.log('Creating template...');

            const submitBtn = document.querySelector('#createTemplateForm button[type="submit"]');
            const spinner = submitBtn.querySelector('.spinner-border');

            const templateName = document.getElementById('templateName').value.trim();
            const valueInputs = document.querySelectorAll('input[name="values"]');
            const values = [];

            valueInputs.forEach(input => {
                const val = input.value.trim();
                if (val) values.push(val);
            });

            if (!templateName || values.length === 0) {
                this.showError('Template name and at least one value are required');
                return;
            }

            submitBtn.disabled = true;
            if (spinner) spinner.classList.remove('d-none');

            try {
                const formData = new FormData();
                formData.append('templateName', templateName);
                values.forEach(value => formData.append('values', value));

                const response = await fetch('/Templates/Create', {
                    method: 'POST',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: formData
                });

                const result = await response.json();

                if (result.success) {
                    this.showSuccess(result.message);
                    this.clearForm();
                    this.hideCreateForm();
                    this.loadTemplates();
                } else {
                    this.showError(result.message);
                }
            } catch (error) {
                console.error('Error creating template:', error);
                this.showError('Failed to create template');
            } finally {
                submitBtn.disabled = false;
                if (spinner) spinner.classList.add('d-none');
            }
        }

        async deleteTemplate(templateName) {
            console.log('🗑️ Deleting template:', templateName);

            const deleteBtn = document.getElementById('confirmDeleteBtn');
            const spinner = deleteBtn.querySelector('.spinner-border');

            deleteBtn.disabled = true;
            if (spinner) spinner.classList.remove('d-none');

            try {
                const formData = new FormData();
                formData.append('templateName', templateName);

                const response = await fetch('/Templates/Delete', {
                    method: 'POST',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: formData
                });

                const result = await response.json();

                if (result.success) {
                    this.showSuccess(result.message);
                    // Закрываем модал
                    const modal = document.getElementById('deleteTemplateModal');
                    if (window.bootstrap) {
                        const bsModal = bootstrap.Modal.getInstance(modal);
                        if (bsModal) bsModal.hide();
                    }
                    this.loadTemplates();
                } else {
                    this.showError(result.message);
                }
            } catch (error) {
                console.error('Error deleting template:', error);
                this.showError('Failed to delete template');
            } finally {
                deleteBtn.disabled = false;
                if (spinner) spinner.classList.add('d-none');
            }
        }

        sortTemplates(sortBy) {
            if (this.sortBy === sortBy) {
                this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';
            } else {
                this.sortBy = sortBy;
                this.sortDirection = 'asc';
            }
            this.currentPage = 1;
            this.loadTemplates();
        }

        renderTemplates(templates) {
            const tbody = document.getElementById('templatesTableBody');
            tbody.innerHTML = '';

            if (templates && templates.length > 0) {
                templates.forEach(template => {
                    const row = this.createTemplateRow(template);
                    tbody.insertAdjacentHTML('beforeend', row);
                });
                this.bindTableEvents();
            } else {
                this.renderEmptyState();
            }
        }

        createTemplateRow(template) {
            return `
                <tr>
                    <td>
                        <div class="d-flex align-items-center gap-2">
                            <span class="badge bg-primary">${this.escapeHtml(template.templateName)}</span>
                            <button class="btn btn-sm btn-outline-secondary copy-id-btn" 
                                    data-id="${template.templateId}" 
                                    title="Copy Template ID">
                                <i class="fas fa-copy"></i>
                            </button>
                        </div>
                    </td>
                    <td>
                        <span class="badge bg-secondary">${template.valueCount}</span>
                    </td>
                    <td>
                        <div class="d-flex gap-1">
                            <form method="get" action="/Templates/Details" class="d-inline">
                                <input type="hidden" name="templateId" value="${template.templateId}">
                                <input type="hidden" name="lang" value="">
                                <input type="hidden" name="templateName" value="${template.templateName}" />
                                <button type="submit" class="btn btn-sm btn-outline-primary">
                                    <i class="fas fa-eye"></i> View
                                </button>
                            </form>
                            <button class="btn btn-sm btn-outline-danger delete-template-btn" 
                                    data-template="${this.escapeHtml(template.templateName)}">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                </tr>
`;
        }


        bindTableEvents() {
            // Copy buttons
            document.querySelectorAll('.copy-id-btn').forEach(btn => {
                btn.addEventListener('click', async (e) => {
                    const templateId = btn.getAttribute('data-id');
                    await this.copyToClipboard(templateId, 'Template ID copied!');
                });
            });

            // Delete buttons
            document.querySelectorAll('.delete-template-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const templateName = btn.getAttribute('data-template');
                    this.showDeleteModal(templateName);
                });
            });

            // Bind pagination events after rendering
            this.bindPaginationEvents();
        }

        renderEmptyState() {
            document.getElementById('templatesTableBody').innerHTML = `
            <tr>
                <td colspan="3" class="text-center text-muted py-4">
                    <i class="fas fa-inbox fa-3x mb-3"></i>
                    <div>No templates found</div>
                </td>
            </tr>
        `;
        }

        renderPagination(responseData) {
            const { currentPage, totalPages } = responseData;

            const container = document.getElementById('paginationContainer');

            if (totalPages <= 1) {
                container.innerHTML = '';
                return;
            }

            let html = '<nav class="mt-4"><ul class="pagination justify-content-center">';

            // First page
            if (currentPage > 1) {
                html += `<li class="page-item"><a class="page-link page-link-custom" href="#" data-page="1"><i class="fas fa-angle-double-left"></i> First</a></li>`;
            } else {
                html += `<li class="page-item disabled"><span class="page-link"><i class="fas fa-angle-double-left"></i> First</span></li>`;
            }

            // Previous
            if (currentPage > 1) {
                html += `<li class="page-item"><a class="page-link page-link-custom" href="#" data-page="${currentPage - 1}">Previous</a></li>`;
            } else {
                html += `<li class="page-item disabled"><span class="page-link">Previous</span></li>`;
            }

            // Page numbers
            const startPage = Math.max(1, currentPage - 2);
            const endPage = Math.min(totalPages, currentPage + 2);

            for (let i = startPage; i <= endPage; i++) {
                if (i === currentPage) {
                    html += `<li class="page-item active"><span class="page-link">${i}</span></li>`;
                } else {
                    html += `<li class="page-item"><a class="page-link page-link-custom" href="#" data-page="${i}">${i}</a></li>`;
                }
            }

            // Next
            if (currentPage < totalPages) {
                html += `<li class="page-item"><a class="page-link page-link-custom" href="#" data-page="${currentPage + 1}">Next</a></li>`;
            } else {
                html += `<li class="page-item disabled"><span class="page-link">Next</span></li>`;
            }

            // Last
            if (currentPage < totalPages) {
                html += `<li class="page-item"><a class="page-link page-link-custom" href="#" data-page="${totalPages}">Last <i class="fas fa-angle-double-right"></i></a></li>`;
            } else {
                html += `<li class="page-item disabled"><span class="page-link">Last <i class="fas fa-angle-double-right"></i></span></li>`;
            }

            html += '</ul></nav>';
            container.innerHTML = html;

            // Bind pagination events
            this.bindPaginationEvents();
        }

        renderPageSizeSelector() {
            const html = `
            <div class="d-flex justify-content-end align-items-center mt-3">
                <label class="form-label me-2 mb-0">Show:</label>
                <select id="pageSizeSelect" class="form-select form-select-sm" style="width: 80px;">
                    <option value="5" ${this.pageSize == 5 ? 'selected' : ''}>5</option>
                    <option value="10" ${this.pageSize == 10 ? 'selected' : ''}>10</option>
                    <option value="25" ${this.pageSize == 25 ? 'selected' : ''}>25</option>
                    <option value="50" ${this.pageSize == 50 ? 'selected' : ''}>50</option>
                </select>
            </div>
        `;
            document.getElementById('pageSizeContainer').innerHTML = html;

            // Bind page size change event
            const select = document.getElementById('pageSizeSelect');
            if (select) {
                select.addEventListener('change', (e) => {
                    this.pageSize = parseInt(e.target.value);
                    this.currentPage = 1;
                    this.loadTemplates();
                });
            }
        }

        bindPaginationEvents() {
            // Pagination links
            document.querySelectorAll('.page-link-custom').forEach(link => {
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    const page = parseInt(link.getAttribute('data-page'));
                    if (page && page !== this.currentPage) {
                        this.currentPage = page;
                        this.loadTemplates();
                    }
                });
            });
        }

        updateSortIcons() {
            // Reset all icons
            document.querySelectorAll('.sort-icon-name, .sort-icon-value').forEach(icon => {
                icon.className = 'fas fa-sort';
            });

            // Set correct icon for current sort
            const iconClass = this.sortDirection === 'asc' ? 'fa-sort-up' : 'fa-sort-down';
            const currentIcon = document.querySelector(`.sort-icon-${this.sortBy}`);
            if (currentIcon) {
                currentIcon.className = `fas ${iconClass}`;
            }
        }

        showTableLoader() {
            const loader = document.getElementById('tableLoader');
            if (loader) loader.style.display = 'table-row';
        }

        hideTableLoader() {
            const loader = document.getElementById('tableLoader');
            if (loader) loader.style.display = 'none';
        }

        showDeleteModal(templateName) {
            document.getElementById('templateNameToDelete').textContent = templateName;
            const modal = new bootstrap.Modal(document.getElementById('deleteTemplateModal'));
            modal.show();
        }

        clearForm() {
            document.getElementById('createTemplateForm').reset();
            document.getElementById('valuesContainer').innerHTML = `
            <div class="input-group mb-2 value-input-group">
                <input type="text" name="values" class="form-control" placeholder="Enter value" required>
                <button class="btn btn-outline-danger" type="button" onclick="removeValueInput(this)" disabled>
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        `;
            updateRemoveButtons();
        }

        hideCreateForm() {
            const section = document.getElementById('createTemplateSection');
            if (window.bootstrap) {
                const collapse = bootstrap.Collapse.getInstance(section);
                if (collapse) collapse.hide();
            }
        }

        async copyToClipboard(text, message) {
            try {
                await navigator.clipboard.writeText(text);
                this.showToast(message, 'success');
            } catch (error) {
                this.showToast('Failed to copy', 'error');
            }
        }

        showSuccess(message) { this.showAlert(message, 'success'); }
        showError(message) { this.showAlert(message, 'danger'); }

        showAlert(message, type) {
            const container = document.getElementById('alertContainer');
            container.innerHTML = `
            <div class="alert alert-${type} alert-dismissible fade show">
                ${this.escapeHtml(message)}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        `;
            setTimeout(() => {
                const alert = container.querySelector('.alert');
                if (alert) alert.remove();
            }, 5000);
        }

        showToast(message, type = 'success') {
            const toast = document.createElement('div');
            toast.className = 'position-fixed top-0 end-0 p-3';
            toast.style.zIndex = '9999';

            const bgClass = type === 'success' ? 'bg-success' : 'bg-danger';
            toast.innerHTML = `
            <div class="toast show ${bgClass} text-white" role="alert">
                <div class="toast-header ${bgClass} text-white border-0">
                    <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-triangle'} me-2"></i>
                    <strong class="me-auto">${type === 'success' ? 'Success' : 'Error'}</strong>
                    <button type="button" class="btn-close btn-close-white" onclick="this.closest('.position-fixed').remove()"></button>
                </div>
                <div class="toast-body">${message}</div>
            </div>
        `;
            document.body.appendChild(toast);
            setTimeout(() => { if (toast.parentNode) toast.remove(); }, 3000);
        }

        escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }
    }

    // Existing functions
    function addValueInput() {
        const container = document.getElementById('valuesContainer');
        const div = document.createElement('div');
        div.className = 'input-group mb-2 value-input-group';
        div.innerHTML = `
        <input type="text" name="values" class="form-control" placeholder="Enter value" required />
        <button class="btn btn-outline-danger" type="button" onclick="removeValueInput(this)">
            <i class="fas fa-trash"></i>
        </button>
    `;
        container.appendChild(div);
        updateRemoveButtons();
    }

    function removeValueInput(button) {
        button.closest('.value-input-group').remove();
        updateRemoveButtons();
    }

    function updateRemoveButtons() {
        const groups = document.querySelectorAll('.value-input-group');
        groups.forEach(group => {
            const removeBtn = group.querySelector('.btn-outline-danger');
            removeBtn.disabled = groups.length === 1;
        });
    }

    function clearForm() {
        if (window.templateManager) {
            templateManager.clearForm();
        }
    }

    // Initialize
    window.templateManager = new TemplateManager();
</script>

<style>
    .value-input-group .form-control {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
    }

    .value-input-group .btn {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
    }

    .badge {
        font-size: 0.875em;
    }

    .gap-1 {
        gap: 0.25rem;
    }

    .gap-2 {
        gap: 0.5rem;
    }
</style>
