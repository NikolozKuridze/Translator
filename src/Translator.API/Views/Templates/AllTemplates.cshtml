@model IEnumerable<Translator.Application.Features.Template.Queries.GetAllTemplates.GetAllTemplatesResponse>

@{
    ViewBag.Title = "All Templates";
    Layout = "_Layout";
    var currentPage = ViewBag.CurrentPage ?? 1;
    var pageSize = ViewBag.PageSize ?? 10;
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>All Templates</h2>
    <div class="d-flex gap-2">
        @Html.ActionLink("Search Templates", "Index", "Templates", null, new { @class = "btn btn-outline-primary" })
        <button class="btn btn-success" type="button" data-bs-toggle="collapse" data-bs-target="#createTemplateSection" aria-expanded="false" aria-controls="createTemplateSection">
            <i class="fas fa-plus"></i> Create Template
        </button>
    </div>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<!-- Секция создания шаблона -->
<div class="collapse mb-4" id="createTemplateSection">
    <div class="card">
        <div class="card-header">
            <h5 class="mb-0">Create New Template</h5>
        </div>
        <div class="card-body">
            @using (Html.BeginForm("Create", "Templates", FormMethod.Post, new { id = "createTemplateForm" }))
            {
                <div class="mb-3">
                    @Html.Label("templateName", "Template Name", new { @class = "form-label" })
                    @Html.TextBox("templateName", "", new { @class = "form-control", required = "required" })
                </div>

                <div class="mb-3">
                    <label class="form-label">Template Values</label>
                    <div id="valuesContainer">
                        <div class="input-group mb-2 value-input-group">
                            @Html.TextBox("values", "", new { @class = "form-control", placeholder = "Enter value", required = "required" })
                            <button class="btn btn-outline-danger" type="button" onclick="removeValueInput(this)" disabled>
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                    <button type="button" class="btn btn-outline-primary btn-sm" onclick="addValueInput()">
                        <i class="fas fa-plus"></i> Add Value
                    </button>
                </div>

                <div class="d-flex gap-2">
                    <button type="submit" class="btn btn-success">Create Template</button>
                    <button type="button" class="btn btn-secondary" onclick="clearForm()">Clear</button>
                </div>
            }
        </div>
    </div>
</div>

<!-- Настройки пагинации -->
<div class="card mb-4">
    <div class="card-header">
        <h5 class="mb-0">Pagination Settings</h5>
    </div>
    <div class="card-body">
        @using (Html.BeginForm("GetAllTemplates", "Templates", FormMethod.Get, new { @class = "row g-3 align-items-end" }))
        {
            <div class="col-md-4">
                @Html.Label("pageSize", "Page Size", new { @class = "form-label" })
                @Html.DropDownList("pageSize", new List<SelectListItem>
                {
                    new SelectListItem { Text = "5", Value = "5", Selected = pageSize == 5 },
                    new SelectListItem { Text = "10", Value = "10", Selected = pageSize == 10 },
                    new SelectListItem { Text = "25", Value = "25", Selected = pageSize == 25 },
                    new SelectListItem { Text = "50", Value = "50", Selected = pageSize == 50 }
                }, new { @class = "form-select" })
            </div>
            
            <div class="col-md-4">
                @Html.Label("pageNumber", "Page Number", new { @class = "form-label" })
                <input type="number" name="pageNumber" value="@currentPage" class="form-control" min="1" />
            </div>
            
            <div class="col-md-4">
                <button type="submit" class="btn btn-primary">Load Templates</button>
            </div>
        }
    </div>
</div>

@if (Model != null && Model.Any())
{
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Templates (Page @currentPage)</h5>
            <small class="text-muted">Page size: @pageSize</small>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead class="table-light">
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">Template Name</th>
                            <th scope="col">Value Count</th>
                            <th scope="col">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{ int counter = (currentPage - 1) * pageSize + 1; }
                        @foreach (var template in Model)
                        {
                            <tr>
                                <th scope="row">@counter</th>
                                <td><span class="badge bg-primary">@template.TemplateName</span></td>
                                <td><span class="badge bg-secondary">@template.ValueCount values</span></td>
                                <td>
                                    @Html.ActionLink("View Details", "Index", "Templates", new { templateName = template.TemplateName }, new { @class = "btn btn-sm btn-outline-primary me-2" })
                                    <button class="btn btn-sm btn-outline-danger" onclick="showDeleteModal('@Html.Raw(Html.Encode(template.TemplateName))')">
                                        <i class="fas fa-trash"></i> Delete
                                    </button>
                                </td>
                            </tr>
                            counter++;
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Пагинация -->
    <nav aria-label="Templates pagination" class="mt-4">
        <ul class="pagination justify-content-center">
            @if (currentPage > 1)
            {
                <li class="page-item">
                    @Html.ActionLink("Previous", "GetAllTemplates", "Templates", new { pageNumber = currentPage - 1, pageSize = pageSize }, new { @class = "page-link" })
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span class="page-link">Previous</span>
                </li>
            }

            @for (int i = Math.Max(1, currentPage - 2); i <= currentPage + 2; i++)
            {
                @if (i == currentPage)
                {
                    <li class="page-item active">
                        <span class="page-link">@i</span>
                    </li>
                }
                else
                {
                    <li class="page-item">
                        @Html.ActionLink(i.ToString(), "GetAllTemplates", "Templates", new { pageNumber = i, pageSize = pageSize }, new { @class = "page-link" })
                    </li>
                }
            }

            <li class="page-item">
                @Html.ActionLink("Next", "GetAllTemplates", "Templates", new { pageNumber = currentPage + 1, pageSize = pageSize }, new { @class = "page-link" })
            </li>
        </ul>
    </nav>
}
else
{
    <div class="card">
        <div class="card-body text-center">
            <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
            <h5 class="text-muted">No templates found</h5>
            <p class="text-muted">Try adjusting the page number or create a new template.</p>
        </div>
    </div>
}

<!-- Модальное окно удаления -->
<div class="modal fade" id="deleteTemplateModal" tabindex="-1" aria-labelledby="deleteTemplateModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteTemplateModalLabel">Delete Template</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this template?</p>
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle"></i>
                    <strong>Warning:</strong> This action cannot be undone!
                </div>
                <p><strong>Template Name:</strong> <span id="templateNameToDelete"></span></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                @using (Html.BeginForm("Delete", "Templates", FormMethod.Post, new { id = "deleteTemplateForm" }))
                {
                    @Html.Hidden("templateName", "")
                    @Html.Hidden("lang", "")
                    <button type="submit" class="btn btn-danger">
                        <i class="fas fa-trash"></i> Delete Template
                    </button>
                }
            </div>
        </div>
    </div>
</div>

<script>
    function addValueInput() {
        const container = document.getElementById('valuesContainer');
        const div = document.createElement('div');
        div.className = 'input-group mb-2 value-input-group';
        div.innerHTML = `
            <input type="text" name="values" class="form-control" placeholder="Enter value" required />
            <button class="btn btn-outline-danger" type="button" onclick="removeValueInput(this)">
                <i class="fas fa-trash"></i>
            </button>
        `;
        container.appendChild(div);
        updateRemoveButtons();
    }

    function removeValueInput(button) {
        button.closest('.value-input-group').remove();
        updateRemoveButtons();
    }

    function updateRemoveButtons() {
        const groups = document.querySelectorAll('.value-input-group');
        groups.forEach((group, index) => {
            const removeBtn = group.querySelector('.btn-outline-danger');
            removeBtn.disabled = groups.length === 1;
        });
    }

    function clearForm() {
        const templateNameInput = document.querySelector('#createTemplateForm input[name="templateName"]');
        if (templateNameInput) {
            templateNameInput.value = '';
        }
        const container = document.getElementById('valuesContainer');
        container.innerHTML = `
            <div class="input-group mb-2 value-input-group">
                <input type="text" name="values" class="form-control" placeholder="Enter value" required />
                <button class="btn btn-outline-danger" type="button" onclick="removeValueInput(this)" disabled>
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        `;
        updateRemoveButtons();
    }

    function showDeleteModal(templateName) {
        document.getElementById('templateNameToDelete').textContent = templateName;
        document.querySelector('#deleteTemplateForm input[name="templateName"]').value = templateName;
        document.querySelector('#deleteTemplateForm input[name="lang"]').value = '';
        
        const modal = new bootstrap.Modal(document.getElementById('deleteTemplateModal'));
        modal.show();
    }

    document.addEventListener('DOMContentLoaded', function() {
        updateRemoveButtons();

        const successAlert = document.querySelector('.alert-success');
        if (successAlert) {
            setTimeout(() => {
                const alert = new bootstrap.Alert(successAlert);
                alert.close();
            }, 5000);
        }
    });
</script>

<style>
    .value-input-group .form-control {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
    }

    .value-input-group .btn {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
    }

    .table th {
        border-top: none;
    }

    .badge {
        font-size: 0.875em;
    }

    .gap-2 {
        gap: 0.5rem;
    }
</style>
