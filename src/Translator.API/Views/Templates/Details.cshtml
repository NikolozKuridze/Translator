@using Translator.Application.Features.Language.Queries.GetLanguages
@model IEnumerable<Translator.Application.Features.TemplatesAdmin.Queries.AdminGetTemplate.Response>

@{
    Layout = "_Layout";
    ViewBag.Title = "Template Details";
    var templateId = ViewBag.TemplateId as Guid? ?? Guid.Empty;
    var templateName = ViewBag.TemplateName as string ?? "";
    var currentLanguage = ViewBag.CurrentLanguage as string ?? "";
    var availableLanguages = ViewBag.AvailableLanguages as IEnumerable<GetLanguagesResponse> ?? new List<GetLanguagesResponse>();
    var currentPage = ViewBag.CurrentPage ?? 1;
    var pageSize = ViewBag.PageSize ?? 50;
    var totalPages = ViewBag.TotalPages ?? 1;
    var totalCount = ViewBag.TotalCount ?? 0;
}

<div class="d-flex justify-content-between align-items-center mb-3">
    <div>
        <h4><i class="fas fa-layer-group"></i> Template: 
            <span class="badge bg-primary">@templateName</span>
        </h4>
        <div class="small text-muted">
            <span>ID: </span><code class="bg-light px-2 py-1 rounded">@templateId</code>
            <button class="btn btn-sm btn-outline-secondary ms-1" onclick="copyTemplateId('@templateId')" title="Copy">
                <i class="fas fa-copy"></i>
            </button>
            @if (!string.IsNullOrEmpty(currentLanguage))
            {
                <span class="ms-3">Language: <span class="badge bg-secondary">@currentLanguage.ToUpper()</span></span>
            }
        </div>
        <small class="text-muted">@totalCount values total</small>
    </div>
    
    <div class="d-flex gap-2 align-items-center">
        <button class="btn btn-warning btn-sm" onclick="cacheTemplate('@templateId')" title="Cache Template">
            <i class="fas fa-database"></i> Cache
        </button>
        
        @if (availableLanguages.Any())
        {
            <div class="dropdown">
                <button class="btn btn-outline-primary btn-sm dropdown-toggle" type="button" 
                        data-bs-toggle="dropdown">
                    <i class="fas fa-language"></i>
                    @(string.IsNullOrEmpty(currentLanguage) ? "All Languages" : currentLanguage.ToUpper())
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item @(string.IsNullOrEmpty(currentLanguage) ? "active" : "")" 
                           href="@Url.Action("Details", new { templateId, lang = "", templateName, pageNumber = 1, pageSize })">
                            <i class="fas fa-globe me-2"></i>All Languages
                        </a>
                    </li>
                    <li><hr class="dropdown-divider"></li>
                    @foreach (var language in availableLanguages)
                    {
                        <li>
                            <a class="dropdown-item @(currentLanguage == language.LanguageCode ? "active" : "")"
                               href="@Url.Action("Details", new { templateId, lang = language.LanguageCode, templateName, pageNumber = 1, pageSize })">
                                <span class="badge bg-primary me-2">@language.LanguageCode.ToUpper()</span>
                                @(string.IsNullOrEmpty(language.LanguageName) ? "N/A" : language.LanguageName)
                            </a>
                        </li>
                    }
                </ul>
            </div>
        }
        
        <a href="/Templates" class="btn btn-outline-secondary btn-sm">
            <i class="fas fa-arrow-left"></i> Back
        </a>
    </div>
</div>

<!-- Alert containers -->
<div id="alertContainer">
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show py-2">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show py-2">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }
</div>

<!-- Template Content Card -->
<div class="card">
    <div class="card-header py-2 d-flex justify-content-between align-items-center">
        <h6 class="mb-0">
            <i class="fas fa-list"></i> Template Content
            @if (!string.IsNullOrEmpty(currentLanguage))
            {
                <small class="text-muted">(@currentLanguage.ToUpper())</small>
            }
        </h6>
        <div class="d-flex gap-2 align-items-center">
            <span class="badge bg-info">@(Model?.Count() ?? 0) of @totalCount items</span>
            <select id="pageSizeSelect" class="form-select form-select-sm" style="width: 80px;">
                <option value="25" @(pageSize == 25 ? "selected" : "")>25</option>
                <option value="50" @(pageSize == 50 ? "selected" : "")>50</option>
                <option value="100" @(pageSize == 100 ? "selected" : "")>100</option>
            </select>
        </div>
    </div>
    
    <div class="table-responsive">
        <table class="table table-hover table-sm align-middle mb-0">
            <thead class="table-light">
                <tr>
                    <th width="25%">Value Key</th>
                    <th width="10%">Language</th>
                    <th width="15%">Owner</th>
                    <th width="40%">Translation</th>
                    <th width="10%">Actions</th>
                </tr>
            </thead>
            <tbody id="valuesTableBody">
                <tr id="tableLoader" style="display: none;">
                    <td colspan="5" class="text-center py-3">
                        <div class="spinner-border spinner-border-sm" role="status"></div>
                        <span class="ms-2">Loading...</span>
                    </td>
                </tr>
                
                @if (Model != null && Model.Any())
                {
                    foreach (var item in Model)
                    {
                        <tr>
                            <td>
                                <div class="d-flex align-items-center gap-2">
                                    <code class="text-primary small">@item.Key</code>
                                    <button class="btn btn-sm btn-outline-secondary px-2 py-1" 
                                            onclick="copyValueId('@item.ValueId')" title="Copy ID">
                                        <i class="fas fa-copy fa-xs"></i>
                                    </button>
                                </div>
                            </td>
                            <td>
                                @if (!string.IsNullOrEmpty(item.LanguageCode))
                                {
                                    <span class="badge bg-info">@item.LanguageCode.ToUpper()</span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">N/A</span>
                                }
                            </td>
                            <td>
                                @if (item.ValueOwnerId == null)
                                {
                                    <span class="badge bg-success">Global</span>
                                }
                                else
                                {
                                    <span class="badge bg-info">@item.ValueOwnerName</span>
                                }
                            </td>
                            <td class="small text-break">
                                @item.Value
                            </td>
                            <td>
                                <div class="d-flex gap-1">
                                    <a href="@Url.Action("Details", "Values", new { valueId = item.ValueId })"
                                       class="btn btn-sm btn-outline-info" title="View Details">
                                        <i class="fas fa-eye"></i>
                                    </a>
                                    @if (totalCount > 1)
                                    {
                                        <button class="btn btn-sm btn-outline-danger"
                                                onclick="showDeleteValueModal('@Html.Raw(Html.Encode(item.Key))')"
                                                title="Remove from Template">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-sm btn-outline-secondary" disabled
                                                title="Cannot remove - template needs at least one value">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr id="emptyState">
                        <td colspan="5" class="text-center text-muted py-4">
                            <i class="fas fa-inbox fa-2x mb-2 d-block"></i>
                            <div>No values found</div>
                            @if (!string.IsNullOrEmpty(currentLanguage))
                            {
                                <small class="text-muted">No translations for language @currentLanguage.ToUpper()</small>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Pagination -->
@if (Model != null && Model.Any() && totalPages > 1)
{
    <nav class="mt-3">
        <div class="d-flex justify-content-between align-items-center mb-2">
            <small class="text-muted">
                Showing @((currentPage - 1) * pageSize + 1) to @Math.Min(currentPage * pageSize, totalCount) of @totalCount results
            </small>
            <small class="text-muted">Page @currentPage of @totalPages</small>
        </div>

        <ul class="pagination pagination-sm justify-content-center">
            @if (currentPage > 1)
            {
                <li class="page-item">
                    <a class="page-link page-link-custom" href="#" data-page="1">First</a>
                </li>
                <li class="page-item">
                    <a class="page-link page-link-custom" href="#" data-page="@(currentPage - 1)">Previous</a>
                </li>
            }

            @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
            {
                if (i == currentPage)
                {
                    <li class="page-item active">
                        <span class="page-link">@i</span>
                    </li>
                }
                else
                {
                    <li class="page-item">
                        <a class="page-link page-link-custom" href="#" data-page="@i">@i</a>
                    </li>
                }
            }

            @if (currentPage < totalPages)
            {
                <li class="page-item">
                    <a class="page-link page-link-custom" href="#" data-page="@(currentPage + 1)">Next</a>
                </li>
                <li class="page-item">
                    <a class="page-link page-link-custom" href="#" data-page="@totalPages">Last</a>
                </li>
            }
        </ul>
    </nav>
}

<!-- Action Buttons -->
<div class="mt-3 d-flex gap-2">
    <button class="btn btn-danger btn-sm" onclick="showDeleteTemplateModal('@Html.Raw(Html.Encode(templateName))')">
        <i class="fas fa-trash"></i> Delete Template
    </button>
</div>

<!-- Delete Template Modal -->
<div class="modal fade" id="deleteTemplateModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header py-2">
                <h6 class="modal-title">Delete Template</h6>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p class="mb-2">Are you sure you want to delete template <strong id="templateNameToDelete">@templateName</strong>?</p>
                <div class="alert alert-warning py-2">
                    <i class="fas fa-exclamation-triangle"></i>
                    <strong>Warning:</strong> This action cannot be undone!
                </div>
            </div>
            <div class="modal-footer py-2">
                <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger btn-sm" id="confirmDeleteTemplateBtn">
                    <span class="spinner-border spinner-border-sm d-none me-1" role="status"></span>
                    <i class="fas fa-trash"></i> Delete
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Value Modal -->
<div class="modal fade" id="deleteValueModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header py-2">
                <h6 class="modal-title">Remove Value</h6>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p class="mb-2">Remove value <strong id="valueNameToDelete"></strong> from this template?</p>
                <div class="alert alert-info py-2">
                    <i class="fas fa-info-circle"></i>
                    This will only remove the value from this template, not delete the value entirely.
                </div>
            </div>
            <div class="modal-footer py-2">
                <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger btn-sm" id="confirmDeleteValueBtn">
                    <span class="spinner-border spinner-border-sm d-none me-1" role="status"></span>
                    <i class="fas fa-trash"></i> Remove
                </button>
            </div>
        </div>
    </div>
</div>

<style>
    .fa-xs {
        font-size: 0.75rem;
    }
    
    .table th {
        font-weight: 600;
        background-color: #f8f9fa;
        border-top: none;
    }
    
    .btn-sm {
        font-size: 0.8rem;
    }
    
    .text-break {
        word-break: break-word;
    }
    
    .gap-1 {
        gap: 0.25rem;
    }
    
    .gap-2 {
        gap: 0.5rem;
    }
</style>

<script>
// Simplified JavaScript - keeping core functionality
class TemplateDetailsManager {
    constructor() {
        this.templateId = '@templateId';
        this.templateName = '@Html.Raw(templateName)';
        this.currentLanguage = '@currentLanguage';
        this.currentPage = @currentPage;
        this.pageSize = @pageSize;
        this.init();
    }

    init() {
        this.bindEvents();
    }

    bindEvents() {
        // Page size selector
        const pageSizeSelect = document.getElementById('pageSizeSelect');
        if (pageSizeSelect) {
            pageSizeSelect.addEventListener('change', (e) => {
                const newPageSize = e.target.value;
                const url = new URL(window.location);
                url.searchParams.set('pageSize', newPageSize);
                url.searchParams.set('pageNumber', '1');
                window.location.href = url.toString();
            });
        }

        // Pagination links
        document.querySelectorAll('.page-link-custom').forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const page = link.getAttribute('data-page');
                const url = new URL(window.location);
                url.searchParams.set('pageNumber', page);
                window.location.href = url.toString();
            });
        });

        // Delete buttons
        document.getElementById('confirmDeleteTemplateBtn').addEventListener('click', () => {
            this.deleteTemplate();
        });

        document.getElementById('confirmDeleteValueBtn').addEventListener('click', () => {
            const valueName = document.getElementById('valueNameToDelete').textContent;
            this.deleteValue(valueName);
        });
    }

    async deleteTemplate() {
        const deleteBtn = document.getElementById('confirmDeleteTemplateBtn');
        const spinner = deleteBtn.querySelector('.spinner-border');

        deleteBtn.disabled = true;
        if (spinner) spinner.classList.remove('d-none');

        try {
            const formData = new FormData();
            formData.append('templateName', this.templateName);

            const response = await fetch('/Templates/Delete', {
                method: 'POST',
                headers: {'X-Requested-With': 'XMLHttpRequest'},
                body: formData
            });

            const result = await response.json();

            if (result.success) {
                showToast(result.message, 'success');
                setTimeout(() => window.location.href = '/Templates', 800);
            } else {
                showToast(result.message, 'error');
            }
        } catch (error) {
            showToast('Failed to delete template', 'error');
        } finally {
            deleteBtn.disabled = false;
            if (spinner) spinner.classList.add('d-none');
        }
    }

    async deleteValue(valueName) {
        const deleteBtn = document.getElementById('confirmDeleteValueBtn');
        const spinner = deleteBtn.querySelector('.spinner-border');
        deleteBtn.disabled = true;
        if (spinner) spinner.classList.remove('d-none');

        try {
            const response = await fetch('/Templates/DeleteValueFromTemplate', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({
                    valueName: valueName,
                    templateId: this.templateId
                })
            });

            const result = await response.json();
            if (result.success) {
                showToast(result.message, 'success');
                const modal = document.getElementById('deleteValueModal');
                if (window.bootstrap) {
                    const bsModal = bootstrap.Modal.getInstance(modal);
                    if (bsModal) bsModal.hide();
                }
                setTimeout(() => window.location.reload(), 500);
            } else {
                showToast(result.message, 'error');
            }
        } catch (error) {
            showToast('Failed to remove value', 'error');
        } finally {
            deleteBtn.disabled = false;
            if (spinner) spinner.classList.add('d-none');
        }
    }
}

// Global functions
function showDeleteTemplateModal(templateName) {
    const modal = new bootstrap.Modal(document.getElementById('deleteTemplateModal'));
    modal.show();
}

function showDeleteValueModal(valueName) {
    document.getElementById('valueNameToDelete').textContent = valueName;
    const modal = new bootstrap.Modal(document.getElementById('deleteValueModal'));
    modal.show();
}

async function copyTemplateId(templateId) {
    try {
        await navigator.clipboard.writeText(templateId);
        showToast('Template ID copied!', 'success');
    } catch (error) {
        showToast('Failed to copy', 'error');
    }
}

async function copyValueId(valueId) {
    try {
        await navigator.clipboard.writeText(valueId);
        showToast('Value ID copied!', 'success');
    } catch (error) {
        showToast('Failed to copy', 'error');
    }
}

function showToast(message, type = 'success') {
    const toast = document.createElement('div');
    toast.className = 'position-fixed top-0 end-0 p-3';
    toast.style.zIndex = '9999';

    const bgClass = type === 'success' ? 'bg-success' : 'bg-danger';

    toast.innerHTML = `
        <div class="toast show ${bgClass} text-white" role="alert">
            <div class="toast-body">${message}</div>
        </div>
    `;

    document.body.appendChild(toast);
    setTimeout(() => toast.remove(), 3000);
}

async function cacheTemplate(templateId) {
    const btn = event.target.closest('button');
    const originalText = btn.innerHTML;

    btn.disabled = true;
    btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Caching...';

    try {
        const response = await fetch(`/Cache/CacheTemplate/${templateId}`, {
            method: 'POST',
            headers: {'Content-Type': 'application/json'}
        });

        const result = await response.json();
        showToast(result.success ? result.message : result.message, result.success ? 'success' : 'error');
    } catch (error) {
        showToast('Network error', 'error');
    } finally {
        btn.disabled = false;
        btn.innerHTML = originalText;
    }
}

// Initialize
document.addEventListener('DOMContentLoaded', function () {
    new TemplateDetailsManager();
});
</script>
