@model IEnumerable<Translator.Application.Features.Template.Queries.GetTemplate.TemplateDto>

@{
    Layout = "_Layout";
    ViewBag.Title = "Template details";
    var templateName = ViewBag.TemplateName as string ?? "";
    var currentLanguage = ViewBag.CurrentLanguage as string ?? "";
    var availableLanguages = ViewBag.AvailableLanguages as IEnumerable<Translator.Application.Features.Language.Queries.GetLanguages.GetLanguagesResponse> ?? new List<Translator.Application.Features.Language.Queries.GetLanguages.GetLanguagesResponse>();
    var currentPage = ViewBag.CurrentPage ?? 1;
    var pageSize = ViewBag.PageSize ?? 10;
    var totalPages = ViewBag.TotalPages ?? 1;
    var totalCount = ViewBag.TotalCount ?? 0;
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h2>Template: <span class="badge bg-primary fs-6">@templateName</span></h2>
        @if (!string.IsNullOrEmpty(currentLanguage))
        {
            <small class="text-muted">Language: <span
                    class="badge bg-secondary">@currentLanguage.ToUpper()</span></small>
        }
        <br><small class="text-muted">@totalCount values total</small>
    </div>
    <div class="d-flex gap-2 align-items-center">
        <!-- Language Selector -->
        @if (availableLanguages.Any())
        {
            <div class="dropdown">
                <button class="btn btn-outline-primary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                    <i class="fas fa-language"></i>
                    @(string.IsNullOrEmpty(currentLanguage) ? "Select Language" : currentLanguage.ToUpper())
                </button>
                <ul class="dropdown-menu">
                    <li>
                        <a class="dropdown-item @(string.IsNullOrEmpty(currentLanguage) ? "active" : "")"
                           href="@Url.Action("Details", new { templateName = templateName, pageNumber = 1, pageSize })">
                            <i class="fas fa-globe"></i> All Languages
                        </a>
                    </li>
                    <li>
                        <hr class="dropdown-divider">
                    </li>
                    @foreach (var language in availableLanguages)
                    {
                        <li>
                            <a class="dropdown-item @(currentLanguage == language.LanguageCode ? "active" : "")"
                               href="@Url.Action("Details", new { templateName = templateName, lang = language.LanguageCode, pageNumber = 1, pageSize })">
                                <span class="badge bg-primary me-2">@language.LanguageCode.ToUpper()</span>
                                @(string.IsNullOrEmpty(language.LanguageName) ? "N/A" : language.LanguageName)
                            </a>
                        </li>
                    }
                </ul>
            </div>
        }
        @Html.ActionLink("Back to list", "Index", "Templates", null, new { @class = "btn btn-outline-secondary" })
    </div>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (Model != null && Model.Any())
{
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">
                <i class="fas fa-list"></i> Template Content
                @if (!string.IsNullOrEmpty(currentLanguage))
                {
                    <small class="text-muted">(@currentLanguage.ToUpper())</small>
                }
            </h5>
            <span class="badge bg-info">@Model.Count() of @totalCount Elements</span>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover table-striped">
                    <thead class="table-dark">
                    <tr>
                        <th width="20%">Key</th>
                        <th width="60%">Value</th>
                        <th width="20%">Actions</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>
                                <code class="text-primary">@item.Key</code>
                            </td>
                            <td class="text-break">
                                @item.Value
                            </td>
                            <td>
                                <div class="d-flex gap-1">
                                    <a href="@Url.Action("Details", "Values", new { valueName = item.Key })"
                                       class="btn btn-sm btn-outline-info" title="View Details">
                                        <i class="fas fa-eye"></i>
                                    </a>
                                    <button class="btn btn-sm btn-outline-danger"
                                            onclick="showDeleteValueModal('@Html.Raw(Html.Encode(item.Key))')"
                                            title="Delete Value">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Pagination -->
    <nav class="mt-4">
        <div class="d-flex justify-content-between align-items-center mb-2">
            <small class="text-muted">
                Showing @((currentPage - 1) * pageSize + 1) to @Math.Min(currentPage * pageSize, totalCount) of @totalCount values
            </small>
            <small class="text-muted">Page @currentPage of @totalPages</small>
        </div>

        <ul class="pagination justify-content-center">
            <!-- First page button -->
            @if (currentPage > 1)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Details", new
                                               {
                                                   templateName = templateName,
                                                   lang = currentLanguage,
                                                   pageNumber = 1,
                                                   pageSize
                                               })" title="First page">
                        <i class="fas fa-angle-double-left"></i> First
                    </a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span class="page-link"><i class="fas fa-angle-double-left"></i> First</span>
                </li>
            }

            <!-- Previous button -->
            @if (currentPage > 1)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Details", new
                                               {
                                                   templateName = templateName,
                                                   lang = currentLanguage,
                                                   pageNumber = currentPage - 1,
                                                   pageSize
                                               })">Previous</a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span class="page-link">Previous</span>
                </li>
            }

            <!-- Page numbers -->
            @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
            {
                if (i == currentPage)
                {
                    <li class="page-item active">
                        <span class="page-link">@i</span>
                    </li>
                }
                else
                {
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Details", new
                                                   {
                                                       templateName = templateName,
                                                       lang = currentLanguage,
                                                       pageNumber = i,
                                                       pageSize
                                                   })">@i</a>
                    </li>
                }
            }

            <!-- Next button -->
            @if (currentPage < totalPages)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Details", new
                                               {
                                                   templateName = templateName,
                                                   lang = currentLanguage,
                                                   pageNumber = currentPage + 1,
                                                   pageSize
                                               })">Next</a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span class="page-link">Next</span>
                </li>
            }

            <!-- Last page button -->
            @if (currentPage < totalPages)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Details", new
                                               {
                                                   templateName = templateName,
                                                   lang = currentLanguage,
                                                   pageNumber = totalPages,
                                                   pageSize
                                               })" title="Last page">
                        Last <i class="fas fa-angle-double-right"></i>
                    </a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span class="page-link">Last <i class="fas fa-angle-double-right"></i></span>
                </li>
            }
        </ul>
    </nav>

    <!-- Page size selector -->
    <div class="d-flex justify-content-end align-items-center mt-3">
        @using (Html.BeginForm("Details", "Templates", FormMethod.Get, new { @class = "d-flex align-items-center" }))
        {
            @Html.Hidden("templateName", templateName)
            @Html.Hidden("lang", currentLanguage)
            @Html.Hidden("pageNumber", 1)

            <label class="form-label me-2 mb-0">Show:</label>
            @Html.DropDownList("pageSize", new List<SelectListItem>
            {
                new SelectListItem { Text = "5", Value = "5", Selected = pageSize == 5 },
                new SelectListItem { Text = "10", Value = "10", Selected = pageSize == 10 },
                new SelectListItem { Text = "25", Value = "25", Selected = pageSize == 25 },
                new SelectListItem { Text = "50", Value = "50", Selected = pageSize == 50 }
            }, new
            {
                @class = "form-select form-select-sm",
                style = "width: 80px;",
                onchange = "this.form.submit();"
            })
        }
    </div>
}
else
{
    <div class="card">
        <div class="card-body text-center py-5">
            <i class="fas fa-inbox fa-4x text-muted mb-3"></i>
            <h5 class="text-muted">Empty Template</h5>
            <p class="text-muted">
                @if (!string.IsNullOrEmpty(currentLanguage))
                {
                    <span>This template has no translations for language <strong>@currentLanguage.ToUpper()</strong></span>
                }
                else
                {
                    <span>This template is empty</span>
                }
            </p>
            @Html.ActionLink("Return to list", "Index", "Templates", null, new { @class = "btn btn-primary" })
        </div>
    </div>
}

<div class="mt-4">
    <div class="d-flex gap-2">
        <button class="btn btn-danger" onclick="showDeleteModal('@Html.Raw(Html.Encode(templateName))')">
            <i class="fas fa-trash"></i> Delete Template
        </button>
    </div>
</div>

<!-- Delete Template Modal -->
<div class="modal fade" id="deleteTemplateModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Template</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure to delete Template? <strong>@templateName</strong>?</p>
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle"></i>
                    <strong>Warning:</strong> This action cannot be undone!
                </div>
            </div>
            <div class="modal-footer">
                @using (Html.BeginForm("Delete", "Templates", FormMethod.Post, new { id = "deleteTemplateForm" }))
                {
                    @Html.Hidden("templateName", templateName)
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">
                        <i class="fas fa-trash"></i> Delete
                    </button>
                }
            </div>
        </div>
    </div>
</div>

<!-- Delete Value Modal -->
<div class="modal fade" id="deleteValueModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Value</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete value <strong id="valueNameToDelete"></strong>?</p>
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-triangle"></i>
                    <strong>Warning:</strong> This will delete the value and all its translations!
                </div>
            </div>
            <div class="modal-footer">
                @using (Html.BeginForm("Delete", "Values", FormMethod.Post, new { id = "deleteValueForm" }))
                {
                    @Html.Hidden("valueName", "")
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">
                        <i class="fas fa-trash"></i> Delete Value
                    </button>
                }
            </div>
        </div>
    </div>
</div>

<script>
    function showDeleteModal(templateName) {
        const modal = new bootstrap.Modal(document.getElementById('deleteTemplateModal'));
        modal.show();
    }

    function showDeleteValueModal(valueName) {
        document.getElementById('valueNameToDelete').textContent = valueName;
        document.querySelector('#deleteValueForm input[name="valueName"]').value = valueName;
        const modal = new bootstrap.Modal(document.getElementById('deleteValueModal'));
        modal.show();
    }

    document.addEventListener('DOMContentLoaded', function () {
        const successAlert = document.querySelector('.alert-success');
        if (successAlert) {
            setTimeout(() => {
                const alert = new bootstrap.Alert(successAlert);
                alert.close();
            }, 5000);
        }

        const errorAlert = document.querySelector('.alert-danger');
        if (errorAlert) {
            setTimeout(() => {
                const alert = new bootstrap.Alert(errorAlert);
                alert.close();
            }, 5000);
        }
    });
</script>

<style>
    .badge.fs-6 {
        font-size: 1rem !important;
    }

    .text-break {
        word-break: break-word;
    }
    .btn-sm-btn-outline-info{
        color: darkgreen;
    }

</style>
