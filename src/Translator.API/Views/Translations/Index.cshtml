@model IEnumerable<Translator.API.Controllers.TranslationDto>

@{
    ViewBag.Title = "Translations";
    Layout = "_Layout";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>Translations</h2>
    <button class="btn btn-success" type="button" data-bs-toggle="collapse" data-bs-target="#createTranslationSection" aria-expanded="false" aria-controls="createTranslationSection">
        <i class="fas fa-plus"></i> Add Translation
    </button>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<div class="collapse mb-4" id="createTranslationSection">
    <div class="card">
        <div class="card-header">
            <h5 class="mb-0">Add New Translation</h5>
        </div>
        <div class="card-body">
            @using (Html.BeginForm("Create", "Translations", FormMethod.Post, new { id = "createTranslationForm" }))
            {
                <div class="row">
                    <div class="col-md-4">
                        <div class="mb-3">
                            @Html.Label("value", "Value (Key)", new { @class = "form-label" })
                            @Html.TextBox("value", "", new { 
                                @class = "form-control", 
                                required = "required", 
                                placeholder = "e.g. hello, welcome, error_message..."
                            })
                            <div class="form-text">Enter the key/value to translate</div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="mb-3">
                            @Html.Label("translation", "Translation", new { @class = "form-label" })
                            @Html.TextBox("translation", "", new { 
                                @class = "form-control", 
                                required = "required", 
                                placeholder = "Translated text..."
                            })
                            <div class="form-text">Enter the translated text</div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="mb-3">
                            @Html.Label("languageCode", "Language Code", new { @class = "form-label" })
                            @Html.TextBox("languageCode", "", new { 
                                @class = "form-control", 
                                required = "required", 
                                placeholder = "en, ru, de, fr...",
                                pattern = "[a-z]{2,5}",
                                title = "Enter 2-5 lowercase letters"
                            })
                            <div class="form-text">Language code for this translation</div>
                        </div>
                    </div>
                </div>

                <div class="d-flex gap-2">
                    <button type="submit" class="btn btn-success">Add Translation</button>
                    <button type="button" class="btn btn-secondary" onclick="clearForm()">Clear</button>
                </div>
            }
        </div>
    </div>
</div>

@if (Model != null && Model.Any())
{
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Available Translations</h5>
            <small class="text-muted">Total: @Model.Count() translations</small>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead class="table-light">
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">Key/Value</th>
                            <th scope="col">Translation</th>
                            <th scope="col">Language</th>
                            <th scope="col">Status</th>
                            <th scope="col">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{ int counter = 1; }
                        @foreach (var translation in Model.OrderBy(t => t.LanguageCode).ThenBy(t => t.Value))
                        {
                            <tr class="@(translation.IsActive ? "" : "table-secondary")">
                                <th scope="row">@counter</th>
                                <td>
                                    <code class="text-primary">@translation.Value</code>
                                </td>
                                <td>
                                    <span class="@(translation.IsActive ? "" : "text-muted")">
                                        <strong>@translation.Translation</strong>
                                    </span>
                                </td>
                                <td>
                                    <span class="badge @(translation.IsActive ? "bg-info" : "bg-secondary")">
                                        @translation.LanguageCode.ToUpper()
                                    </span>
                                </td>
                                <td>
                                    @if (translation.IsActive)
                                    {
                                        <span class="badge bg-success">
                                            <i class="fas fa-check-circle"></i> Active
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">
                                            <i class="fas fa-times-circle"></i> Inactive
                                        </span>
                                    }
                                </td>
                                <td>
                                    @if (translation.IsActive)
                                    {
                                        <button class="btn btn-sm btn-outline-danger" onclick="showDeleteModal('@Html.Raw(Html.Encode(translation.Value))', '@Html.Raw(Html.Encode(translation.LanguageCode))', '@Html.Raw(Html.Encode(translation.Translation))')">
                                            <i class="fas fa-trash"></i> Delete
                                        </button>
                                    }
                                    else
                                    {
                                        <span class="text-muted">
                                            <i class="fas fa-ban"></i> Deleted
                                        </span>
                                    }
                                </td>
                            </tr>
                            counter++;
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}
else
{
    <div class="card">
        <div class="card-body text-center">
            <i class="fas fa-language fa-3x text-muted mb-3"></i>
            <h5 class="text-muted">No translations found</h5>
            <p class="text-muted">Add your first translation using the form above.</p>
        </div>
    </div>
}

<div class="modal fade" id="deleteTranslationModal" tabindex="-1" aria-labelledby="deleteTranslationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteTranslationModalLabel">Delete Translation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this translation?</p>
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle"></i>
                    <strong>Warning:</strong> This action cannot be undone!
                </div>
                <div class="translation-info">
                    <p><strong>Key/Value:</strong> <code id="translationValueToDelete"></code></p>
                    <p><strong>Translation:</strong> <span id="translationTextToDelete"></span></p>
                    <p><strong>Language:</strong> <span id="translationLanguageToDelete"></span></p>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                @using (Html.BeginForm("Delete", "Translations", FormMethod.Post, new { id = "deleteTranslationForm" }))
                {
                    @Html.Hidden("value", "")
                    @Html.Hidden("languageCode", "")
                    <button type="submit" class="btn btn-danger">
                        <i class="fas fa-trash"></i> Delete Translation
                    </button>
                }
            </div>
        </div>
    </div>
</div>

<script>
    function clearForm() {
        const form = document.getElementById('createTranslationForm');
        if (form) {
            form.reset();
        }
    }

    function showDeleteModal(value, languageCode, translation) {
        document.getElementById('translationValueToDelete').textContent = value;
        document.getElementById('translationTextToDelete').textContent = translation;
        document.getElementById('translationLanguageToDelete').textContent = languageCode.toUpperCase();
        
        document.querySelector('#deleteTranslationForm input[name="value"]').value = value;
        document.querySelector('#deleteTranslationForm input[name="languageCode"]').value = languageCode;
        
        const modal = new bootstrap.Modal(document.getElementById('deleteTranslationModal'));
        modal.show();
    }

    document.addEventListener('DOMContentLoaded', function() {
        const successAlert = document.querySelector('.alert-success');
        if (successAlert) {
            setTimeout(() => {
                const alert = new bootstrap.Alert(successAlert);
                alert.close();
            }, 5000);
        }

        const form = document.getElementById('createTranslationForm');
        if (form) {
            form.addEventListener('submit', function(e) {
                const valueInput = this.querySelector('input[name="value"]');
                const translationInput = this.querySelector('input[name="translation"]');
                const languageCodeInput = this.querySelector('input[name="languageCode"]');
                
                if (!valueInput.value.trim() || !translationInput.value.trim() || !languageCodeInput.value.trim()) {
                    e.preventDefault();
                    alert('Please fill in all required fields');
                    return false;
                }
                
                const languageCode = languageCodeInput.value.trim();
                if (!/^[a-z]{2,5}$/.test(languageCode)) {
                    e.preventDefault();
                    alert('Please enter a valid language code (2-5 lowercase letters)');
                    languageCodeInput.focus();
                    return false;
                }
            });

            const languageCodeInput = form.querySelector('input[name="languageCode"]');
            if (languageCodeInput) {
                languageCodeInput.addEventListener('input', function() {
                    this.value = this.value.toLowerCase();
                });
            }
        }
    });
</script>

<style>
    .translation-info {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 5px;
        border-left: 4px solid #007bff;
    }

    .table-secondary {
        --bs-table-bg: #f8f9fa;
        opacity: 0.7;
    }

    .badge {
        font-size: 0.875em;
    }

    .gap-2 {
        gap: 0.5rem;
    }

    code {
        font-size: 0.875em;
    }
</style>
