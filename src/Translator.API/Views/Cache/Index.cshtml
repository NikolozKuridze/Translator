@model IEnumerable<Translator.API.Controllers.CachedItemViewModel>

@{
    Layout = "_Layout";
    ViewBag.Title = "Cache Management";
    var currentPage = ViewBag.CurrentPage ?? 1;
    var pageSize = ViewBag.PageSize ?? 10;
    var totalPages = ViewBag.TotalPages ?? 1;
    var totalCount = ViewBag.TotalCount ?? 0;
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h2><i class="fas fa-database text-primary"></i> Cache Management</h2>
        <p class="text-muted mb-0">Manage cached templates and values (@totalCount total items)</p>
    </div>
    <button class="btn btn-success" onclick="refreshPage()" title="Refresh Cache List">
        <i class="fas fa-sync-alt me-1"></i> Refresh
    </button>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<!-- Cache Stats -->
<div class="row mb-4">
    <div class="col-md-6">
        <div class="card bg-primary text-white">
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <i class="fas fa-layer-group fa-2x me-3"></i>
                    <div>
                        <h5 class="mb-0">Templates</h5>
                        <p class="mb-0">@Model.Count(x => x.Type == "Template") cached</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card bg-success text-white">
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <i class="fas fa-font fa-2x me-3"></i>
                    <div>
                        <h5 class="mb-0">Values</h5>
                        <p class="mb-0">@Model.Count(x => x.Type == "Value") cached</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Cached Items Table -->
<div class="card">
    <div class="card-body" style="padding:0;">
        <div class="table-responsive">
            <table class="table table-hover align-middle mb-0">
                <thead class="table-light">
                    <tr>
                        <th width="10%">Type</th>
                        <th width="40%">Name</th>
                        <th width="20%">Items Count</th>
                        <th width="30%">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model != null && Model.Any())
                    {
                        foreach (var item in Model)
                        {
                            <tr>
                                <td>
                                    @if (item.Type == "Template")
                                    {
                                        <span class="badge bg-primary">
                                            <i class="fas fa-layer-group me-1"></i>Template
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-success">
                                            <i class="fas fa-font me-1"></i>Value
                                        </span>
                                    }
                                </td>
                                <td>
                                    <strong>@item.Name</strong>
                                </td>
                                <td>
                                    <span class="badge bg-info">@item.Count items</span>
                                </td>
                                <td>
                                    <div class="d-flex gap-1">
                                        @if (item.Type == "Template")
                                        {
                                            <a href="@Url.Action("Details", "Templates", new { templateId = item.Id, lang = "en"})"
                                               class="btn btn-sm btn-outline-primary" title="View Details">
                                                <i class="fas fa-eye"></i> Details
                                            </a>
                                        }
                                        else
                                        {
                                            <a href="@Url.Action("Details", "Values", new { valueId = item.Id })"
                                               class="btn btn-sm btn-outline-primary" title="View Details">
                                                <i class="fas fa-eye"></i> Details
                                            </a>
                                        }
                                        <button class="btn btn-sm btn-outline-danger"
                                                onclick="deleteFromCache('@item.Id', '@item.Type', '@Html.Raw(Html.Encode(item.Name))')"
                                                title="Remove from Cache">
                                            <i class="fas fa-trash"></i> Remove
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="4" class="text-center text-muted py-4">
                                <i class="fas fa-database fa-3x mb-3 opacity-50"></i>
                                <div>No cached items found</div>
                                <small>Items will appear here after they are cached</small>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Pagination -->
@if (Model != null && Model.Any())
{
    <nav class="mt-4">
        <div class="d-flex justify-content-between align-items-center mb-2">
            <small class="text-muted">
                Showing @((currentPage - 1) * pageSize + 1) to @Math.Min(currentPage * pageSize, totalCount) of @totalCount results
            </small>
            <small class="text-muted">Page @currentPage of @totalPages</small>
        </div>

        <ul class="pagination justify-content-center">
            <!-- First page button -->
            @if (currentPage > 1)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Index", new { 
                        pageNumber = 1, 
                        pageSize 
                    })" title="First page">
                        <i class="fas fa-angle-double-left"></i> First
                    </a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span class="page-link"><i class="fas fa-angle-double-left"></i> First</span>
                </li>
            }

            <!-- Previous button -->
            @if (currentPage > 1)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Index", new { 
                        pageNumber = currentPage - 1, 
                        pageSize 
                    })">Previous</a>
                </li>
            }
            else 
            { 
                <li class="page-item disabled">
                    <span class="page-link">Previous</span>
                </li> 
            }

            <!-- Page numbers -->
            @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
            {
                if (i == currentPage)
                {
                    <li class="page-item active">
                        <span class="page-link">@i</span>
                    </li>
                }
                else
                {
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Index", new { 
                            pageNumber = i, 
                            pageSize 
                        })">@i</a>
                    </li>
                }
            }

            <!-- Next button -->
            @if (currentPage < totalPages)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Index", new { 
                        pageNumber = currentPage + 1, 
                        pageSize 
                    })">Next</a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span class="page-link">Next</span>
                </li>
            }

            <!-- Last page button -->
            @if (currentPage < totalPages)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Index", new { 
                        pageNumber = totalPages, 
                        pageSize 
                    })" title="Last page">
                        Last <i class="fas fa-angle-double-right"></i>
                    </a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span class="page-link">Last <i class="fas fa-angle-double-right"></i></span>
                </li>
            }
        </ul>
    </nav>

    <!-- Page size selector -->
    <div class="d-flex justify-content-end align-items-center mt-3">
        @using (Html.BeginForm("Index", "Cache", FormMethod.Get, new { @class = "d-flex align-items-center" }))
        {
            @Html.Hidden("pageNumber", 1)
            
            <label class="form-label me-2 mb-0">Show:</label>
            @Html.DropDownList("pageSize", new List<SelectListItem>
            {
                new SelectListItem { Text = "5", Value = "5", Selected = pageSize == 5 },
                new SelectListItem { Text = "10", Value = "10", Selected = pageSize == 10 },
                new SelectListItem { Text = "25", Value = "25", Selected = pageSize == 25 },
                new SelectListItem { Text = "50", Value = "50", Selected = pageSize == 50 }
            }, new { 
                @class = "form-select form-select-sm", 
                style = "width: 80px;",
                onchange = "this.form.submit();" 
            })
        }
    </div>
}

<script>
    async function deleteFromCache(id, type, name) {
        if (!confirm(`Are you sure you want to remove "${name}" from cache?`)) {
            return;
        }

        const btn = event.target.closest('button');
        const originalText = btn.innerHTML;
        
        btn.disabled = true;
        btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Removing...';
        
        try {
            const endpoint = type === 'Template' 
                ? `/Cache/DeleteTemplate/${id}` 
                : `/Cache/DeleteValue/${id}`;
                
            const response = await fetch(endpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            const result = await response.json();
            
            if (result.success) {
                showToast(`🗑️ ${result.message}`, 'success');
                // Удаляем строку из таблицы
                btn.closest('tr').remove();
                
                // Обновляем счетчики
                setTimeout(() => {
                    location.reload();
                }, 1000);
            } else {
                showToast(`${result.message}`, 'error');
                btn.disabled = false;
                btn.innerHTML = originalText;
            }
        } catch (error) {
            showToast(`Network error: ${error.message}`, 'error');
            btn.disabled = false;
            btn.innerHTML = originalText;
        }
    }

    function refreshPage() {
        location.reload();
    }

    function showToast(message, type = 'success') {
        const toast = document.createElement('div');
        toast.className = 'position-fixed top-0 end-0 p-3';
        toast.style.zIndex = '9999';
        
        const bgClass = type === 'success' ? 'bg-success' : 'bg-danger';
        
        toast.innerHTML = `
            <div class="toast show ${bgClass} text-white" role="alert">
                <div class="toast-header ${bgClass} text-white border-0">
                    <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-triangle'} me-2"></i>
                    <strong class="me-auto">${type === 'success' ? 'Success' : 'Error'}</strong>
                    <button type="button" class="btn-close btn-close-white" onclick="this.closest('.position-fixed').remove()"></button>
                </div>
                <div class="toast-body">${message}</div>
            </div>
        `;
        
        document.body.appendChild(toast);
        
        setTimeout(() => {
            if (toast.parentNode) {
                toast.remove();
            }
        }, 4000);
    }

    document.addEventListener('DOMContentLoaded', function() {
        const successAlert = document.querySelector('.alert-success');
        if (successAlert) {
            setTimeout(() => {
                const alert = new bootstrap.Alert(successAlert);
                alert.close();
            }, 5000);
        }

        const errorAlert = document.querySelector('.alert-danger');
        if (errorAlert) {
            setTimeout(() => {
                const alert = new bootstrap.Alert(errorAlert);
                alert.close();
            }, 5000);
        }
    });
</script>

<style>
    .gap-1 {
        gap: 0.25rem;
    }

    .opacity-50 {
        opacity: 0.5;
    }
</style>
