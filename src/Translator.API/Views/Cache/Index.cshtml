@model IEnumerable<Translator.API.Controllers.CachedItemViewModel>

@{
    Layout = "_Layout";
    ViewBag.Title = "Cache Management";
    var currentPage = ViewBag.CurrentPage ?? 1;
    var pageSize = ViewBag.PageSize ?? 10;
    var totalPages = ViewBag.TotalPages ?? 1;
    var totalCount = ViewBag.TotalCount ?? 0;
    var templatesCount = ViewBag.TemplatesCount ?? 0;
    var valuesCount = ViewBag.ValuesCount ?? 0;
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h2><i class="fas fa-database text-primary"></i> Cache Management</h2>
        <p class="text-muted mb-0" id="totalCountInfo">Manage cached templates and values (@totalCount total items)</p>
    </div>
    <button class="btn btn-success" id="refreshBtn" title="Refresh Cache List">
        <i class="fas fa-sync-alt me-1"></i> Refresh
    </button>
</div>

<!-- Alert container -->
<div id="alertContainer">
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }
</div>

<!-- Cache Stats -->
<div class="row mb-4">
    <div class="col-md-6">
        <div class="card bg-primary text-white">
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <i class="fas fa-layer-group fa-2x me-3"></i>
                    <div>
                        <h5 class="mb-0">Templates</h5>
                        <p class="mb-0" id="templatesCountInfo">@templatesCount cached</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card bg-success text-white">
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <i class="fas fa-font fa-2x me-3"></i>
                    <div>
                        <h5 class="mb-0">Values</h5>
                        <p class="mb-0" id="valuesCountInfo">@valuesCount cached</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Cached Items Table -->
<div class="card">
    <div class="card-body" style="padding:0;">
        <div class="table-responsive">
            <table class="table table-hover align-middle mb-0">
                <thead class="table-light">
                <tr>
                    <th width="10%">Type</th>
                    <th width="40%">Name</th>
                    <th width="20%">Items Count</th>
                    <th width="30%">Actions</th>
                </tr>
                </thead>
                <tbody id="cacheTableBody">
                @if (Model != null && Model.Any())
                {
                    foreach (var item in Model)
                    {
                        <tr>
                            <td>
                                @if (item.Type == "Template")
                                {
                                    <span class="badge bg-primary">
                                        <i class="fas fa-layer-group me-1"></i>Template
                                    </span>
                                }
                                else
                                {
                                    <span class="badge bg-success">
                                        <i class="fas fa-font me-1"></i>Value
                                    </span>
                                }
                            </td>
                            <td>
                                <strong>@item.Name</strong>
                            </td>
                            <td>
                                <span class="badge bg-info">@item.Count items</span>
                            </td>
                            <td>
                                <div class="d-flex gap-1">
                                    @if (item.Type == "Template")
                                    {
                                        <a href="@Url.Action("Details", "Templates", new { templateId = item.Id, templateName = item.Name, lang = "en" })"
                                           class="btn btn-sm btn-outline-primary" title="View Details">
                                            <i class="fas fa-eye"></i> Details
                                        </a>
                                    }
                                    else
                                    {
                                        <a href="@Url.Action("Details", "Values", new { valueId = item.Id })"
                                           class="btn btn-sm btn-outline-primary" title="View Details">
                                            <i class="fas fa-eye"></i> Details
                                        </a>
                                    }
                                    <button class="btn btn-sm btn-outline-danger remove-cache-btn"
                                            data-id="@item.Id"
                                            data-type="@item.Type"
                                            data-name="@item.Name"
                                            title="Remove from Cache">
                                        <i class="fas fa-trash"></i> Remove
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr id="emptyState">
                        <td colspan="4" class="text-center text-muted py-4">
                            <i class="fas fa-database fa-3x mb-3 opacity-50"></i>
                            <div>No cached items found</div>
                            <small>Items will appear here after they are cached</small>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Pagination container -->
<div id="paginationContainer">
    @if (Model != null && Model.Any() && totalPages > 1)
    {
        <nav class="mt-4">
            <div class="d-flex justify-content-between align-items-center mb-2">
                <small class="text-muted">
                    Showing @((currentPage - 1) * pageSize + 1) to @Math.Min(currentPage * pageSize, totalCount) of @totalCount results
                </small>
                <small class="text-muted">Page @currentPage of @totalPages</small>
            </div>

            <ul class="pagination justify-content-center">
                @if (currentPage > 1)
                {
                    <li class="page-item">
                        <a class="page-link page-link-custom" href="#" data-page="1" title="First page">
                            <i class="fas fa-angle-double-left"></i> First
                        </a>
                    </li>
                    <li class="page-item">
                        <a class="page-link page-link-custom" href="#" data-page="@(currentPage - 1)">Previous</a>
                    </li>
                }
                else
                {
                    <li class="page-item disabled">
                        <span class="page-link"><i class="fas fa-angle-double-left"></i> First</span>
                    </li>
                    <li class="page-item disabled">
                        <span class="page-link">Previous</span>
                    </li>
                }

                @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                {
                    if (i == currentPage)
                    {
                        <li class="page-item active">
                            <span class="page-link">@i</span>
                        </li>
                    }
                    else
                    {
                        <li class="page-item">
                            <a class="page-link page-link-custom" href="#" data-page="@i">@i</a>
                        </li>
                    }
                }

                @if (currentPage < totalPages)
                {
                    <li class="page-item">
                        <a class="page-link page-link-custom" href="#" data-page="@(currentPage + 1)">Next</a>
                    </li>
                    <li class="page-item">
                        <a class="page-link page-link-custom" href="#" data-page="@totalPages" title="Last page">
                            Last <i class="fas fa-angle-double-right"></i>
                        </a>
                    </li>
                }
                else
                {
                    <li class="page-item disabled">
                        <span class="page-link">Next</span>
                    </li>
                    <li class="page-item disabled">
                        <span class="page-link">Last <i class="fas fa-angle-double-right"></i></span>
                    </li>
                }
            </ul>
        </nav>
    }
</div>

<!-- Page size selector container -->
<div id="pageSizeContainer">
    @if (Model != null && Model.Any())
    {
        <div class="d-flex justify-content-end align-items-center mt-3">
            <label class="form-label me-2 mb-0">Show:</label>
            <select id="pageSizeSelect" class="form-select form-select-sm" style="width: 80px;">
                <option value="5" @(pageSize == 5 ? "selected" : "")>5</option>
                <option value="10" @(pageSize == 10 ? "selected" : "")>10</option>
                <option value="25" @(pageSize == 25 ? "selected" : "")>25</option>
                <option value="50" @(pageSize == 50 ? "selected" : "")>50</option>
            </select>
        </div>
    }
</div>

<script>
    class CacheManager {
        constructor() {
            this.currentPage = @currentPage;
            this.pageSize = @pageSize;
            this.totalCount = @totalCount;
            this.totalPages = @totalPages;
            this.templatesCount = @templatesCount;
            this.valuesCount = @valuesCount;

            this.init();
        }

        init() {
            console.log('Initializing CacheManager...');
            this.bindEvents();
            this.updateUI();
        }

        bindEvents() {
            // Refresh button
            document.getElementById('refreshBtn').addEventListener('click', () => {
                this.loadData();
            });

            // Page size selector
            const pageSizeSelect = document.getElementById('pageSizeSelect');
            if (pageSizeSelect) {
                pageSizeSelect.addEventListener('change', (e) => {
                    this.pageSize = parseInt(e.target.value);
                    this.currentPage = 1;
                    this.loadData();
                });
            }

            // Bind pagination and table events
            this.bindPaginationEvents();
            this.bindTableEvents();
        }

        async loadData() {
            console.log('Loading cache data...');

            try {
                const params = new URLSearchParams({
                    pageNumber: this.currentPage,
                    pageSize: this.pageSize
                });

                const response = await fetch(`/Cache/?${params}`, {
                    method: 'GET',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest',
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }

                const result = await response.json();
                console.log('Cache data loaded:', result);

                if (result.success) {
                    this.updatePageData(result);
                    this.renderCacheItems(result.data || []);
                    this.renderPagination();
                    this.renderPageSizeSelector();
                    this.updateUI();
                } else {
                    this.showError('Failed to load cache data: ' + (result.message || 'Unknown error'));
                    this.renderEmptyState();
                }
            } catch (error) {
                console.error('Error loading cache data:', error);
                this.showError('Network error: ' + error.message);
                this.renderEmptyState();
            }
        }

        updatePageData(data) {
            this.currentPage = data.currentPage || 1;
            this.totalPages = data.totalPages || 1;
            this.totalCount = data.totalCount || 0;
            this.pageSize = data.pageSize || 10;
            this.templatesCount = data.templatesCount || 0;
            this.valuesCount = data.valuesCount || 0;
        }

        updateUI() {
            // Update total count
            document.getElementById('totalCountInfo').textContent = `Manage cached templates and values (${this.totalCount} total items)`;

            // Update stats
            document.getElementById('templatesCountInfo').textContent = `${this.templatesCount} cached`;
            document.getElementById('valuesCountInfo').textContent = `${this.valuesCount} cached`;
        }

        renderCacheItems(items) {
            const tbody = document.getElementById('cacheTableBody');

            // Remove existing rows except empty state
            const existingRows = tbody.querySelectorAll('tr:not(#emptyState)');
            existingRows.forEach(row => row.remove());

            // Remove empty state if it exists
            const emptyState = document.getElementById('emptyState');
            if (emptyState) emptyState.remove();

            if (items && items.length > 0) {
                items.forEach(item => {
                    const row = this.createCacheItemRow(item);
                    tbody.insertAdjacentHTML('beforeend', row);
                });
                this.bindTableEvents();
            } else {
                this.renderEmptyState();
            }
        }

        createCacheItemRow(item) {
            const isTemplate = item.type === "Template";
            const badgeClass = isTemplate ? "bg-primary" : "bg-success";
            const badgeIcon = isTemplate ? "fas fa-layer-group" : "fas fa-font";
            const badgeText = item.type;
            const detailsUrl = isTemplate
                ? `/Templates/Details?templateId=${item.id}&templateName=${encodeURIComponent(item.name)}&lang=en`
                : `/Values/Details/${item.id}`;

            return `
    <tr>
        <td>
            <span class="badge ${badgeClass}">
                <i class="${badgeIcon} me-1"></i>${badgeText}
            </span>
        </td>
        <td>
            <strong>${this.escapeHtml(item.name)}</strong>
        </td>
        <td>
            <span class="badge bg-info">${item.count} items</span>
        </td>
        <td>
            <div class="d-flex gap-1">
                <a href="${detailsUrl}" class="btn btn-sm btn-outline-primary" title="View Details">
                    <i class="fas fa-eye"></i> Details
                </a>
                <button class="btn btn-sm btn-outline-danger remove-cache-btn"
                        data-id="${item.id}" 
                        data-type="${item.type}" 
                        data-name="${this.escapeHtml(item.name)}"
                        title="Remove from Cache">
                    <i class="fas fa-trash"></i> Remove
                </button>
            </div>
        </td>
    </tr>
`;
        }


        bindTableEvents() {
            // Remove cache buttons
            document.querySelectorAll('.remove-cache-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const id = btn.getAttribute('data-id');
                    const type = btn.getAttribute('data-type');
                    const name = btn.getAttribute('data-name');
                    this.removeCacheItem(id, type, name, btn);
                });
            });
        }

        async removeCacheItem(id, type, name, button) {
            if (!confirm(`Are you sure you want to remove "${name}" from cache?`)) {
                return;
            }

            const originalText = button.innerHTML;
            button.disabled = true;

            try {
                const endpoint = type === 'Template'
                    ? `/Cache/DeleteTemplate/${id}`
                    : `/Cache/DeleteValue/${id}`;

                const response = await fetch(endpoint, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const result = await response.json();

                if (result.success) {
                    this.showSuccess(`🗑️ ${result.message}`);
                    // Remove row from table
                    button.closest('tr').remove();

                    // Update counts
                    if (type === 'Template') {
                        this.templatesCount = Math.max(0, this.templatesCount - 1);
                    } else {
                        this.valuesCount = Math.max(0, this.valuesCount - 1);
                    }
                    this.totalCount = Math.max(0, this.totalCount - 1);

                    // Recalculate total pages
                    this.totalPages = this.totalCount > 0 ? Math.ceil(this.totalCount / this.pageSize) : 1;

                    // Update UI
                    this.updateUI();

                    // Check if page is empty and reload if needed
                    const remainingRows = document.querySelectorAll('#cacheTableBody tr:not(#emptyState)').length;
                    if (remainingRows === 0 && this.currentPage > 1) {
                        this.currentPage--;
                        this.loadData();
                    } else if (remainingRows === 0) {
                        this.renderEmptyState();
                        this.renderPagination(); // Ensure pagination is updated
                        this.renderPageSizeSelector();
                    } else {
                        // Re-render pagination with updated counts
                        this.renderPagination();
                        this.renderPageSizeSelector();
                    }
                } else {
                    this.showError(result.message);
                    button.disabled = false;
                    button.innerHTML = originalText;
                }
            } catch (error) {
                console.error('Error removing cache item:', error);
                this.showError(`Network error: ${error.message}`);
                button.disabled = false;
                button.innerHTML = originalText;
            }
        }

        renderEmptyState() {
            const tbody = document.getElementById('cacheTableBody');
            tbody.insertAdjacentHTML('beforeend', `
            <tr id="emptyState">
                <td colspan="4" class="text-center text-muted py-4">
                    <i class="fas fa-database fa-3x mb-3 opacity-50"></i>
                    <div>No cached items found</div>
                    <small>Items will appear here after they are cached</small>
                </td>
            </tr>
        `);
        }

        // Исправленный метод renderPagination - использует внутренние данные класса
        renderPagination() {
            const container = document.getElementById('paginationContainer');

            // Only show pagination when there are multiple pages
            if (this.totalPages <= 1) {
                container.innerHTML = '';
                return;
            }

            const showingStart = (this.currentPage - 1) * this.pageSize + 1;
            const showingEnd = Math.min(this.currentPage * this.pageSize, this.totalCount);

            let html = `
    <nav class="mt-4">
        <div class="d-flex justify-content-between align-items-center mb-2">
            <small class="text-muted">Showing ${showingStart} to ${showingEnd} of ${this.totalCount} results</small>
            <small class="text-muted">Page ${this.currentPage} of ${this.totalPages}</small>
        </div>
        <ul class="pagination justify-content-center">
    `;

            // First & Previous
            if (this.currentPage > 1) {
                html += `
        <li class="page-item">
            <a class="page-link page-link-custom" href="#" data-page="1" title="First page">
                <i class="fas fa-angle-double-left"></i> First
            </a>
        </li>
        <li class="page-item">
            <a class="page-link page-link-custom" href="#" data-page="${this.currentPage - 1}">Previous</a>
        </li>
        `;
            } else {
                html += `
        <li class="page-item disabled"><span class="page-link"><i class="fas fa-angle-double-left"></i> First</span></li>
        <li class="page-item disabled"><span class="page-link">Previous</span></li>
        `;
            }

            // Page numbers
            const startPage = Math.max(1, this.currentPage - 2);
            const endPage = Math.min(this.totalPages, this.currentPage + 2);

            for (let i = startPage; i <= endPage; i++) {
                if (i === this.currentPage) {
                    html += `<li class="page-item active"><span class="page-link">${i}</span></li>`;
                } else {
                    html += `<li class="page-item"><a class="page-link page-link-custom" href="#" data-page="${i}">${i}</a></li>`;
                }
            }

            // Next & Last
            if (this.currentPage < this.totalPages) {
                html += `
        <li class="page-item">
            <a class="page-link page-link-custom" href="#" data-page="${this.currentPage + 1}">Next</a>
        </li>
        <li class="page-item">
            <a class="page-link page-link-custom" href="#" data-page="${this.totalPages}" title="Last page">
                Last <i class="fas fa-angle-double-right"></i>
            </a>
        </li>
        `;
            } else {
                html += `
        <li class="page-item disabled"><span class="page-link">Next</span></li>
        <li class="page-item disabled"><span class="page-link">Last <i class="fas fa-angle-double-right"></i></span></li>
        `;
            }

            html += '</ul></nav>';
            container.innerHTML = html;

            // Rebind pagination events
            this.bindPaginationEvents();
        }

        renderPageSizeSelector() {
            const container = document.getElementById('pageSizeContainer');

            // Show page size selector whenever there's data (regardless of pagination)
            if (this.totalCount === 0) {
                container.innerHTML = '';
                return;
            }

            const html = `
        <div class="d-flex justify-content-end align-items-center mt-3">
            <label class="form-label me-2 mb-0">Show:</label>
            <select id="pageSizeSelect" class="form-select form-select-sm" style="width: 80px;">
                <option value="5" ${this.pageSize == 5 ? 'selected' : ''}>5</option>
                <option value="10" ${this.pageSize == 10 ? 'selected' : ''}>10</option>
                <option value="25" ${this.pageSize == 25 ? 'selected' : ''}>25</option>
                <option value="50" ${this.pageSize == 50 ? 'selected' : ''}>50</option>
            </select>
        </div>
    `;
            container.innerHTML = html;

            // Rebind page size change event
            const select = document.getElementById('pageSizeSelect');
            if (select) {
                select.addEventListener('change', (e) => {
                    this.pageSize = parseInt(e.target.value);
                    this.currentPage = 1;
                    this.loadData();
                });
            }
        }

        bindPaginationEvents() {
            document.querySelectorAll('.page-link-custom').forEach(link => {
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    const page = parseInt(link.getAttribute('data-page'));
                    if (page && page !== this.currentPage) {
                        this.currentPage = page;
                        this.loadData();
                    }
                });
            });
        }

        showSuccess(message) {
            this.showAlert(message, 'success');
        }

        showError(message) {
            this.showAlert(message, 'danger');
        }

        showAlert(message, type) {
            const container = document.getElementById('alertContainer');
            container.innerHTML = `
            <div class="alert alert-${type} alert-dismissible fade show">
                ${this.escapeHtml(message)}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        `;
            setTimeout(() => {
                const alert = container.querySelector('.alert');
                if (alert) alert.remove();
            }, 5000);
        }

        escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }
    }

    // Initialize
    let cacheManager;
    document.addEventListener('DOMContentLoaded', function () {
        console.log('🎉 DOM loaded, initializing CacheManager...');
        cacheManager = new CacheManager();

        // Auto-hide TempData alerts
        const successAlert = document.querySelector('.alert-success');
        if (successAlert) {
            setTimeout(() => new bootstrap.Alert(successAlert).close(), 5000);
        }

        const errorAlert = document.querySelector('.alert-danger');
        if (errorAlert) {
            setTimeout(() => new bootstrap.Alert(errorAlert).close(), 5000);
        }
    });
</script>

<style>
    .gap-1 {
        gap: 0.25rem;
    }

    .opacity-50 {
        opacity: 0.5;
    }
</style>
