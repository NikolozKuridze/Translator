@{
    Layout = "_Layout";
    ViewBag.Title = "Database Migrations";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h2><i class="fas fa-database text-primary"></i> Database Migrations</h2>
        <p class="text-muted mb-0">Manage database schema updates and seed data</p>
    </div>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show">
        <i class="fas fa-check-circle me-2"></i>
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show">
        <i class="fas fa-exclamation-triangle me-2"></i>
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<!-- Migration Actions Card -->
<div class="card">
    <div class="card-header">
        <h5 class="mb-0">
            <i class="fas fa-cog me-2"></i>Migration Actions
        </h5>
    </div>
    <div class="card-body">
        <div class="row mb-4">
            <div class="col-md-8">
                <h6>Apply Latest Migrations</h6>
                <p class="text-muted mb-3">
                    Apply all pending database migrations to bring the database schema up to date.
                    <br><small class="text-warning">
                        <i class="fas fa-exclamation-triangle me-1"></i>
                        This action will modify the database structure. Make sure you have a backup.
                    </small>
                </p>
            </div>
            <div class="col-md-4 text-end">
                <button type="button" class="btn btn-primary" onclick="applyMigrations()" id="applyBtn">
                    <i class="fas fa-play me-2"></i>Apply Migrations
                </button>
            </div>
        </div>
        
        <div class="row">
            <div class="col-md-8">
                <h6>Seed Fake Data</h6>
                <p class="text-muted mb-3">
                    Generate fake translation data for testing and development purposes.
                    <br><small class="text-warning">
                        <i class="fas fa-exclamation-triangle me-1"></i>
                        Only use this in development environments. This will create test data.
                    </small>
                </p>
            </div>
            <div class="col-md-4 text-end">
                <button type="button" class="btn btn-warning" onclick="seedFakeData()" id="fakeDataBtn">
                    <i class="fas fa-seedling me-2"></i>Seed Fake Data
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Information Card -->
<div class="card mt-4">
    <div class="card-header">
        <h6 class="mb-0">
            <i class="fas fa-info-circle me-2"></i>Information
        </h6>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-4">
                <h6>What are migrations?</h6>
                <p class="small text-muted">
                    Migrations are version control for your database schema. They allow you to evolve your database structure over time while preserving existing data.
                </p>
            </div>
            <div class="col-md-4">
                <h6>Languages Seeding</h6>
                <p class="small text-muted">
                    Language seeding adds supported languages to your system based on your configuration. This is typically done once during initial setup.
                </p>
            </div>
            <div class="col-md-4">
                <h6>Safety Notes</h6>
                <ul class="small text-muted">
                    <li>Always backup your database before applying migrations</li>
                    <li>Test migrations in a development environment first</li>
                    <li>Use fake data seeding only in development</li>
                </ul>
            </div>
        </div>
    </div>
</div>

<script>
    async function applyMigrations() {
        await executeAction('/Migrations/ApplyMigrations', 'applyBtn', 'Applying...', 'Migrations applied successfully!');
    }

    async function addLanguages() {
        await executeAction('/Migrations/SeedLanguages', 'languagesBtn', 'Adding...', 'Languages added successfully!');
    }

    async function seedFakeData() {
        if (!confirm('Are you sure you want to seed fake data? This should only be done in development environments.')) {
            return;
        }
        await executeAction('/Migrations/SeedFakeData', 'fakeDataBtn', 'Seeding...', 'Fake data seeded successfully!');
    }

    async function executeAction(url, buttonId, loadingText, successText) {
        const btn = document.getElementById(buttonId);
        const originalText = btn.innerHTML;
        
        // Disable button and show loading
        btn.disabled = true;
        btn.innerHTML = `<i class="fas fa-spinner fa-spin me-2"></i>${loadingText}`;
        
        try {
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                }
            });
            
            const result = await response.json();
            
            if (response.ok && result.success) {
                showToast(successText, 'success');
            } else {
                showToast('Failed: ' + (result.message || 'Unknown error'), 'error');
            }
        } catch (error) {
            showToast('Network error: ' + error.message, 'error');
        } finally {
            // Restore button
            btn.disabled = false;
            btn.innerHTML = originalText;
        }
    }
    
    function showToast(message, type = 'success') {
        const toast = document.createElement('div');
        toast.className = 'position-fixed top-0 end-0 p-3';
        toast.style.zIndex = '9999';
        
        const bgClass = type === 'success' ? 'bg-success' : 'bg-danger';
        const icon = type === 'success' ? 'fa-check-circle' : 'fa-exclamation-triangle';
        const title = type === 'success' ? 'Success' : 'Error';
        
        toast.innerHTML = `
            <div class="toast show ${bgClass} text-white" role="alert">
                <div class="toast-header ${bgClass} text-white border-0">
                    <i class="fas ${icon} me-2"></i>
                    <strong class="me-auto">${title}</strong>
                    <button type="button" class="btn-close btn-close-white" onclick="this.closest('.position-fixed').remove()"></button>
                </div>
                <div class="toast-body">${message}</div>
            </div>
        `;
        
        document.body.appendChild(toast);
        
        setTimeout(() => {
            if (toast.parentNode) {
                toast.remove();
            }
        }, 5000);
    }
</script>
