@model IEnumerable<Translator.Application.Features.Users.Queries.GetUsers.Response>

@{
    ViewBag.Title = "Users";
    Layout = "_Layout";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>Users <small class="text-muted" id="totalCountInfo">(@(Model?.Count() ?? 0) total)</small></h2>
    <button type="button" class="btn btn-primary" onclick="showCreateModal()">
        <i class="fas fa-plus"></i> Create User
    </button>
</div>

<!-- Alert container -->
<div id="alertContainer">
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }
</div>

<!-- Users Table -->
<div class="card">
    <div class="card-body" style="padding:0;">
        <div class="table-responsive">
            <table class="table table-hover align-middle mb-0">
                <thead class="table-light">
                    <tr>
                        <th scope="col">Username</th>
                        <th scope="col">User ID</th>
                        <th scope="col">Secret Key</th>
                        <th scope="col">Actions</th>
                    </tr>
                </thead>
                <tbody id="usersTableBody">
                    @if (Model != null && Model.Any())
                    {
                        foreach (var user in Model)
                        {
                            <tr>
                                <td>
                                    <span class="fw-bold">@user.UserName</span>
                                </td>
                                <td>
                                    <code class="text-muted">@user.UserId</code>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <code class="me-2 secret-key" data-key="@user.SecretKey">••••••••••••••••</code>
                                        <button class="btn btn-sm btn-outline-secondary toggle-secret" 
                                                onclick="toggleSecretKey(this, '@Html.Raw(Html.Encode(user.SecretKey))')"
                                                title="Show/Hide Secret Key">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-primary ms-1 copy-secret" 
                                                onclick="copySecretKey('@Html.Raw(Html.Encode(user.SecretKey))')"
                                                title="Copy Secret Key">
                                            <i class="fas fa-copy"></i>
                                        </button>
                                    </div>
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-outline-danger" 
                                            onclick="showDeleteModal('@Html.Raw(Html.Encode(user.UserName))')">
                                        <i class="fas fa-trash"></i> Delete
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr id="emptyState">
                            <td colspan="4" class="text-center text-muted py-4">
                                <i class="fas fa-users fa-3x mb-3"></i>
                                <div>No users found</div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Create User Modal -->
<div class="modal fade" id="createUserModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create New User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-info">
                    <i class="fas fa-info-circle"></i>
                    <strong>Note:</strong> A unique secret key will be generated automatically for the new user.
                </div>
                <div class="mb-3">
                    <label for="createUsername" class="form-label">Username</label>
                    <input type="text" class="form-control" id="createUsername" 
                           placeholder="Enter username" maxlength="50">
                    <div class="invalid-feedback"></div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmCreateBtn">
                    <i class="fas fa-plus"></i> Create User
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Delete User Modal -->
<div class="modal fade" id="deleteUserModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this user?</p>
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-triangle"></i>
                    <strong>Warning:</strong> This action cannot be undone. All data associated with this user will be permanently deleted.
                </div>
                <div class="user-info">
                    <p><strong>Username:</strong> <span id="usernameToDelete"></span></p>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">
                    <i class="fas fa-trash"></i> Delete
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Secret Key Display Modal -->
<div class="modal fade" id="secretKeyModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">User Created Successfully!</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-success">
                    <i class="fas fa-check-circle"></i>
                    <strong>Success:</strong> User has been created successfully!
                </div>
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle"></i>
                    <strong>Important:</strong> Please save this secret key securely. It will not be shown again.
                </div>
                <div class="mb-3">
                    <label class="form-label">Secret Key:</label>
                    <div class="input-group">
                        <input type="text" class="form-control" id="newUserSecretKey" readonly>
                        <button class="btn btn-outline-primary" type="button" onclick="copyText('newUserSecretKey')">
                            <i class="fas fa-copy"></i> Copy
                        </button>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Got it!</button>
            </div>
        </div>
    </div>
</div>

<script>
class UsersManager {
    constructor() {
        this.init();
    }

    init() {
        console.log('Initializing UsersManager...');
        this.bindEvents();
    }

    bindEvents() {
        // Create modal button
        document.getElementById('confirmCreateBtn').addEventListener('click', () => {
            const username = document.getElementById('createUsername').value.trim();
            this.createUser(username);
        });

        // Delete modal button
        document.getElementById('confirmDeleteBtn').addEventListener('click', () => {
            const username = document.getElementById('usernameToDelete').textContent;
            this.deleteUser(username);
        });

        // Enter key in create username field
        document.getElementById('createUsername').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                const username = e.target.value.trim();
                this.createUser(username);
            }
        });
    }

    async loadData() {
        console.log('Loading users...');
        try {
            const response = await fetch('/Users', {
                method: 'GET',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            console.log('Response data:', result);

            if (result.success) {
                this.renderUsers(result.data);
                this.updateTotalCount(result.data.length);
            } else {
                this.showError('Failed to load users: ' + (result.message || 'Unknown error'));
                this.renderEmptyState();
            }
        } catch (error) {
            console.error('Error loading users:', error);
            this.showError('Network error: ' + error.message);
            this.renderEmptyState();
        }
    }

    async createUser(username) {
        if (!username) {
            this.showValidationError('createUsername', 'Username is required');
            return;
        }

        const btn = document.getElementById('confirmCreateBtn');
        btn.disabled = true;

        try {
            const response = await fetch('/Users/Create', {
                method: 'POST',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ userName: username })
            });

            const result = await response.json();

            if (result.success) {
                // Close create modal
                const createModal = document.getElementById('createUserModal');
                if (window.bootstrap) {
                    const bsModal = bootstrap.Modal.getInstance(createModal);
                    if (bsModal) bsModal.hide();
                }

                // Show secret key modal
                document.getElementById('newUserSecretKey').value = result.secretKey;
                const secretKeyModal = new bootstrap.Modal(document.getElementById('secretKeyModal'));
                secretKeyModal.show();

                // Clear form
                document.getElementById('createUsername').value = '';
                this.clearValidationError('createUsername');

                // Reload data
                this.loadData();
            } else {
                this.showError(result.message);
            }
        } catch (error) {
            console.error('Error creating user:', error);
            this.showError('Failed to create user');
        } finally {
            btn.disabled = false;
        }
    }

    async deleteUser(username) {
        const btn = document.getElementById('confirmDeleteBtn');
        btn.disabled = true;

        try {
            const formData = new FormData();
            formData.append('username', username);

            const response = await fetch('/Users/Delete', {
                method: 'POST',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: formData
            });

            const result = await response.json();

            if (result.success) {
                this.showSuccess(result.message);
                
                const modal = document.getElementById('deleteUserModal');
                if (window.bootstrap) {
                    const bsModal = bootstrap.Modal.getInstance(modal);
                    if (bsModal) bsModal.hide();
                }

                this.loadData();
            } else {
                this.showError(result.message);
            }
        } catch (error) {
            console.error('Error deleting user:', error);
            this.showError('Failed to delete user');
        } finally {
            btn.disabled = false;
        }
    }

    renderUsers(users) {
        const tbody = document.getElementById('usersTableBody');
        
        // Remove existing rows except empty state
        const existingRows = tbody.querySelectorAll('tr:not(#emptyState)');
        existingRows.forEach(row => row.remove());
        
        // Remove empty state if it exists
        const emptyState = document.getElementById('emptyState');
        if (emptyState) emptyState.remove();

        if (users && users.length > 0) {
            users.forEach(user => {
                const row = this.createUserRow(user);
                tbody.insertAdjacentHTML('beforeend', row);
            });
        } else {
            this.renderEmptyState();
        }
    }

    createUserRow(user) {
        const username = this.escapeHtml(user.userName);
        const userId = this.escapeHtml(user.userId);
        const secretKey = this.escapeHtml(user.secretKey);

        return `
            <tr>
                <td>
                    <span class="fw-bold">${username}</span>
                </td>
                <td>
                    <code class="text-muted">${userId}</code>
                </td>
                <td>
                    <div class="d-flex align-items-center">
                        <code class="me-2 secret-key" data-key="${secretKey}">••••••••••••••••</code>
                        <button class="btn btn-sm btn-outline-secondary toggle-secret" 
                                onclick="toggleSecretKey(this, '${secretKey}')"
                                title="Show/Hide Secret Key">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-primary ms-1 copy-secret" 
                                onclick="copySecretKey('${secretKey}')"
                                title="Copy Secret Key">
                            <i class="fas fa-copy"></i>
                        </button>
                    </div>
                </td>
                <td>
                    <button class="btn btn-sm btn-outline-danger" 
                            onclick="showDeleteModal('${username}')">
                        <i class="fas fa-trash"></i> Delete
                    </button>
                </td>
            </tr>
        `;
    }

    renderEmptyState() {
        const tbody = document.getElementById('usersTableBody');
        tbody.innerHTML = `
            <tr id="emptyState">
                <td colspan="4" class="text-center text-muted py-4">
                    <i class="fas fa-users fa-3x mb-3"></i>
                    <div>No users found</div>
                </td>
            </tr>
        `;
    }

    updateTotalCount(count) {
        document.getElementById('totalCountInfo').textContent = `(${count} total)`;
    }

    showValidationError(fieldId, message) {
        const field = document.getElementById(fieldId);
        const feedback = field.parentNode.querySelector('.invalid-feedback');
        field.classList.add('is-invalid');
        feedback.textContent = message;
    }

    clearValidationError(fieldId) {
        const field = document.getElementById(fieldId);
        const feedback = field.parentNode.querySelector('.invalid-feedback');
        field.classList.remove('is-invalid');
        feedback.textContent = '';
    }

    showSuccess(message) {
        this.showAlert(message, 'success');
    }

    showError(message) {
        this.showAlert(message, 'danger');
    }

    showAlert(message, type) {
        const container = document.getElementById('alertContainer');
        container.innerHTML = `
            <div class="alert alert-${type} alert-dismissible fade show">
                ${this.escapeHtml(message)}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        `;

        setTimeout(() => {
            const alert = container.querySelector('.alert');
            if (alert) alert.remove();
        }, 5000);
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
}

// Global functions for modal compatibility
function showCreateModal() {
    const modal = new bootstrap.Modal(document.getElementById('createUserModal'));
    modal.show();
}

function showDeleteModal(username) {
    document.getElementById('usernameToDelete').textContent = username;
    const modal = new bootstrap.Modal(document.getElementById('deleteUserModal'));
    modal.show();
}

function toggleSecretKey(button, secretKey) {
    const codeElement = button.parentNode.querySelector('.secret-key');
    const icon = button.querySelector('i');
    
    if (codeElement.textContent === '••••••••••••••••') {
        codeElement.textContent = secretKey;
        icon.className = 'fas fa-eye-slash';
        button.title = 'Hide Secret Key';
    } else {
        codeElement.textContent = '••••••••••••••••';
        icon.className = 'fas fa-eye';
        button.title = 'Show Secret Key';
    }
}

function copySecretKey(secretKey) {
    navigator.clipboard.writeText(secretKey).then(() => {
        // Show temporary success message
        const button = event.target.closest('button');
        const originalHtml = button.innerHTML;
        button.innerHTML = '<i class="fas fa-check"></i>';
        button.classList.remove('btn-outline-primary');
        button.classList.add('btn-success');
        
        setTimeout(() => {
            button.innerHTML = originalHtml;
            button.classList.remove('btn-success');
            button.classList.add('btn-outline-primary');
        }, 1000);
    });
}

function copyText(elementId) {
    const element = document.getElementById(elementId);
    navigator.clipboard.writeText(element.value).then(() => {
        const button = event.target;
        const originalHtml = button.innerHTML;
        button.innerHTML = '<i class="fas fa-check"></i> Copied!';
        button.classList.add('btn-success');
        
        setTimeout(() => {
            button.innerHTML = originalHtml;
            button.classList.remove('btn-success');
        }, 1000);
    });
}

// Initialize
let usersManager;
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded, initializing UsersManager...');
    usersManager = new UsersManager();

    // Auto-hide TempData alerts
    const successAlert = document.querySelector('.alert-success');
    if (successAlert) {
        setTimeout(() => new bootstrap.Alert(successAlert).close(), 5000);
    }

    const errorAlert = document.querySelector('.alert-danger');
    if (errorAlert) {
        setTimeout(() => new bootstrap.Alert(errorAlert).close(), 5000);
    }
});
</script>

<style>
.user-info {
    background-color: #f8f9fa;
    padding: 15px;
    border-radius: 5px;
    border-left: 4px solid #007bff;
}

.secret-key {
    font-family: 'Courier New', monospace;
    font-size: 0.875em;
    background-color: #f8f9fa;
    padding: 2px 4px;
    border-radius: 3px;
}

.toggle-secret, .copy-secret {
    transition: all 0.2s ease;
}

.toggle-secret:hover, .copy-secret:hover {
    transform: scale(1.1);
}
</style>
