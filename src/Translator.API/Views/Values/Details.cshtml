@model IEnumerable<Translator.Application.Features.Values.Queries.GetValue.GetValueResponse>

@{
    Layout = "_Layout";
    ViewBag.Title = "Value Details";
    var valueId = ViewBag.ValueId as Guid? ?? Guid.Empty;
    var currentLanguage = ViewBag.CurrentLanguage as string ?? "";
    var availableLanguages = ViewBag.AvailableLanguages as IEnumerable<Translator.Application.Features.Language.Queries.GetLanguages.GetLanguagesResponse> ?? new List<Translator.Application.Features.Language.Queries.GetLanguages.GetLanguagesResponse>();
    var firstValue = Model?.FirstOrDefault();
    var valueName = firstValue?.ValueKey ?? "Unknown";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h2>Value: <span class="badge bg-primary fs-6">@valueName</span></h2>
        <div class="d-flex align-items-center gap-2 mt-2">
            <small class="text-muted">Value ID:</small>
            <code class="bg-light p-1 rounded">@valueId</code>
            <button class="btn btn-sm btn-outline-secondary" 
                    onclick="copyValueId('@valueId')" 
                    title="Copy Value ID">
                <i class="fas fa-copy"></i>
            </button>
        </div>
        @if (!string.IsNullOrEmpty(currentLanguage))
        {
            <small class="text-muted">Language: <span class="badge bg-secondary">@currentLanguage.ToUpper()</span></small>
        }
    </div>
    <div class="d-flex gap-2">
        <button class="btn btn-success" type="button" data-bs-toggle="collapse" data-bs-target="#createTranslationSection">
            <i class="fas fa-plus"></i> Add Translation
        </button>
        @Html.ActionLink("Back to list", "Index", "Values", null, new { @class = "btn btn-outline-secondary" })
    </div>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<!-- Add Translation Form -->
<div class="collapse mb-4" id="createTranslationSection">
    <div class="card">
        <div class="card-header">
            <h5 class="mb-0">Add New Translation</h5>
        </div>
        <div class="card-body">
            @using (Html.BeginForm("CreateTranslation", "Values", FormMethod.Post, new { id = "createTranslationForm" }))
            {
                @Html.Hidden("value", valueName)
                <div class="row g-3">
                    <div class="col-md-4">
                        @Html.Label("languageCode", "Language", new { @class = "form-label" })
                        @Html.DropDownList("languageCode", 
                            availableLanguages.Select(l => new SelectListItem 
                            { 
                                Text = $"{l.LanguageCode.ToUpper()} - {(string.IsNullOrEmpty(l.LanguageName) ? "N/A" : l.LanguageName)}", 
                                Value = l.LanguageCode 
                            }), 
                            "Select Language", 
                            new { @class = "form-select", required = "required" })
                    </div>
                    <div class="col-md-6">
                        @Html.Label("translation", "Translation", new { @class = "form-label" })
                        @Html.TextBox("translation", "", new { @class = "form-control", required = "required", placeholder = "Enter translation..." })
                    </div>
                    <div class="col-md-2 d-flex align-items-end">
                        <button type="submit" class="btn btn-success w-100">
                            <i class="fas fa-plus"></i> Add
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@if (Model != null && Model.Any())
{
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">
                <i class="fas fa-language"></i> All Translations
            </h5>
            <span class="badge bg-info">@Model.Count() Languages</span>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover table-striped">
                    <thead class="table-dark">
                        <tr>
                            <th width="15%">Language</th>
                            <th width="50%">Translation</th>
                            <th width="20%">Key</th>
                            <th width="15%">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var translation in Model)
                        {
                            <tr>
                                <td>
                                    <span class="badge bg-primary">@translation.LanguageCode.ToUpper()</span>
                                </td>
                                <td class="text-break">
                                    @translation.ValueTranslation
                                </td>
                                <td>
                                    <code class="text-muted">@translation.ValueKey</code>
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-outline-danger" onclick="showDeleteTranslationModal('@Html.Raw(Html.Encode(valueName))', '@Html.Raw(Html.Encode(translation.LanguageCode))', '@Html.Raw(Html.Encode(translation.ValueTranslation))')">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}
else
{
    <div class="card">
        <div class="card-body text-center py-5">
            <i class="fas fa-language fa-4x text-muted mb-3"></i>
            <h5 class="text-muted">No Translations Found</h5>
            <p class="text-muted">This value has no translations yet. Add the first one using the button above!</p>
        </div>
    </div>
}

<div class="mt-4">
    <div class="d-flex gap-2">
        <button class="btn btn-danger" onclick="showDeleteValueModal('@Html.Raw(Html.Encode(valueName))')">
            <i class="fas fa-trash"></i> Delete Entire Value
        </button>
    </div>
</div>

<!-- Delete Value Modal -->
<div class="modal fade" id="deleteValueModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Value</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the entire value <strong>@valueName</strong>?</p>
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-triangle"></i>
                    <strong>Warning:</strong> This will delete all translations for this value!
                </div>
            </div>
            <div class="modal-footer">
                @using (Html.BeginForm("Delete", "Values", FormMethod.Post, new { id = "deleteValueForm" }))
                {
                    @Html.Hidden("valueName", valueName)
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">
                        <i class="fas fa-trash"></i> Delete Value
                    </button>
                }
            </div>
        </div>
    </div>
</div>

<!-- Delete Translation Modal -->
<div class="modal fade" id="deleteTranslationModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Translation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this translation?</p>
                <div class="translation-info">
                    <p><strong>Value:</strong> <span id="valueToDeleteTranslation"></span></p>
                    <p><strong>Language:</strong> <span id="languageToDeleteTranslation"></span></p>
                    <p><strong>Translation:</strong> <span id="translationToDelete"></span></p>
                </div>
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle"></i>
                    <strong>Warning:</strong> This action cannot be undone!
                </div>
            </div>
            <div class="modal-footer">
                @using (Html.BeginForm("DeleteTranslation", "Values", FormMethod.Post, new { id = "deleteTranslationForm" }))
                {
                    @Html.Hidden("value", "")
                    @Html.Hidden("languageCode", "")
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">
                        <i class="fas fa-trash"></i> Delete Translation
                    </button>
                }
            </div>
        </div>
    </div>
</div>

<script>
    function showDeleteValueModal(valueName) {
        const modal = new bootstrap.Modal(document.getElementById('deleteValueModal'));
        modal.show();
    }

    function showDeleteTranslationModal(valueName, languageCode, translation) {
        document.getElementById('valueToDeleteTranslation').textContent = valueName;
        document.getElementById('languageToDeleteTranslation').textContent = languageCode.toUpperCase();
        document.getElementById('translationToDelete').textContent = translation;
        
        document.querySelector('#deleteTranslationForm input[name="value"]').value = valueName;
        document.querySelector('#deleteTranslationForm input[name="languageCode"]').value = languageCode;
        
        const modal = new bootstrap.Modal(document.getElementById('deleteTranslationModal'));
        modal.show();
    }

    async function copyValueId(valueId) {
        try {
            await navigator.clipboard.writeText(valueId);
            showToast(`Value ID copied to clipboard!`, 'success');
        } catch (error) {
            console.error('Failed to copy:', error);
            showToast(`Failed to copy to clipboard`, 'error');
        }
    }

    function showToast(message, type = 'success') {
        const toast = document.createElement('div');
        toast.className = 'position-fixed top-0 end-0 p-3';
        toast.style.zIndex = '9999';
        
        const bgClass = type === 'success' ? 'bg-success' : 'bg-danger';
        
        toast.innerHTML = `
            <div class="toast show ${bgClass} text-white" role="alert">
                <div class="toast-header ${bgClass} text-white border-0">
                    <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-triangle'} me-2"></i>
                    <strong class="me-auto">${type === 'success' ? 'Success' : 'Error'}</strong>
                    <button type="button" class="btn-close btn-close-white" onclick="this.closest('.position-fixed').remove()"></button>
                </div>
                <div class="toast-body">${message}</div>
            </div>
        `;
        
        document.body.appendChild(toast);
        
        setTimeout(() => {
            if (toast.parentNode) {
                toast.remove();
            }
        }, 3000);
    }

    document.addEventListener('DOMContentLoaded', function() {
        const successAlert = document.querySelector('.alert-success');
        if (successAlert) {
            setTimeout(() => {
                const alert = new bootstrap.Alert(successAlert);
                alert.close();
            }, 5000);
        }

        const errorAlert = document.querySelector('.alert-danger');
        if (errorAlert) {
            setTimeout(() => {
                const alert = new bootstrap.Alert(errorAlert);
                alert.close();
            }, 5000);
        }
    });
</script>

<style>
    .badge.fs-6 {
        font-size: 1rem !important;
    }
    
    .text-break {
        word-break: break-word;
    }
    
    .translation-info {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 5px;
        border-left: 4px solid #007bff;
    }

    .gap-2 {
        gap: 0.5rem;
    }
</style>
