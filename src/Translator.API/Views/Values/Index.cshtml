@model IEnumerable<Translator.Application.Features.Values.Queries.GetAllValues.GetAllValuesResponse>

@{
    Layout = "_Layout";
    ViewBag.Title = "Values";
    var currentPage = ViewBag.CurrentPage ?? 1;
    var pageSize = ViewBag.PageSize ?? 10;
    var totalPages = ViewBag.TotalPages ?? 1;
    var totalCount = ViewBag.TotalCount ?? 0;
    var sortBy = ViewBag.SortBy as string ?? "date";
    var sortDirection = ViewBag.SortDirection as string ?? "asc";
    
    string flipDirection(string dir) => dir == "asc" ? "desc" : "asc";
    string getSortIcon(string column) => 
        sortBy == column ? (sortDirection == "asc" ? "fa-sort-up" : "fa-sort-down") : "fa-sort";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>Values <small class="text-muted">(@totalCount total)</small></h2>
    <button class="btn btn-success" type="button" data-bs-toggle="collapse" data-bs-target="#createValueSection">
        <i class="fas fa-plus"></i> Create Value
    </button>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<!-- Create Value Form -->
<div class="collapse mb-4" id="createValueSection">
    <div class="card">
        <div class="card-header">
            <h5 class="mb-0">Create New Value</h5>
        </div>
        <div class="card-body">
            @using (Html.BeginForm("Create", "Values", FormMethod.Post, new { id = "createValueForm" }))
            {
                <div class="row g-3">
                    <div class="col-md-5">
                        @Html.Label("key", "Key", new { @class = "form-label" })
                        @Html.TextBox("key", "", new { @class = "form-control", required = "required", placeholder = "Enter key..." })
                    </div>
                    <div class="col-md-5">
                        @Html.Label("value", "Value", new { @class = "form-label" })
                        @Html.TextBox("value", "", new { @class = "form-control", required = "required", placeholder = "Enter value..." })
                    </div>
                    <div class="col-md-2 d-flex align-items-end">
                        <button type="submit" class="btn btn-success w-100">Create</button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Values Table -->
<div class="card">
    <div class="card-body" style="padding:0;">
        <div class="table-responsive">
            <table class="table table-hover align-middle mb-0">
                <thead class="table-light">
                    <tr>
                        <th>
                            Key
                            <a href="@Url.Action("Index", new { 
                                sortBy = "key", 
                                sortDirection = flipDirection(sortDirection), 
                                pageNumber = currentPage, 
                                pageSize 
                            })" class="btn btn-link btn-sm p-1 ms-1" title="Sort by key">
                                <i class="fas @getSortIcon("key")"></i>
                            </a>
                        </th>
                        <th>Translations Count</th>
                        <th>
                            Created Date
                            <a href="@Url.Action("Index", new { 
                                sortBy = "date", 
                                sortDirection = flipDirection(sortDirection), 
                                pageNumber = currentPage, 
                                pageSize 
                            })" class="btn btn-link btn-sm p-1 ms-1" title="Sort by date">
                                <i class="fas @getSortIcon("date")"></i>
                            </a>
                        </th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model != null && Model.Any())
                    {
                        foreach (var value in Model)
                        {
                            <tr>
                                <td>
                                    <div class="d-flex align-items-center gap-2">
                                        <span class="badge bg-primary">@value.Key</span>
                                        <button class="btn btn-sm btn-outline-secondary" 
                                                onclick="copyValueId('@value.ValueId')" 
                                                title="Copy Value ID">
                                            <i class="fas fa-copy"></i>
                                        </button>
                                    </div>
                                </td>
                                <td>
                                    <span class="badge bg-info">@value.TranslationsCount</span>
                                </td>
                                <td>
                                    <small class="text-muted">@value.CreatedAt.ToString("dd/MM/yyyy HH:mm")</small>
                                </td>
                                <td>
                                    <div class="d-flex gap-1">
                                        <a href="@Url.Action("Details", "Values", new { valueId = value.ValueId })" 
                                           class="btn btn-sm btn-outline-primary">
                                            <i class="fas fa-eye"></i> Details
                                        </a>
                                        <button class="btn btn-sm btn-outline-danger" 
                                                onclick="showDeleteModal('@Html.Raw(Html.Encode(value.Key))')">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="4" class="text-center text-muted py-4">
                                <i class="fas fa-inbox fa-3x mb-3"></i>
                                <div>No values found</div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Pagination -->
@if (Model != null && Model.Any())
{
    <nav class="mt-4">
        <div class="d-flex justify-content-between align-items-center mb-2">
            <small class="text-muted">
                Showing @((currentPage - 1) * pageSize + 1) to @Math.Min(currentPage * pageSize, totalCount) of @totalCount results
            </small>
            <small class="text-muted">Page @currentPage of @totalPages</small>
        </div>
        
        <ul class="pagination justify-content-center">
            <!-- First page button -->
            @if (currentPage > 1)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Index", new { 
                        pageNumber = 1, 
                        pageSize, 
                        sortBy, 
                        sortDirection 
                    })" title="First page">
                        <i class="fas fa-angle-double-left"></i> First
                    </a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span class="page-link"><i class="fas fa-angle-double-left"></i> First</span>
                </li>
            }

            <!-- Previous button -->
            @if (currentPage > 1)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Index", new { 
                        pageNumber = currentPage - 1, 
                        pageSize, 
                        sortBy, 
                        sortDirection 
                    })">Previous</a>
                </li>
            }
            else 
            { 
                <li class="page-item disabled">
                    <span class="page-link">Previous</span>
                </li> 
            }

            <!-- Page numbers -->
            @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
            {
                if (i == currentPage)
                {
                    <li class="page-item active">
                        <span class="page-link">@i</span>
                    </li>
                }
                else
                {
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Index", new { 
                            pageNumber = i, 
                            pageSize, 
                            sortBy, 
                            sortDirection 
                        })">@i</a>
                    </li>
                }
            }

            <!-- Next button -->
            @if (currentPage < totalPages)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Index", new { 
                        pageNumber = currentPage + 1, 
                        pageSize, 
                        sortBy, 
                        sortDirection 
                    })">Next</a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span class="page-link">Next</span>
                </li>
            }

            <!-- Last page button -->
            @if (currentPage < totalPages)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Index", new { 
                        pageNumber = totalPages, 
                        pageSize, 
                        sortBy, 
                        sortDirection 
                    })" title="Last page">
                        Last <i class="fas fa-angle-double-right"></i>
                    </a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span class="page-link">Last <i class="fas fa-angle-double-right"></i></span>
                </li>
            }
        </ul>
    </nav>

    <!-- Page size selector -->
    <div class="d-flex justify-content-end align-items-center mt-3">
        @using (Html.BeginForm("Index", "Values", FormMethod.Get, new { @class = "d-flex align-items-center" }))
        {
            @Html.Hidden("pageNumber", 1)
            @Html.Hidden("sortBy", sortBy)
            @Html.Hidden("sortDirection", sortDirection)
            
            <label class="form-label me-2 mb-0">Show:</label>
            @Html.DropDownList("pageSize", new List<SelectListItem>
            {
                new SelectListItem { Text = "5", Value = "5", Selected = pageSize == 5 },
                new SelectListItem { Text = "10", Value = "10", Selected = pageSize == 10 },
                new SelectListItem { Text = "25", Value = "25", Selected = pageSize == 25 },
                new SelectListItem { Text = "50", Value = "50", Selected = pageSize == 50 }
            }, new { 
                @class = "form-select form-select-sm", 
                style = "width: 80px;",
                onchange = "this.form.submit();" 
            })
        }
    </div>
}

<!-- Delete Modal -->
<div class="modal fade" id="deleteValueModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Value</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete value <strong id="valueNameToDelete"></strong>?</p>
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle"></i>
                    <strong>Warning:</strong> This action cannot be undone!
                </div>
            </div>
            <div class="modal-footer">
                @using (Html.BeginForm("Delete", "Values", FormMethod.Post, new { id = "deleteValueForm" }))
                {
                    @Html.Hidden("valueName", "")
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">
                        <i class="fas fa-trash"></i> Delete
                    </button>
                }
            </div>
        </div>
    </div>
</div>

<script>
    function showDeleteModal(valueName) {
        document.getElementById('valueNameToDelete').textContent = valueName;
        document.querySelector('#deleteValueForm input[name="valueName"]').value = valueName;
        const modal = new bootstrap.Modal(document.getElementById('deleteValueModal'));
        modal.show();
    }

    async function copyValueId(valueId) {
        try {
            await navigator.clipboard.writeText(valueId);
            showToast(`📋 Value ID copied to clipboard!`, 'success');
        } catch (error) {
            console.error('Failed to copy:', error);
            showToast(`Failed to copy to clipboard`, 'error');
        }
    }

    function showToast(message, type = 'success') {
        const toast = document.createElement('div');
        toast.className = 'position-fixed top-0 end-0 p-3';
        toast.style.zIndex = '9999';
        
        const bgClass = type === 'success' ? 'bg-success' : 'bg-danger';
        
        toast.innerHTML = `
            <div class="toast show ${bgClass} text-white" role="alert">
                <div class="toast-header ${bgClass} text-white border-0">
                    <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-triangle'} me-2"></i>
                    <strong class="me-auto">${type === 'success' ? 'Success' : 'Error'}</strong>
                    <button type="button" class="btn-close btn-close-white" onclick="this.closest('.position-fixed').remove()"></button>
                </div>
                <div class="toast-body">${message}</div>
            </div>
        `;
        
        document.body.appendChild(toast);
        
        setTimeout(() => {
            if (toast.parentNode) {
                toast.remove();
            }
        }, 3000);
    }

    document.addEventListener('DOMContentLoaded', function() {
        const successAlert = document.querySelector('.alert-success');
        if (successAlert) {
            setTimeout(() => {
                const alert = new bootstrap.Alert(successAlert);
                alert.close();
            }, 5000);
        }

        const errorAlert = document.querySelector('.alert-danger');
        if (errorAlert) {
            setTimeout(() => {
                const alert = new bootstrap.Alert(errorAlert);
                alert.close();
            }, 5000);
        }
    });
</script>

<style>
    .text-truncate {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .badge {
        font-size: 0.875em;
    }

    .gap-1 {
        gap: 0.25rem;
    }

    .gap-2 {
        gap: 0.5rem;
    }
</style>
