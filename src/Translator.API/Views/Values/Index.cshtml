@model IEnumerable<Translator.Application.Features.ValuesAdmin.Queries.AdminGetAllValues.Response>

@{
Layout = "_Layout";
ViewBag.Title = "Values Management";
var currentPage = ViewBag.CurrentPage ?? 1;
var pageSize = ViewBag.PageSize ?? 10;
var totalPages = ViewBag.TotalPages ?? 1;
var totalCount = ViewBag.TotalCount ?? 0;
var sortBy = ViewBag.SortBy as string ?? "date";
var sortDirection = ViewBag.SortDirection as string ?? "desc";
var searchKey = ViewBag.ValueKey as string ?? "";
var ownerName = ViewBag.OwnerName as string ?? "";
var ownershipType = ViewBag.OwnershipType as string ?? "";
var globalCount = ViewBag.GlobalCount ?? 0;
var userCount = ViewBag.UserCount ?? 0;
var hasNextPage = ViewBag.HasNextPage ?? false;
var hasPreviousPage = ViewBag.HasPreviousPage ?? false;
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h2>Values Management <small class="text-muted" id="totalCountInfo">(@totalCount total)</small></h2>
        <div class="d-flex gap-2 mt-2">
            <span class="badge bg-primary fs-7">Global: @globalCount</span>
            <span class="badge bg-secondary fs-7">User-owned: @userCount</span>
        </div>
    </div>
    <button class="btn btn-success" type="button" data-bs-toggle="collapse" data-bs-target="#createValueSection">
        <i class="fas fa-plus"></i> Create Global Value
    </button>
</div>

<!-- Alert container -->
<div id="alertContainer">
    @if (TempData["SuccessMessage"] != null)
    {
    <div class="alert alert-success alert-dismissible fade show">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
    <div class="alert alert-danger alert-dismissible fade show">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
    }
</div>

<!-- Search Form -->
<div class="card mb-3">
    <div class="card-header">
        <h5 class="mb-0">
            <i class="fas fa-search"></i> Search & Filter Values
        </h5>
    </div>
    <div class="card-body">
        <form id="searchForm" class="row g-3">
            <div class="col-md-3">
                <label class="form-label">Search by Key</label>
                <input type="text" id="searchInput" name="valueKey"
                       value="@searchKey"
                       class="form-control"
                       placeholder="Enter key to search..." />
            </div>
            <div class="col-md-3">
                <label class="form-label">Owner Name</label>
                <input type="text" id="ownerNameInput" name="ownerName"
                       value="@ownerName"
                       class="form-control"
                       placeholder="Enter username..." />
            </div>
            <div class="col-md-2">
                <label class="form-label">Type</label>
                <select id="ownershipTypeSelect" name="ownershipType" class="form-select">
                    <option value="">All Types</option>
                    <option value="Global" @(ownershipType == "Global" ? "selected" : "")>Global</option>
                    <option value="User" @(ownershipType == "User" ? "selected" : "")>User-owned</option>
                </select>
            </div>
            <div class="col-md-2">
                <label class="form-label">Page Size</label>
                <select id="pageSizeSelect" class="form-select">
                    <option value="10" @(pageSize == 10 ? "selected" : "")>10</option>
                    <option value="25" @(pageSize == 25 ? "selected" : "")>25</option>
                    <option value="50" @(pageSize == 50 ? "selected" : "")>50</option>
                    <option value="100" @(pageSize == 100 ? "selected" : "")>100</option>
                </select>
            </div>
            <div class="col-md-2 d-flex align-items-end gap-1">
                <button type="submit" class="btn btn-primary flex-fill">
                    <i class="fas fa-search"></i> Search
                </button>
                <button type="button" id="clearSearchBtn" class="btn btn-outline-secondary"
                        style="display: @(string.IsNullOrEmpty(searchKey) && string.IsNullOrEmpty(ownerName) && string.IsNullOrEmpty(ownershipType) ? "none" : "inline-block")">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Create Value Form -->
<div class="collapse mb-4" id="createValueSection">
    <div class="card">
        <div class="card-header bg-success text-white">
            <h5 class="mb-0">
                <i class="fas fa-plus"></i> Create New Global Value
            </h5>
        </div>
        <div class="card-body">
            <form id="createValueForm" class="row g-3">
                <div class="col-md-5">
                    <label for="valueKey" class="form-label">Key</label>
                    <input type="text" id="valueKey" name="key" class="form-control" required placeholder="Enter unique key..." />
                    <div class="form-text">This will be a global value accessible to all users</div>
                </div>
                <div class="col-md-5">
                    <label for="valueValue" class="form-label">Value</label>
                    <input type="text" id="valueValue" name="value" class="form-control" required placeholder="Enter default translation..." />
                    <div class="form-text">Enter the default English translation</div>
                </div>
                <div class="col-md-2 d-flex align-items-end">
                    <button type="submit" class="btn btn-success w-100">
                        <i class="fas fa-globe"></i> Create Global
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Loading Indicator -->
<div id="loadingIndicator" class="text-center py-4" style="display: none;">
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
    <div class="mt-2">Loading values...</div>
</div>

<!-- Values Table -->
<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Values List</h5>
        <div class="d-flex gap-2 align-items-center">
            <small class="text-muted">Page @currentPage of @totalPages</small>
        </div>
    </div>
    <div class="card-body p-0">
        <div class="table-responsive">
            <table class="table table-hover align-middle mb-0">
                <thead class="table-light">
                <tr>
                    <th>
                        Key
                        <button class="btn btn-link btn-sm p-1 ms-1 sort-btn" data-sort="key" title="Sort by key">
                            <i class="fas fa-sort sort-icon-key"></i>
                        </button>
                    </th>
                    <th>
                        Owner
                        <button class="btn btn-link btn-sm p-1 ms-1 sort-btn" data-sort="owner" title="Sort by owner">
                            <i class="fas fa-sort sort-icon-owner"></i>
                        </button>
                    </th>
                    <th>Translations</th>
                    <th>
                        Created Date
                        <button class="btn btn-link btn-sm p-1 ms-1 sort-btn" data-sort="date" title="Sort by date">
                            <i class="fas fa-sort sort-icon-date"></i>
                        </button>
                    </th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody id="valuesTableBody">
                @if (Model != null && Model.Any())
                {
                foreach (var value in Model)
                {
                <tr>
                    <td>
                        <div class="d-flex align-items-center gap-2">
                            <span class="badge bg-primary fs-6">@value.Key</span>
                            <button class="btn btn-sm btn-outline-secondary copy-value-btn"
                                    data-id="@value.ValueId"
                                    title="Copy Value ID">
                                <i class="fas fa-copy"></i>
                            </button>
                        </div>
                    </td>
                    <td>
                        @if (value.OwnershipType == "Global")
                        {
                        <span class="badge bg-success">
                                            <i class="fas fa-globe"></i> Global
                                        </span>
                        }
                        else
                        {
                        <div class="d-flex align-items-center gap-1">
                                            <span class="badge bg-info">
                                                <i class="fas fa-user"></i> @value.OwnerName
                                            </span>
                        </div>
                        }
                    </td>
                    <td>
                        <span class="badge bg-info fs-6">@value.TranslationsCount</span>
                    </td>
                    <td>
                        <small class="text-muted">@value.CreatedAt.ToString("dd/MM/yyyy HH:mm")</small>
                    </td>
                    <td>
                        <div class="d-flex gap-1">
                            <a href="@Url.Action("Details", "Values", new { valueId = value.ValueId })"
                               class="btn btn-sm btn-outline-primary" title="View Details">
                                <i class="fas fa-eye"></i>
                            </a>
                            <button class="btn btn-sm btn-outline-danger delete-value-btn"
                                    data-key="@Html.Encode(value.Key)"
                                    data-ownership="@value.OwnershipType"
                                    data-owner="@Html.Encode(value.OwnerName)"
                                    title="Delete Value">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                </tr>
                }
                }
                else
                {
                <tr id="emptyState">
                    <td colspan="5" class="text-center text-muted py-5">
                        <i class="fas fa-inbox fa-3x mb-3"></i>
                        <div class="h5">No values found</div>
                        <div>Try adjusting your search criteria or create a new value</div>
                    </td>
                </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Pagination -->
@if (totalPages > 1)
{
<div class="d-flex justify-content-between align-items-center mt-4">
    <div class="text-muted">
        Showing @((currentPage - 1) * pageSize + 1) to @Math.Min(currentPage * pageSize, totalCount) of @totalCount entries
    </div>
    <nav aria-label="Values pagination">
        <ul class="pagination mb-0">
            @if (hasPreviousPage)
            {
            <li class="page-item">
                <button class="page-link pagination-btn" data-page="1" title="First page">
                    <i class="fas fa-angle-double-left"></i>
                </button>
            </li>
            <li class="page-item">
                <button class="page-link pagination-btn" data-page="@(currentPage - 1)" title="Previous page">
                    <i class="fas fa-angle-left"></i>
                </button>
            </li>
            }

            @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
            {
            <li class="page-item @(i == currentPage ? "active" : "")">
                <button class="page-link pagination-btn" data-page="@i">@i</button>
            </li>
            }

            @if (hasNextPage)
            {
            <li class="page-item">
                <button class="page-link pagination-btn" data-page="@(currentPage + 1)" title="Next page">
                    <i class="fas fa-angle-right"></i>
                </button>
            </li>
            <li class="page-item">
                <button class="page-link pagination-btn" data-page="@totalPages" title="Last page">
                    <i class="fas fa-angle-double-right"></i>
                </button>
            </li>
            }
        </ul>
    </nav>
</div>
}

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteValueModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-exclamation-triangle text-danger"></i>
                    Delete Value
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete value <strong id="valueNameToDelete"></strong>?</p>
                <div id="ownershipInfo" class="mb-3">
                    <p><strong>Type:</strong> <span id="valueTypeToDelete" class="badge"></span></p>
                    <p id="ownerInfo" style="display: none;"><strong>Owner:</strong> <span id="valueOwnerToDelete"></span></p>
                </div>
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle"></i>
                    <strong>Warning:</strong> This action cannot be undone and will delete all translations associated with this value!
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times"></i> Cancel
                </button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">
                    <i class="fas fa-trash"></i> Delete Permanently
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    class ValuesManager {
        constructor() {
            this.currentPage = @currentPage;
            this.pageSize = @pageSize;
            this.sortBy = '@sortBy';
            this.sortDirection = '@sortDirection';
            this.searchKey = '@Html.Raw(searchKey)';
            this.ownerName = '@Html.Raw(ownerName)';
            this.ownershipType = '@Html.Raw(ownershipType)';
            this.totalCount = @totalCount;
            this.totalPages = @totalPages;

            this.init();
        }

        init() {
            console.log('🚀 Initializing ValuesManager...');
            this.bindEvents();
            this.updateUI();
        }

        bindEvents() {
            document.getElementById('searchForm').addEventListener('submit', (e) => {
                e.preventDefault();
                this.performSearch();
            });

            const searchInput = document.getElementById('searchInput');
            const ownerNameInput = document.getElementById('ownerNameInput');
            const ownershipTypeSelect = document.getElementById('ownershipTypeSelect');
            let debounceTimeout;

            [searchInput, ownerNameInput].forEach(input => {
                input.addEventListener('input', (e) => {
                    clearTimeout(debounceTimeout);
                    debounceTimeout = setTimeout(() => {
                        this.updateSearchFields();
                        this.currentPage = 1;
                        this.loadData();
                        this.updateSearchUI();
                    }, 300);
                });
            });

            ownershipTypeSelect.addEventListener('change', (e) => {
                this.updateSearchFields();
                this.currentPage = 1;
                this.loadData();
                this.updateSearchUI();
            });

            document.getElementById('clearSearchBtn').addEventListener('click', () => {
                this.clearSearch();
            });

            document.getElementById('createValueForm').addEventListener('submit', (e) => {
                e.preventDefault();
                this.createValue();
            });

            document.querySelectorAll('.sort-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.preventDefault();
                    const sortBy = btn.getAttribute('data-sort');
                    this.sortValues(sortBy);
                });
            });

            const pageSizeSelect = document.getElementById('pageSizeSelect');
            if (pageSizeSelect) {
                pageSizeSelect.addEventListener('change', (e) => {
                    this.pageSize = parseInt(e.target.value);
                    this.currentPage = 1;
                    this.loadData();
                });
            }

            document.getElementById('confirmDeleteBtn').addEventListener('click', () => {
                const valueName = document.getElementById('valueNameToDelete').textContent;
                this.deleteValue(valueName);
            });

            this.bindPaginationEvents();
            this.bindTableEvents();
        }

        updateSearchFields() {
            this.searchKey = document.getElementById('searchInput').value.trim();
            this.ownerName = document.getElementById('ownerNameInput').value.trim();
            this.ownershipType = document.getElementById('ownershipTypeSelect').value;
        }

        async performSearch() {
            const submitBtn = document.querySelector('#searchForm button[type="submit"]');

            this.updateSearchFields();
            this.currentPage = 1;

            submitBtn.disabled = true;

            try {
                await this.loadData();
                this.updateSearchUI();
            } finally {
                submitBtn.disabled = false;
            }
        }

        clearSearch() {
            document.getElementById('searchInput').value = '';
            document.getElementById('ownerNameInput').value = '';
            document.getElementById('ownershipTypeSelect').value = '';
            this.searchKey = '';
            this.ownerName = '';
            this.ownershipType = '';
            this.currentPage = 1;
            this.loadData();
            this.updateSearchUI();
        }

        updateSearchUI() {
            const clearBtn = document.getElementById('clearSearchBtn');
            const hasSearch = this.searchKey || this.ownerName || this.ownershipType;
            clearBtn.style.display = hasSearch ? 'inline-block' : 'none';
        }

        showLoading() {
            document.getElementById('loadingIndicator').style.display = 'block';
        }

        hideLoading() {
            document.getElementById('loadingIndicator').style.display = 'none';
        }

        async loadData() {
            console.log('🔄 Loading data...');
            this.showLoading();
            this.updateSortIcons();

            try {
                const params = new URLSearchParams({
                    pageNumber: this.currentPage,
                    pageSize: this.pageSize,
                    sortBy: this.sortBy,
                    sortDirection: this.sortDirection
                });

                if (this.searchKey) params.append('valueKey', this.searchKey);
                if (this.ownerName) params.append('ownerName', this.ownerName);
                if (this.ownershipType) params.append('ownershipType', this.ownershipType);

                const hasSearch = this.searchKey || this.ownerName || this.ownershipType;
                const endpoint = hasSearch ? '/Values/Search' : '/Values/';

                const response = await fetch(`${endpoint}?${params}`, {
                    method: 'GET',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest',
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }

                const result = await response.json();

                if (result.success) {
                    this.updatePageData(result);
                    this.renderValues(result.data || []);
                    this.renderPagination(result);
                    this.updateUI();
                } else {
                    this.showError('Failed to load values: ' + (result.message || 'Unknown error'));
                    this.renderEmptyState();
                }
            } catch (error) {
                console.error('💥 Error loading data:', error);
                this.showError('Network error: ' + error.message);
                this.renderEmptyState();
            } finally {
                this.hideLoading();
            }
        }

        updatePageData(result) {
            this.currentPage = result.currentPage;
            this.totalPages = result.totalPages;
            this.totalCount = result.totalCount;
            this.pageSize = result.pageSize;
        }

        renderValues(values) {
            const tbody = document.getElementById('valuesTableBody');
            tbody.innerHTML = '';

            if (values.length === 0) {
                this.renderEmptyState();
                return;
            }

            values.forEach(value => {
                tbody.insertAdjacentHTML('beforeend', this.createValueRow(value));
            });

            this.bindTableEvents();
        }

        createValueRow(value) {
            const createdDate = new Date(value.createdAt).toLocaleDateString('en-GB', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });

            const ownerBadge = value.ownershipType === 'Global'
                ? `<span class="badge bg-success"><i class="fas fa-globe"></i> Global</span>`
                : `<div class="d-flex align-items-center gap-1"><span class="badge bg-info"><i class="fas fa-user"></i> ${this.escapeHtml(value.ownerName)}</span></div>`;

            return `
            <tr>
                <td>
                    <div class="d-flex align-items-center gap-2">
                        <span class="badge bg-primary fs-6">${this.escapeHtml(value.key)}</span>
                        <button class="btn btn-sm btn-outline-secondary copy-value-btn" 
                                data-id="${value.valueId}" 
                                title="Copy Value ID">
                            <i class="fas fa-copy"></i>
                        </button>
                    </div>
                </td>
                <td>${ownerBadge}</td>
                <td>
                    <span class="badge bg-info fs-6">${value.translationsCount}</span>
                </td>
                <td>
                    <small class="text-muted">${createdDate}</small>
                </td>
                <td>
                    <div class="d-flex gap-1">
                        <a href="/Values/Details/${value.valueId}" 
                           class="btn btn-sm btn-outline-primary" title="View Details">
                            <i class="fas fa-eye"></i>
                        </a>
                        <button class="btn btn-sm btn-outline-danger delete-value-btn" 
                                data-key="${this.escapeHtml(value.key)}"
                                data-ownership="${value.ownershipType}"
                                data-owner="${this.escapeHtml(value.ownerName)}"
                                title="Delete Value">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            </tr>
        `;
        }

        renderEmptyState() {
            const tbody = document.getElementById('valuesTableBody');
            tbody.innerHTML = `
            <tr id="emptyState">
                <td colspan="5" class="text-center text-muted py-5">
                    <i class="fas fa-inbox fa-3x mb-3"></i>
                    <div class="h5">No values found</div>
                    <div>Try adjusting your search criteria or create a new value</div>
                </td>
            </tr>
        `;
        }

        bindTableEvents() {
            document.querySelectorAll('.copy-value-btn').forEach(btn => {
                btn.addEventListener('click', async (e) => {
                    const valueId = btn.getAttribute('data-id');
                    await this.copyValueId(valueId);
                });
            });

            document.querySelectorAll('.delete-value-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const valueKey = btn.getAttribute('data-key');
                    const ownershipType = btn.getAttribute('data-ownership');
                    const ownerName = btn.getAttribute('data-owner');
                    this.showDeleteModal(valueKey, ownershipType, ownerName);
                });
            });
        }

        showDeleteModal(valueName, ownershipType, ownerName) {
            document.getElementById('valueNameToDelete').textContent = valueName;

            const typeElement = document.getElementById('valueTypeToDelete');
            const ownerInfoElement = document.getElementById('ownerInfo');
            const ownerNameElement = document.getElementById('valueOwnerToDelete');

            if (ownershipType === 'Global') {
                typeElement.textContent = 'Global';
                typeElement.className = 'badge bg-success';
                ownerInfoElement.style.display = 'none';
            } else {
                typeElement.textContent = 'User-owned';
                typeElement.className = 'badge bg-info';
                ownerNameElement.textContent = ownerName;
                ownerInfoElement.style.display = 'block';
            }

            const modal = new bootstrap.Modal(document.getElementById('deleteValueModal'));
            modal.show();
        }

        async copyValueId(valueId) {
            try {
                await navigator.clipboard.writeText(valueId);
                this.showSuccess('Value ID copied to clipboard!');
            } catch (err) {
                console.error('Failed to copy: ', err);
                this.showError('Failed to copy Value ID');
            }
        }

        async createValue() {
            const form = document.getElementById('createValueForm');
            const formData = new FormData(form);
            const submitBtn = form.querySelector('button[type="submit"]');

            submitBtn.disabled = true;

            try {
                const response = await fetch('/Values/Create', {
                    method: 'POST',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: formData
                });

                const result = await response.json();

                if (result.success) {
                    this.showSuccess(result.message);
                    form.reset();
                    const collapse = document.getElementById('createValueSection');
                    const bsCollapse = bootstrap.Collapse.getInstance(collapse);
                    if (bsCollapse) bsCollapse.hide();
                    await this.loadData();
                } else {
                    this.showError(result.message);
                }
            } catch (error) {
                console.error('Error creating value:', error);
                this.showError('Network error: ' + error.message);
            } finally {
                submitBtn.disabled = false;
            }
        }

        async deleteValue(valueName) {
            try {
                const formData = new FormData();
                formData.append('valueName', valueName);

                const response = await fetch('/Values/Delete', {
                    method: 'POST',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: formData
                });

                const result = await response.json();

                if (result.success) {
                    this.showSuccess(result.message);
                    await this.loadData();
                } else {
                    this.showError(result.message);
                }
            } catch (error) {
                console.error('Error deleting value:', error);
                this.showError('Network error: ' + error.message);
            }

            const modal = bootstrap.Modal.getInstance(document.getElementById('deleteValueModal'));
            modal.hide();
        }

        sortValues(sortBy) {
            if (this.sortBy === sortBy) {
                this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';
            } else {
                this.sortBy = sortBy;
                this.sortDirection = 'asc';
            }
            this.loadData();
        }

        updateSortIcons() {
            document.querySelectorAll('.sort-icon-key, .sort-icon-date, .sort-icon-owner').forEach(icon => {
                icon.className = 'fas fa-sort';
            });

            const iconClass = this.sortDirection === 'asc' ? 'fa-sort-up' : 'fa-sort-down';
            const currentIcon = document.querySelector(`.sort-icon-${this.sortBy}`);
            if (currentIcon) {
                currentIcon.className = `fas ${iconClass}`;
            }
        }

        bindPaginationEvents() {
            document.querySelectorAll('.pagination-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.preventDefault();
                    const page = parseInt(btn.getAttribute('data-page'));
                    if (page !== this.currentPage) {
                        this.currentPage = page;
                        this.loadData();
                    }
                });
            });
        }

        renderPagination(result) {
            // Pagination is server-rendered, just update current page display
            const pageInfo = document.querySelector('.text-muted');
            if (pageInfo) {
                const start = (this.currentPage - 1) * this.pageSize + 1;
                const end = Math.min(this.currentPage * this.pageSize, this.totalCount);
                pageInfo.textContent = `Showing ${start} to ${end} of ${this.totalCount} entries`;
            }
        }

        updateUI() {
            document.getElementById('totalCountInfo').textContent = `(${this.totalCount} total)`;
            this.updateSearchUI();
        }

        escapeHtml(unsafe) {
            return unsafe
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }

        showSuccess(message) {
            this.showAlert(message, 'success');
        }

        showError(message) {
            this.showAlert(message, 'danger');
        }

        showAlert(message, type) {
            const alertContainer = document.getElementById('alertContainer');
            const alertHtml = `
            <div class="alert alert-${type} alert-dismissible fade show">
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        `;
            alertContainer.insertAdjacentHTML('beforeend', alertHtml);

            setTimeout(() => {
                const alerts = alertContainer.querySelectorAll('.alert');
                if (alerts.length > 3) {
                    alerts[0].remove();
                }
            }, 100);
        }
    }

    let valuesManager;
    document.addEventListener('DOMContentLoaded', function() {
        console.log('🎉 DOM loaded, initializing ValuesManager...');
        valuesManager = new ValuesManager();
    });
</script>

<style>
    .fs-6 {
        font-size: 0.875rem;
    }

    .fs-7 {
        font-size: 0.875rem;
    }

    .badge {
        font-size: 0.875em;
    }

    .gap-1 {
        gap: 0.25rem;
    }

    .gap-2 {
        gap: 0.5rem;
    }

    .sort-btn {
        text-decoration: none;
        color: #6c757d;
    }

    .sort-btn:hover {
        color: #495057;
    }

    .table th {
        vertical-align: middle;
        white-space: nowrap;
    }

    .copy-value-btn {
        opacity: 0.6;
        transition: opacity 0.2s;
    }

    .copy-value-btn:hover {
        opacity: 1;
    }

    .alert {
        margin-bottom: 1rem;
    }

    .pagination .page-link {
        padding: 0.375rem 0.75rem;
    }

    .pagination .page-item.active .page-link {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }
</style>
