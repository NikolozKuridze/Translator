@model IEnumerable<Translator.Application.Features.Category.Queries.GetRootCategories.RootCategoryDto>
@{
    ViewData["Title"] = "Categories Management";
    Layout = "_Layout";
    var categoryTypes = ViewBag.CategoryTypes as List<string> ?? new List<string>();
}

<style>
    /* Keep all your existing styles */
    body {
        background-color: #f8fafc;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .categories-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 2rem 0;
        margin-bottom: 2rem;
        border-radius: 0.5rem;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.12);
    }

    .categories-header h1 {
        font-weight: 700;
        font-size: 2.25rem;
        margin-bottom: 0.5rem;
    }

    .categories-header .lead {
        font-size: 1.125rem;
        opacity: 0.9;
    }

    /* Form Overlays */
    .form-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        backdrop-filter: blur(4px);
        z-index: 1000;
        display: none;
        align-items: center;
        justify-content: center;
        padding: 1rem;
        opacity: 0;
        transition: all 0.3s ease;
    }

    .form-overlay.show {
        display: flex;
        opacity: 1;
    }

    .form-container {
        background: white;
        border-radius: 0.5rem;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
        width: 100%;
        max-width: 500px;
        max-height: 90vh;
        overflow-y: auto;
        transform: translateY(-20px);
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .form-overlay.show .form-container {
        transform: translateY(0);
    }

    .form-header {
        background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
        color: white;
        padding: 1.25rem 1.5rem;
        border-radius: 0.5rem 0.5rem 0 0;
    }

    .form-header h5 {
        margin: 0;
        font-size: 1.25rem;
        font-weight: 600;
    }

    .form-body {
        padding: 1.5rem;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-label {
        display: block;
        font-weight: 600;
        color: #374151;
        margin-bottom: 0.5rem;
        font-size: 0.875rem;
        text-transform: uppercase;
        letter-spacing: 0.025em;
    }

    .required {
        color: #ef4444;
        font-weight: 700;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem;
        border: 2px solid #e2e8f0;
        border-radius: 0.375rem;
        font-size: 0.875rem;
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        background: #fafbfc;
    }

    .form-control:focus {
        outline: none;
        border-color: #4f46e5;
        background: white;
        box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
    }

    /* Compact Type list styles */
    .type-list-item {
        display: inline-flex;
        align-items: center;
        gap: 0.375rem;
        padding: 0.25rem 0.5rem;
        margin: 0.125rem 0.25rem 0.125rem 0;
        background: linear-gradient(135deg, #e0f2fe 0%, #b3e5fc 100%);
        border: 1px solid #0284c7;
        border-radius: 1rem;
        font-size: 0.75rem;
        font-weight: 500;
        color: #0369a1;
        transition: all 0.2s ease;
    }

    .type-list-item:hover {
        background: linear-gradient(135deg, #b3e5fc 0%, #81d4fa 100%);
        border-color: #0369a1;
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(3, 105, 161, 0.15);
    }

    .type-list-text {
        line-height: 1;
        color: #0369a1;
        font-weight: 500;
    }

    .type-remove-btn {
        background: #ef4444;
        color: white;
        border: none;
        width: 16px;
        height: 16px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.2s ease;
        font-size: 0.625rem;
        flex-shrink: 0;
    }

    .type-remove-btn:hover {
        background: #dc2626;
        transform: scale(1.2);
    }

    #typesContainer {
        background-color: #f8fafc;
        border: 1px solid #e2e8f0;
        border-radius: 0.375rem;
        padding: 0.5rem;
        max-height: 120px;
        overflow-y: auto;
        display: flex;
        flex-wrap: wrap;
        align-items: flex-start;
        min-height: 2rem;
    }

    #typesContainer:empty::before {
        content: 'No types added yet...';
        color: #94a3b8;
        font-size: 0.75rem;
        font-style: italic;
    }

    .input-group .btn-outline-success {
        border-color: #10b981;
        color: #10b981;
    }

    .input-group .btn-outline-success:hover {
        background-color: #10b981;
        border-color: #10b981;
        color: white;
    }

    /* Buttons */
    .btn-base {
        padding: 0.75rem 1.5rem;
        border-radius: 0.375rem;
        font-weight: 600;
        font-size: 0.875rem;
        border: none;
        cursor: pointer;
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        text-decoration: none;
        text-align: center;
        justify-content: center;
        min-width: 100px;
    }

    .btn-cancel {
        background: #f1f5f9;
        color: #64748b;
        border: 2px solid #e2e8f0;
    }

    .btn-cancel:hover {
        background: #e2e8f0;
        color: #475569;
        transform: translateY(-1px);
    }

    .btn-save, .btn-create, .btn-update {
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        color: white;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
    }

    .btn-save:hover, .btn-create:hover, .btn-update:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.12);
    }

    .section-card {
        background: white;
        border-radius: 0.5rem;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
        overflow: hidden;
        margin-bottom: 2rem;
        border: 1px solid #f1f5f9;
    }

    .section-header {
        background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
        color: white;
        padding: 1.25rem 1.5rem;
        font-weight: 600;
        font-size: 1.125rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .section-header h3 {
        margin: 0;
        font-size: 1.125rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .section-controls {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
    }

    /* Add/Delete Buttons */
    .add-btn, .delete-btn {
        padding: 0.5rem 1rem;
        border-radius: 0.375rem;
        color: white;
        font-weight: 600;
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        font-size: 0.875rem;
        text-decoration: none;
        cursor: pointer;
        display: inline-flex;
        align-items: center;
        gap: 0.375rem;
        border: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
    }

    .add-btn {
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
    }

    .delete-btn {
        background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
    }

    .add-btn:hover, .delete-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.12);
        color: white;
        text-decoration: none;
    }

    .delete-btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
        pointer-events: none;
        transform: none;
    }

    /* Show All Button */
    .show-all-btn {
        background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 0.375rem;
        font-weight: 600;
        font-size: 0.875rem;
        cursor: pointer;
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        display: inline-flex;
        align-items: center;
        gap: 0.375rem;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
        margin: 1rem 1.5rem;
    }

    .show-all-btn:hover {
        background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.12);
    }

    .show-all-btn:focus {
        outline: 2px solid #4f46e5;
        outline-offset: 2px;
    }

    /* Hide items initially */
    .type-item.hidden,
    .category-row.hidden {
        display: none;
    }

    /* Category Types */
    .types-list {
        display: flex;
        flex-wrap: wrap;
        gap: 0.75rem;
        padding: 1.5rem;
    }

    .type-item {
        background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
        border: 2px solid #e2e8f0;
        padding: 0.625rem 1rem;
        border-radius: 0.375rem;
        font-weight: 500;
        color: #1e293b;
        font-size: 0.875rem;
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        display: flex;
        align-items: center;
        gap: 0.5rem;
        cursor: pointer;
        user-select: none;
    }

    .type-item:hover {
        background: linear-gradient(135deg, #e2e8f0 0%, #cbd5e1 100%);
        border-color: #cbd5e1;
        transform: translateY(-2px);
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
    }

    .type-item.selected {
        border: 2px solid #3b82f6 !important;
        background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%) !important;
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.25);
    }

    /* Selection counter */
    .selection-count {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background: #3b82f6;
        color: white;
        padding: 0.75rem 1rem;
        border-radius: 0.5rem;
        font-weight: 600;
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.25);
        z-index: 1000;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .selection-count button {
        background: none;
        border: none;
        color: white;
        cursor: pointer;
        padding: 0.25rem;
        border-radius: 0.25rem;
        transition: background-color 0.2s ease;
    }

    .selection-count button:hover {
        background: rgba(255, 255, 255, 0.1);
    }

    /* Table Styles */
    .category-table {
        font-size: 0.875rem;
    }

    .category-table .table {
        margin: 0;
    }

    .category-table thead th {
        background: #b3e5fc;
        color: black;
        font-weight: 600;
        text-transform: uppercase;
        font-size: 0.75rem;
        letter-spacing: 0.05em;
        padding: 1rem 0.75rem;
        border: none;
        position: sticky;
        top: 0;
        z-index: 10;
    }

    .category-table tbody tr {
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        border-bottom: 1px solid #f1f5f9;
    }

    .category-table tbody tr:hover {
        background-color: #f8fafc;
        transform: translateY(-1px);
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
    }

    .category-table tbody td {
        padding: 1rem 0.75rem;
        vertical-align: middle;
        border-color: #f1f5f9;
    }

    .category-value {
        font-weight: 600;
        color: #1e293b;
        font-size: 0.875rem;
    }

    .category-type-badge {
        background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
        color: white;
        padding: 0.375rem 0.75rem;
        border-radius: 0.375rem;
        font-weight: 500;
        font-size: 0.75rem;
        text-transform: capitalize;
        display: inline-block;
    }

    .category-order-badge {
        background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
        color: white;
        padding: 0.375rem 0.75rem;
        border-radius: 0.375rem;
        font-weight: 500;
        font-size: 0.75rem;
        display: inline-block;
    }

    .category-id-container {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        max-width: 300px;
    }

    .category-id {
        font-family: 'Fira Code', 'Monaco', 'Consolas', monospace;
        font-size: 0.75rem;
        color: #64748b;
        background: #f8fafc;
        padding: 0.375rem 0.5rem;
        border-radius: 0.375rem;
        border: 1px solid #e2e8f0;
        flex: 1;
        min-width: 0;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .copy-btn {
        background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
        border: none;
        color: white;
        padding: 0.375rem 0.75rem;
        border-radius: 0.375rem;
        cursor: pointer;
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        font-size: 0.75rem;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.25rem;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
        white-space: nowrap;
    }

    .copy-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.12);
    }

    .copy-btn.copied {
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
    }

    /* Action Buttons */
    .action-buttons {
        display: flex;
        gap: 0.375rem;
        justify-content: center;
        flex-wrap: wrap;
    }

    .action-btn {
        padding: 0.5rem;
        border-radius: 0.375rem;
        border: none;
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        display: inline-flex;
        align-items: center;
        justify-content: center;
        width: 40px;
        height: 40px;
        font-size: 0.875rem;
        text-decoration: none;
        cursor: pointer;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
    }

    .action-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.12);
        text-decoration: none;
    }

    .btn-edit {
        background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
        color: white;
    }

    .btn-tree {
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        color: white;
    }

    .btn-delete {
        background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        color: white;
    }

    .btn-edit:hover, .btn-tree:hover, .btn-delete:hover {
        color: white;
    }

    /* Empty State */
    .empty-state {
        text-align: center;
        padding: 3rem 2rem;
        color: #64748b;
    }

    .empty-state-icon {
        font-size: 3rem;
        margin-bottom: 1rem;
        color: #cbd5e1;
    }

    .empty-state h4 {
        font-size: 1.25rem;
        margin-bottom: 0.75rem;
        color: #374151;
    }

    .empty-state p {
        font-size: 0.875rem;
        margin-bottom: 1.5rem;
        max-width: 400px;
        margin-left: auto;
        margin-right: auto;
    }

    /* Modal Styles */
    .modal {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.6);
        backdrop-filter: blur(4px);
        z-index: 2000;
        display: none;
        align-items: center;
        justify-content: center;
        padding: 1rem;
        opacity: 0;
        transition: all 0.3s ease;
    }

    .modal.show {
        display: flex;
        opacity: 1;
    }

    .modal-content {
        background: white;
        border-radius: 0.5rem;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
        width: 100%;
        max-width: 450px;
        max-height: 90vh;
        overflow-y: auto;
        transform: scale(0.9);
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .modal.show .modal-content {
        transform: scale(1);
    }

    .modal-header {
        background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        color: white;
        padding: 1.25rem 1.5rem;
        border-radius: 0.5rem 0.5rem 0 0;
    }

    .modal-header h4 {
        margin: 0;
        font-size: 1.125rem;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    /* Alerts */
    .alert {
        border: none;
        border-radius: 0.5rem;
        padding: 1rem 1.25rem;
        margin-bottom: 1.5rem;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
        border-left: 4px solid;
    }

    .form-actions, .modal-actions {
        display: flex;
        gap: 0.75rem;
        justify-content: center;
        padding: 1.5rem;
        border-top: 1px solid #e2e8f0;
        background: #f8fafc;
    }

    .form-actions .btn-base,
    .modal-actions .btn-base {
        min-width: 140px;
    }

    .alert-success {
        background: linear-gradient(135deg, #ecfdf5 0%, #d1fae5 100%);
        color: #065f46;
        border-left-color: #10b981;
    }

    .alert-danger {
        background: linear-gradient(135deg, #fef2f2 0%, #fecaca 100%);
        color: #991b1b;
        border-left-color: #ef4444;
    }

    .alert-warning {
        background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
        color: #92400e;
        border-left-color: #f59e0b;
    }

    .btn-close {
        background: none;
        border: none;
        font-size: 1.2rem;
        cursor: pointer;
        color: inherit;
        opacity: 0.7;
        transition: opacity 0.2s ease;
    }

    .btn-close:hover {
        opacity: 1;
    }

    /* Loading states */
    .loading {
        pointer-events: none;
        opacity: 0.7;
    }

    .loading::after {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: 20px;
        height: 20px;
        margin: -10px 0 0 -10px;
        border: 2px solid #f3f3f3;
        border-top: 2px solid #4f46e5;
        border-radius: 50%;
    }

    .modal-body {
        padding: 1.5rem;
        text-align: center;
    }

    .modal-body p {
        font-size: 1rem;
        color: #374151;
        margin: 0;
        line-height: 1.6;
    }

    .btn-delete-confirm {
        background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        color: white;
        box-shadow: 0 2px 6px rgba(239, 68, 68, 0.25);
    }

    .btn-delete-confirm:hover {
        background: linear-gradient(135deg, #dc2626 0%, #b91c1c 100%);
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(239, 68, 68, 0.35);
    }

    /* Focus styles for accessibility */
    .btn-base:focus,
    .action-btn:focus,
    .copy-btn:focus {
        outline: 2px solid #4f46e5;
        outline-offset: 2px;
    }

    /* Smooth scrolling */
    html {
        scroll-behavior: smooth;
    }
</style>

<div class="container-fluid px-3">
    <!-- Header Section -->
    <div class="categories-header text-center">
        <div class="container">
            <h1 class="display-4 fw-bold mb-2">
                <i class="fas fa-layer-group me-2"></i>
                Categories Management
            </h1>
            <p class="lead mb-0">Manage your content categories and types</p>
        </div>
    </div>

    <!-- Alert container -->
    <div id="alertContainer">
        @if (ViewBag.ErrorMessage != null)
        {
            <div class="alert alert-danger rounded-3 shadow-sm mb-3" role="alert">
                <i class="fas fa-exclamation-circle me-2"></i>
                @ViewBag.ErrorMessage
            </div>
        }

        @if (ViewBag.SuccessMessage != null)
        {
            <div class="alert alert-success rounded-3 shadow-sm mb-3" role="alert">
                <i class="fas fa-check-circle me-2"></i>
                @ViewBag.SuccessMessage
            </div>
        }
    </div>

    <!-- Category Type Form Overlay -->
    <div class="form-overlay" id="typeForm">
        <div class="form-container">
            <div class="form-header">
                <h5><i class="fas fa-tags me-2"></i>Add Category Type(s)</h5>
            </div>
            <form id="categoryTypeForm">
                <div class="form-body">
                    <div class="form-group">
                        <label class="form-label">
                            Type Name <span class="required">*</span>
                        </label>
                        <div class="input-group mb-2">
                            <input type="text"
                                   class="form-control"
                                   id="typeNameInput"
                                   placeholder="Enter category type name"
                                   maxlength="100">
                            <button type="button"
                                    id="addMoreBtn"
                                    class="btn btn-outline-success"
                                    onclick="addTypeToList()"
                                    style="display: none;"
                                    title="Add to list">
                                <i class="fas fa-plus"></i> Add More
                            </button>
                        </div>

                        <!-- List of added types -->
                        <div id="typesList" style="display: none;">
                            <label class="form-label mb-2" style="font-size: 0.875rem; color: #64748b;">
                                <i class="fas fa-list me-1"></i>Types to Create:
                            </label>
                            <div id="typesContainer">
                                <!-- Types will be added here dynamically as compact chips -->
                            </div>
                        </div>
                    </div>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn-base btn-cancel" onclick="toggleTypeForm()">
                        <i class="fas fa-times me-1"></i>Cancel
                    </button>
                    <button type="submit" class="btn-base btn-save" id="submitBtn" disabled>
                        <i class="fas fa-save me-1"></i><span id="submitButtonText">Create Type</span>
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Create Category Form Overlay -->
    <div class="form-overlay" id="createForm">
        <div class="form-container">
            <div class="form-header">
                <h5><i class="fas fa-plus me-2"></i>Create New Category</h5>
            </div>
            <form id="createCategoryForm">
                <div class="form-body">
                    <div class="form-group">
                        <label for="value" class="form-label">
                            Value <span class="required">*</span>
                        </label>
                        <input type="text"
                               class="form-control"
                               id="value"
                               name="value"
                               required
                               placeholder="Enter category value">
                    </div>

                    <div class="form-group">
                        <label for="type" class="form-label">
                            Type <span class="required">*</span>
                        </label>
                        <select class="form-control" id="type" name="type" required>
                            <option value="">Select a type</option>
                            <!-- Options will be populated dynamically -->
                        </select>
                    </div>

                    <div class="form-group">
                        <label for="order" class="form-label">Order</label>
                        <input type="number"
                               class="form-control"
                               id="order"
                               name="order"
                               min="0"
                               placeholder="Display order">
                    </div>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn-base btn-cancel" onclick="toggleCreateForm()">
                        <i class="fas fa-times me-1"></i>Cancel
                    </button>
                    <button type="submit" class="btn-base btn-create">
                        <i class="fas fa-save me-1"></i>Create Category
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Edit Category Form Overlay -->
    <div class="form-overlay" id="editForm">
        <div class="form-container">
            <div class="form-header">
                <h5><i class="fas fa-edit me-2"></i>Update Category</h5>
            </div>
            <form id="editCategoryForm">
                <input type="hidden" id="editId" name="id"/>
                <div class="form-body">
                    <div class="form-row">
                        <div class="form-group">
                            <label for="editValue" class="form-label">Value</label>
                            <input type="text"
                                   class="form-control"
                                   id="editValue"
                                   name="value"
                                   placeholder="Enter category value">
                        </div>
                        <div class="form-group">
                            <label for="editOrder" class="form-label">Order</label>
                            <input type="number"
                                   class="form-control"
                                   id="editOrder"
                                   name="order"
                                   min="0"
                                   placeholder="Display order">
                        </div>
                    </div>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn-base btn-cancel" onclick="toggleEditForm()">
                        <i class="fas fa-times me-1"></i>Cancel
                    </button>
                    <button type="submit" class="btn-base btn-update">
                        <i class="fas fa-save me-1"></i>Update Category
                    </button>
                </div>
            </form>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <!-- Category Types Section -->
            <div class="section-card">
                <div class="section-header">
                    <h3>
                        <i class="fas fa-tags me-2"></i>
                        Category Types
                    </h3>
                    <div class="section-controls">
                        <button type="button" class="add-btn" onclick="addCategoryType()">
                            <i class="fas fa-plus"></i>
                            Add Type
                        </button>
                        <button type="button" class="delete-btn" onclick="deleteCategoryType()" disabled>
                            <i class="fas fa-trash"></i>
                            Delete Type
                        </button>
                    </div>
                </div>

                <div id="categoryTypesSection">
                    <!-- Types will be loaded here -->
                </div>
            </div>

            <!-- Root Categories Section -->
            <div class="section-card">
                <div class="section-header">
                    <h3>
                        <i class="fas fa-sitemap me-2"></i>
                        Root Categories
                    </h3>
                    <div class="section-controls">
                        <button type="button" class="add-btn" onclick="openCreateForm()">
                            <i class="fas fa-plus"></i>
                            Add Category
                        </button>
                    </div>
                </div>

                <div id="rootCategoriesSection">
                    <!-- Categories will be loaded here -->
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Type Modal -->
<div class="modal" id="deleteTypeModal">
    <div class="modal-content">
        <div class="modal-header">
            <h4><i class="fas fa-trash me-2"></i>Delete Category Type</h4>
        </div>
        <form id="deleteTypeForm">
            <div class="form-body">
                <div class="form-group">
                    <label class="form-label">
                        Selected Types to Delete:
                    </label>
                    <div id="selectedTypesContainer"
                         style="background: #f8fafc; border: 1px solid #e2e8f0; border-radius: 0.375rem; padding: 0.75rem; max-height: 150px; overflow-y: auto;">
                        <!-- Selected types will be populated here -->
                    </div>
                </div>
            </div>
            <div class="modal-actions">
                <button type="button" class="btn-base btn-cancel" onclick="closeDeleteTypeModal()">
                    <i class="fas fa-times me-1"></i>Cancel
                </button>
                <button type="submit" class="btn-base btn-delete">
                    <i class="fas fa-trash me-1"></i>Delete Types
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Custom Delete Confirmation Modal -->
<div class="modal" id="deleteConfirmModal">
    <div class="modal-content">
        <div class="modal-header">
            <h4><i class="fas fa-exclamation-triangle me-2"></i>Confirm Deletion</h4>
        </div>
        <div class="modal-body">
            <p id="deleteConfirmMessage">Are you sure you want to delete this category?</p>
        </div>
        <div class="modal-actions">
            <button type="button" class="btn-base btn-cancel" onclick="closeDeleteConfirmModal()">
                <i class="fas fa-times me-1"></i>Cancel
            </button>
            <button type="button" class="btn-base btn-delete-confirm" onclick="confirmDelete()">
                <i class="fas fa-trash me-1"></i>Delete
            </button>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    let deleteFormToSubmit = null;
    let categoryToDelete = null;
    let typesList = [];
    let selectedTypes = new Set();
    let categoryTypes = @Html.Raw(Json.Serialize(categoryTypes));
    let categories = @Html.Raw(Json.Serialize(Model));

    let showingAllTypes = false;
    let showingAllCategories = false;

    class CategoriesManager {
        constructor() {
            this.init();
        }

        init() {
            console.log('🚀 Initializing CategoriesManager...');
            this.loadInitialData();
            this.bindEvents();
        }

        loadInitialData() {
            this.renderCategoryTypes(categoryTypes);
            this.renderCategories(categories);
            this.populateTypeSelect(categoryTypes);
        }

        bindEvents() {
            // Category Type Form
            $('#categoryTypeForm').on('submit', (e) => this.handleCreateTypes(e));
            $('#typeNameInput').on('input', () => this.updateTypeForm());
            $('#typeNameInput').on('keydown', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    if ($('#typeNameInput').val().trim()) {
                        this.addTypeToList();
                    }
                }
            });

            // Create Category Form
            $('#createCategoryForm').on('submit', (e) => this.handleCreateCategory(e));

            // Edit Category Form
            $('#editCategoryForm').on('submit', (e) => this.handleUpdateCategory(e));

            // Delete Type Form
            $('#deleteTypeForm').on('submit', (e) => this.handleDeleteTypes(e));

            // Close overlays when clicking outside
            $('.form-overlay, .modal').on('click', (e) => {
                if (e.target === e.currentTarget) {
                    $(e.currentTarget).removeClass('show');
                }
            });

            // Escape key to close modals
            $(document).on('keydown', (e) => {
                if (e.key === 'Escape') {
                    if (selectedTypes.size > 0) {
                        this.clearAllSelections();
                    } else {
                        this.closeAllForms();
                    }
                }
            });
        }

        async loadData() {
            try {
                const response = await $.ajax({
                    url: '/Categories/',
                    method: 'GET',
                    headers: {'X-Requested-With': 'XMLHttpRequest'}
                });

                if (response.success) {
                    categoryTypes = response.categoryTypes;
                    categories = response.categories;
                    this.renderCategoryTypes(categoryTypes);
                    this.renderCategories(categories);
                    this.populateTypeSelect(categoryTypes);
                } else {
                    this.showError(response.message || 'Failed to load data');
                }
            } catch (error) {
                console.error('Error loading data:', error);
                this.showError('Network error: ' + error.message);
            }
        }

        renderCategoryTypes(types) {
            const container = $('#categoryTypesSection');

            if (!types || types.length === 0) {
                container.html(`
                    <div class="empty-state">
                        <div class="empty-state-icon">
                            <i class="fas fa-tags"></i>
                        </div>
                        <h4>No Category Types Found</h4>
                        <p>Start by creating your first category type.</p>
                        <button type="button" class="add-btn" onclick="categoriesManager.addCategoryType()">
                            <i class="fas fa-plus me-1"></i>Create First Type
                        </button>
                    </div>
                `);
                return;
            }

            const sortedTypes = types.sort();
            let html = '<div class="types-list" id="categoryTypesList">';

            sortedTypes.forEach((type, index) => {
                html += `
                    <div class="type-item ${index >= 10 ? 'hidden' : ''}" data-index="${index}" data-type="${type.toLowerCase()}">
                        <i class="fas fa-tag me-1"></i>
                        ${type}
                    </div>
                `;
            });

            html += '</div>';

            if (types.length > 10) {
                html += `
                    <button type="button" class="show-all-btn" id="showAllTypesBtn" onclick="categoriesManager.toggleShowAllTypes()">
                        <i class="fas fa-eye me-1"></i>
                        Show All (${types.length})
                    </button>
                `;
            }

            container.html(html);
            this.initializeCategoryTypeSelection();
        }

        renderCategories(categories) {
            const container = $('#rootCategoriesSection');

            if (!categories || categories.length === 0) {
                container.html(`
                    <div class="empty-state">
                        <div class="empty-state-icon">
                            <i class="fas fa-folder-open"></i>
                        </div>
                        <h4>No Categories Found</h4>
                        <p>Start by creating your first category.</p>
                        <button type="button" class="add-btn" onclick="categoriesManager.openCreateForm()">
                            <i class="fas fa-plus me-1"></i>Create First Category
                        </button>
                    </div>
                `);
                return;
            }

            const sortedCategories = categories.sort((a, b) => (a.order || Number.MAX_VALUE) - (b.order || Number.MAX_VALUE));

            let html = `
                <div class="category-table">
                    <table class="table table-hover mb-0 table-sm" id="categoriesTable">
                        <thead>
                            <tr>
                                <th style="width: 8%;">Order</th>
                                <th style="width: 22%;">Value</th>
                                <th style="width: 12%;">Type</th>
                                <th style="width: 33%;">ID</th>
                                <th style="width: 25%;" class="text-center">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
            `;

            sortedCategories.forEach((category, index) => {
                html += `
                    <tr class="category-row ${index >= 10 ? 'hidden' : ''}" data-index="${index}">
                        <td>
                            ${category.order != null
                    ? `<span class="category-order-badge">${category.order}</span>`
                    : '<span class="text-muted">—</span>'
                }
                        </td>
                        <td>
                            <div class="category-value">${this.escapeHtml(category.value)}</div>
                        </td>
                        <td>
                            <span class="category-type-badge">${this.escapeHtml(category.typeName)}</span>
                        </td>
                        <td>
                            <div class="category-id-container">
                                <code class="category-id">${category.id}</code>
                                <button type="button"
                                        class="copy-btn"
                                        onclick="categoriesManager.copyToClipboard('${category.id}', this)"
                                        title="Copy ID">
                                    <i class="fas fa-copy"></i>
                                    <span class="copy-text d-none d-md-inline">Copy</span>
                                </button>
                            </div>
                        </td>
                        <td>
                            <div class="action-buttons">
                                <button type="button"
                                        class="action-btn btn-edit"
                                        onclick="categoriesManager.showEditForm('${category.id}', '${this.escapeHtml(category.value)}', ${category.order || 'null'})"
                                        title="Update Category">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <a href="/Categories/Tree/${category.id}"
                                   class="action-btn btn-tree"
                                   title="Show Tree">
                                    <i class="fas fa-sitemap"></i>
                                </a>
                                <button type="button"
                                        class="action-btn btn-delete"
                                        onclick="categoriesManager.showDeleteConfirmation('${category.id}', '${this.escapeHtml(category.value)}')"
                                        title="Delete ${this.escapeHtml(category.value)}">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                `;
            });

            html += '</tbody></table></div>';

            if (categories.length > 10) {
                html += `
                    <button type="button" class="show-all-btn" id="showAllCategoriesBtn" onclick="categoriesManager.toggleShowAllCategories()">
                        <i class="fas fa-eye me-1"></i>
                        Show All (${categories.length})
                    </button>
                `;
            }

            container.html(html);
        }

        populateTypeSelect(types) {
            const select = $('#type');
            select.html('<option value="">Select a type</option>');
            types.forEach(type => {
                select.append(`<option value="${this.escapeHtml(type)}">${this.escapeHtml(type)}</option>`);
            });
        }

        initializeCategoryTypeSelection() {
            $('.type-item').off('click').on('click', (e) => {
                this.toggleTypeSelection(e.currentTarget);
            });
            this.updateDeleteButtonState();
        }

        toggleTypeSelection(typeElement) {
            const typeName = $(typeElement).data('type') || $(typeElement).text().trim();

            if (selectedTypes.has(typeName)) {
                selectedTypes.delete(typeName);
                $(typeElement).removeClass('selected');
            } else {
                selectedTypes.add(typeName);
                $(typeElement).addClass('selected');
            }

            this.updateDeleteButtonState();
            this.showSelectionCount();
        }

        clearAllSelections() {
            selectedTypes.clear();
            $('.type-item').removeClass('selected');
            this.updateDeleteButtonState();
            this.hideSelectionCount();
        }

        updateDeleteButtonState() {
            const deleteBtn = $('.delete-btn');

            if (selectedTypes.size === 0) {
                deleteBtn.prop('disabled', true);
                deleteBtn.css({
                    'opacity': '0.5',
                    'cursor': 'not-allowed',
                    'pointer-events': 'none'
                });
            } else {
                deleteBtn.prop('disabled', false);
                deleteBtn.css({
                    'opacity': '1',
                    'cursor': 'pointer',
                    'pointer-events': 'auto'
                });
            }
        }

        showSelectionCount() {
            this.hideSelectionCount();
            if (selectedTypes.size > 0) {
                const countDiv = $(`
                    <div class="selection-count">
                        <i class="fas fa-check-circle me-2"></i>
                        ${selectedTypes.size} type${selectedTypes.size > 1 ? 's' : ''} selected
                        <button onclick="categoriesManager.clearAllSelections()" title="Clear selection">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                `);
                $('body').append(countDiv);
            }
        }

        hideSelectionCount() {
            $('.selection-count').remove();
        }

        toggleShowAllTypes() {
            const button = $('#showAllTypesBtn');
            const hiddenTypes = $('#categoryTypesList .type-item.hidden');

            showingAllTypes = !showingAllTypes;

            if (showingAllTypes) {
                hiddenTypes.removeClass('hidden');
                button.html('<i class="fas fa-eye-slash me-1"></i>Show Less');
            } else {
                $('#categoryTypesList .type-item').each((index, item) => {
                    if (index >= 10) {
                        $(item).addClass('hidden');
                    }
                });
                const totalCount = $('#categoryTypesList .type-item').length;
                button.html(`<i class="fas fa-eye me-1"></i>Show All (${totalCount})`);
            }
        }

        toggleShowAllCategories() {
            const button = $('#showAllCategoriesBtn');
            const hiddenRows = $('#categoriesTable .category-row.hidden');

            showingAllCategories = !showingAllCategories;

            if (showingAllCategories) {
                hiddenRows.removeClass('hidden');
                button.html('<i class="fas fa-eye-slash me-1"></i>Show Less');
            } else {
                $('#categoriesTable .category-row').each((index, row) => {
                    if (index >= 10) {
                        $(row).addClass('hidden');
                    }
                });
                const totalCount = $('#categoriesTable .category-row').length;
                button.html(`<i class="fas fa-eye me-1"></i>Show All (${totalCount})`);
            }
        }

        // Form handling methods
        addCategoryType() {
            this.closeAllForms();
            this.resetTypeForm();
            $('#typeForm').addClass('show');
            setTimeout(() => $('#typeNameInput').focus(), 300);
        }

        resetTypeForm() {
            $('#typeNameInput').val('');
            typesList = [];
            this.updateTypesDisplay();
            this.updateAddMoreButton();
            this.updateSubmitButton();
        }

        addTypeToList() {
            const input = $('#typeNameInput');
            const typeName = input.val().trim();

            if (typeName && !typesList.includes(typeName.toLowerCase())) {
                typesList.push(typeName.toLowerCase());
                input.val('');
                this.updateTypesDisplay();
                this.updateAddMoreButton();
                this.updateSubmitButton();
                input.focus();
            } else if (typesList.includes(typeName.toLowerCase())) {
                this.showError('This type already exists in the list!');
                input.select();
            }
        }

        removeTypeFromList(typeName) {
            typesList = typesList.filter(type => type !== typeName);
            this.updateTypesDisplay();
            this.updateSubmitButton();
            $('#typeNameInput').focus();
        }

        updateTypesDisplay() {
            const typesList_div = $('#typesList');
            const typesContainer = $('#typesContainer');

            if (typesList.length === 0) {
                typesList_div.hide();
                typesContainer.html('');
            } else {
                typesList_div.show();
                typesContainer.html(typesList.map(type => `
                    <span class="type-list-item">
                        <span class="type-list-text">${this.escapeHtml(type)}</span>
                        <button type="button" 
                                class="type-remove-btn" 
                                onclick="categoriesManager.removeTypeFromList('${type}')"
                                title="Remove ${type}">
                            <i class="fas fa-times"></i>
                        </button>
                    </span>
                `).join(''));
            }
        }

        updateAddMoreButton() {
            const input = $('#typeNameInput');
            const addMoreBtn = $('#addMoreBtn');

            if (input.val().trim()) {
                addMoreBtn.show();
            } else {
                addMoreBtn.hide();
            }
        }

        updateSubmitButton() {
            const submitBtn = $('#submitBtn');
            const submitText = $('#submitButtonText');
            const input = $('#typeNameInput');
            const hasInputValue = input.val().trim();
            const hasListItems = typesList.length > 0;

            submitBtn.prop('disabled', !hasInputValue && !hasListItems);

            const totalCount = typesList.length + (hasInputValue ? 1 : 0);
            submitText.text(totalCount > 1 ? 'Create Types' : 'Create Type');
        }

        updateTypeForm() {
            this.updateAddMoreButton();
            this.updateSubmitButton();
        }

        toggleTypeForm() {
            $('#typeForm').removeClass('show');
        }

        openCreateForm() {
            this.closeAllForms();
            $('#createForm').addClass('show');
            setTimeout(() => $('#value').focus(), 300);
        }

        toggleCreateForm() {
            $('#createForm').removeClass('show');
        }

        showEditForm(id, value, order) {
            this.closeAllForms();

            $('#editId').val(id);
            $('#editValue').val(value);
            $('#editOrder').val(order === null ? '' : order);

            $('#editForm').addClass('show');
            setTimeout(() => $('#editValue').focus(), 300);
        }

        toggleEditForm() {
            $('#editForm').removeClass('show');
        }

        showDeleteConfirmation(categoryId, categoryValue) {
            categoryToDelete = categoryId;
            $('#deleteConfirmMessage').text(`Are you sure you want to delete the category "${categoryValue}"?`);
            $('#deleteConfirmModal').addClass('show');
        }

        closeDeleteConfirmModal() {
            $('#deleteConfirmModal').removeClass('show');
            categoryToDelete = null;
        }

        confirmDelete() {
            if (categoryToDelete) {
                this.deleteCategory(categoryToDelete);
            }
            this.closeDeleteConfirmModal();
        }

        deleteCategoryType() {
            if (selectedTypes.size === 0) {
                this.showError('Please select at least one category type to delete.');
                return;
            }

            this.closeAllForms();
            this.updateDeleteModal();
            $('#deleteTypeModal').addClass('show');
        }

        updateDeleteModal() {
            const container = $('#selectedTypesContainer');
            const selectedArray = Array.from(selectedTypes);

            if (selectedArray.length === 0) return;

            container.html(selectedArray.map(type => `
                <div style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.5rem;">
                    <i class="fas fa-tag" style="color: #3b82f6;"></i>
                    <span style="font-weight: 500;">${this.escapeHtml(type)}</span>
                </div>
            `).join(''));

            const isMultiple = selectedArray.length > 1;
            const modalHeader = $('#deleteTypeModal .modal-header h4');
            const deleteButton = $('#deleteTypeModal .btn-delete');

            modalHeader.html(`<i class="fas fa-trash me-2"></i>${isMultiple ? 'Delete Category Types' : 'Delete Category Type'}`);
            deleteButton.html(`<i class="fas fa-trash me-1"></i>${isMultiple ? 'Delete Types' : 'Delete Type'}`);
        }

        closeDeleteTypeModal() {
            $('#deleteTypeModal').removeClass('show');
        }

        closeAllForms() {
            $('.form-overlay, .modal').removeClass('show');
        }

        // AJAX form handlers
        async handleCreateTypes(e) {
            e.preventDefault();

            const input = $('#typeNameInput');
            const currentInput = input.val().trim();

            let allTypeNames = [...typesList];
            if (currentInput && !allTypeNames.includes(currentInput.toLowerCase())) {
                allTypeNames.push(currentInput.toLowerCase());
            }

            if (allTypeNames.length === 0) {
                this.showError('Please enter at least one category type name.');
                return;
            }

            const submitBtn = $('#submitBtn');
            const originalText = submitBtn.html();
            submitBtn.prop('disabled', true);
            submitBtn.html('<i class="fas fa-spinner fa-spin me-1"></i>Creating...');

            try {
                let response;
                if (allTypeNames.length === 1) {
                    response = await $.ajax({
                        url: '/Categories/CreateCategoryType',
                        method: 'POST',
                        data: {typeName: allTypeNames[0]},
                        headers: {'X-Requested-With': 'XMLHttpRequest'}
                    });
                } else {
                    response = await $.ajax({
                        url: '/Categories/CreateBulkCategoryType',
                        method: 'POST',
                        data: {typeNames: allTypeNames},
                        headers: {'X-Requested-With': 'XMLHttpRequest'}
                    });
                }

                if (response.success) {
                    if (response.warning) {
                        this.showSuccess(response.message);
                        this.showWarning(response.warning);
                    } else {
                        this.showSuccess(response.message);
                    }

                    // Update data
                    categoryTypes = response.categoryTypes;
                    categories = response.categories || categories;

                    // Re-render
                    this.renderCategoryTypes(categoryTypes);
                    this.renderCategories(categories);
                    this.populateTypeSelect(categoryTypes);

                    this.toggleTypeForm();
                } else {
                    if (response.existingTypes && response.existingTypes.length > 0) {
                        const existingTypesText = response.existingTypes.join(', ');
                        this.showError(`${response.error}\n\nExisting types: ${existingTypesText}`);
                    } else {
                        this.showError(response.error);
                    }
                }
            } catch (error) {
                console.error('Error:', error);
                this.showError('An error occurred while creating category types.');
            } finally {
                submitBtn.prop('disabled', false);
                submitBtn.html(originalText);
            }
        }

        async handleCreateCategory(e) {
            e.preventDefault();

            const formData = {
                value: $('#value').val(),
                type: $('#type').val(),
                order: $('#order').val() || null
            };

            if (!formData.value || !formData.type) {
                this.showError('Value and Type are required.');
                return;
            }

            const submitBtn = $('#createCategoryForm button[type="submit"]');
            const originalText = submitBtn.html();
            submitBtn.prop('disabled', true);
            submitBtn.html('<i class="fas fa-spinner fa-spin me-1"></i>Creating...');

            try {
                const response = await $.ajax({
                    url: '/Categories/Create',
                    method: 'POST',
                    data: formData,
                    headers: {'X-Requested-With': 'XMLHttpRequest'}
                });

                if (response.success) {
                    this.showSuccess(response.message);

                    // Update data
                    categories = response.categories;
                    categoryTypes = response.categoryTypes || categoryTypes;

                    // Re-render
                    this.renderCategories(categories);
                    this.populateTypeSelect(categoryTypes);

                    // Reset and close form
                    $('#createCategoryForm')[0].reset();
                    this.toggleCreateForm();
                } else {
                    this.showError(response.message);
                }
            } catch (error) {
                console.error('Error:', error);
                this.showError('An error occurred while creating the category.');
            } finally {
                submitBtn.prop('disabled', false);
                submitBtn.html(originalText);
            }
        }

        async handleUpdateCategory(e) {
            e.preventDefault();

            const formData = {
                id: $('#editId').val(),
                value: $('#editValue').val() || null,
                order: $('#editOrder').val() || null
            };

            const submitBtn = $('#editCategoryForm button[type="submit"]');
            const originalText = submitBtn.html();
            submitBtn.prop('disabled', true);
            submitBtn.html('<i class="fas fa-spinner fa-spin me-1"></i>Updating...');

            try {
                const response = await $.ajax({
                    url: '/Categories/Update',
                    method: 'POST',
                    data: formData,
                    headers: {'X-Requested-With': 'XMLHttpRequest'}
                });

                if (response.success) {
                    this.showSuccess(response.message);

                    // Update data
                    categories = response.categories;
                    categoryTypes = response.categoryTypes || categoryTypes;

                    // Re-render
                    this.renderCategories(categories);
                    this.populateTypeSelect(categoryTypes);

                    this.toggleEditForm();
                } else {
                    this.showError(response.message);
                }
            } catch (error) {
                console.error('Error:', error);
                this.showError('An error occurred while updating the category.');
            } finally {
                submitBtn.prop('disabled', false);
                submitBtn.html(originalText);
            }
        }

        async deleteCategory(categoryId) {
            try {
                const response = await $.ajax({
                    url: '/Categories/Delete',
                    method: 'POST',
                    data: {id: categoryId},
                    headers: {'X-Requested-With': 'XMLHttpRequest'}
                });

                if (response.success) {
                    this.showSuccess(response.message);

                    // Update data
                    categories = response.categories;
                    categoryTypes = response.categoryTypes || categoryTypes;

                    // Re-render
                    this.renderCategories(categories);
                    this.populateTypeSelect(categoryTypes);
                } else {
                    this.showError(response.message);
                }
            } catch (error) {
                console.error('Error:', error);
                this.showError('An error occurred while deleting the category.');
            }
        }

        async handleDeleteTypes(e) {
            e.preventDefault();

            const selectedTypeNames = Array.from(selectedTypes);

            if (selectedTypeNames.length === 0) {
                this.showError('No types selected for deletion.');
                return;
            }

            const submitBtn = $('#deleteTypeForm button[type="submit"]');
            const originalText = submitBtn.html();
            submitBtn.prop('disabled', true);
            submitBtn.html('<i class="fas fa-spinner fa-spin me-1"></i>Deleting...');

            try {
                const response = await $.ajax({
                    url: '/Categories/DeleteCategoryTypes',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(selectedTypeNames),
                    headers: {'X-Requested-With': 'XMLHttpRequest'}
                });

                if (response.success) {
                    this.showSuccess(response.message);

                    // Update data
                    categoryTypes = response.categoryTypes;
                    categories = response.categories;

                    // Re-render
                    this.renderCategoryTypes(categoryTypes);
                    this.renderCategories(categories);
                    this.populateTypeSelect(categoryTypes);

                    this.closeDeleteTypeModal();
                    this.clearAllSelections();
                } else {
                    this.showError(response.error);
                }
            } catch (error) {
                console.error('Error:', error);
                this.showError('An error occurred while deleting category types: ' + error.message);
            } finally {
                submitBtn.prop('disabled', false);
                submitBtn.html(originalText);
            }
        }

        // Utility methods
        async copyToClipboard(text, button) {
            try {
                if (navigator.clipboard && window.isSecureContext) {
                    await navigator.clipboard.writeText(text);
                } else {
                    const textArea = document.createElement('textarea');
                    textArea.value = text;
                    textArea.style.position = 'absolute';
                    textArea.style.left = '-9999px';
                    document.body.appendChild(textArea);
                    textArea.select();
                    document.execCommand('copy');
                    document.body.removeChild(textArea);
                }

                const $button = $(button);
                const $icon = $button.find('i');
                const $textSpan = $button.find('.copy-text');

                $button.addClass('copied');
                $icon.removeClass().addClass('fas fa-check');
                if ($textSpan.length) $textSpan.text('Done!');

                setTimeout(() => {
                    $button.removeClass('copied');
                    $icon.removeClass().addClass('fas fa-copy');
                    if ($textSpan.length) $textSpan.text('Copy');
                }, 2000);

            } catch (err) {
                console.error('Failed to copy text: ', err);
                this.showError('Failed to copy to clipboard');
            }
        }

        showSuccess(message) {
            this.showAlert(message, 'success');
        }

        showError(message) {
            this.showAlert(message, 'danger');
        }

        showWarning(message) {
            this.showAlert(message, 'warning');
        }

        showAlert(message, type) {
            const container = $('#alertContainer');
            const alertDiv = $(`
                <div class="alert alert-${type} alert-dismissible fade show">
                    <i class="fas fa-${this.getAlertIcon(type)} me-2"></i>
                    ${this.escapeHtml(message)}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `);

            container.html(''); // Clear existing alerts
            container.append(alertDiv);

            setTimeout(() => {
                alertDiv.fadeOut(() => alertDiv.remove());
            }, 5000);
        }

        getAlertIcon(type) {
            switch (type) {
                case 'success':
                    return 'check-circle';
                case 'warning':
                    return 'exclamation-triangle';
                case 'danger':
                    return 'exclamation-circle';
                default:
                    return 'info-circle';
            }
        }

        escapeHtml(text) {
            if (typeof text !== 'string') return text;
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }
    }

    // Global functions for backward compatibility
    function addCategoryType() {
        categoriesManager.addCategoryType();
    }

    function deleteCategoryType() {
        categoriesManager.deleteCategoryType();
    }

    function toggleShowAllTypes() {
        categoriesManager.toggleShowAllTypes();
    }

    function toggleShowAllCategories() {
        categoriesManager.toggleShowAllCategories();
    }

    function addTypeToList() {
        categoriesManager.addTypeToList();
    }

    function removeTypeFromList(typeName) {
        categoriesManager.removeTypeFromList(typeName);
    }

    function toggleTypeForm() {
        categoriesManager.toggleTypeForm();
    }

    function openCreateForm() {
        categoriesManager.openCreateForm();
    }

    function toggleCreateForm() {
        categoriesManager.toggleCreateForm();
    }

    function showEditForm(id, value, order) {
        categoriesManager.showEditForm(id, value, order);
    }

    function toggleEditForm() {
        categoriesManager.toggleEditForm();
    }

    function showDeleteConfirmation(id, value) {
        categoriesManager.showDeleteConfirmation(id, value);
    }

    function closeDeleteConfirmModal() {
        categoriesManager.closeDeleteConfirmModal();
    }

    function confirmDelete() {
        categoriesManager.confirmDelete();
    }

    function closeDeleteTypeModal() {
        categoriesManager.closeDeleteTypeModal();
    }

    function copyToClipboard(text, button) {
        categoriesManager.copyToClipboard(text, button);
    }

    // Initialize
    let categoriesManager;
    $(document).ready(() => {
        console.log('🎉 DOM loaded, initializing CategoriesManager...');
        categoriesManager = new CategoriesManager();
    });
</script>
