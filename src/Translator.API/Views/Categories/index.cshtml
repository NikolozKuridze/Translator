@model Translator.Domain.Pagination.PaginatedResponse<Translator.Application.Features.Category.Queries.GetRootCategories.Response>
@{
ViewData["Title"] = "Categories Management";
Layout = "_Layout";
var categoryTypes = ViewBag.CategoryTypes as List<string> ?? new List<string>();
}

<style>
    /* Keep all your existing styles */
    body {
        background-color: #f8fafc;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .categories-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 2rem 0;
        margin-bottom: 2rem;
        border-radius: 0.5rem;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.12);
    }

    .categories-header h1 {
        font-weight: 700;
        font-size: 2.25rem;
        margin-bottom: 0.5rem;
    }

    .categories-header .lead {
        font-size: 1.125rem;
        opacity: 0.9;
    }

    /* Search Bar Styles */
    .search-container {
        background: white;
        border-radius: 0.5rem;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
        padding: 1.5rem;
        margin-bottom: 1rem;
        border: 1px solid #f1f5f9;
    }

    .search-input-group {
        position: relative;
        display: flex;
        align-items: center;
    }

    .search-input {
        flex: 1;
        padding: 0.875rem 1rem;
        padding-left: 3rem;
        border: 2px solid #e2e8f0;
        border-radius: 0.5rem;
        font-size: 1rem;
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        background: #fafbfc;
    }

    .search-input:focus {
        outline: none;
        border-color: #4f46e5;
        background: white;
        box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
    }

    .search-icon {
        position: absolute;
        left: 1rem;
        color: #64748b;
        font-size: 1.125rem;
        z-index: 10;
    }

    .search-clear-btn {
        position: absolute;
        right: 0.75rem;
        background: #ef4444;
        color: white;
        border: none;
        width: 24px;
        height: 24px;
        border-radius: 50%;
        display: none;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        font-size: 0.75rem;
        z-index: 10;
        transition: all 0.2s ease;
    }

    .search-clear-btn:hover {
        background: #dc2626;
        transform: scale(1.1);
    }

    .search-clear-btn.show {
        display: flex;
    }

    /* Pagination Styles */
    .pagination-container {
        background: white;
        border-radius: 0.5rem;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
        padding: 1.5rem;
        margin-top: 1rem;
        border: 1px solid #f1f5f9;
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 1rem;
    }

    .pagination-info {
        color: #64748b;
        font-size: 0.875rem;
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .page-size-selector {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .page-size-selector select {
        padding: 0.5rem;
        border: 2px solid #e2e8f0;
        border-radius: 0.375rem;
        font-size: 0.875rem;
        background: white;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .page-size-selector select:focus {
        outline: none;
        border-color: #4f46e5;
        box-shadow: 0 0 0 2px rgba(79, 70, 229, 0.1);
    }

    .pagination-controls {
        display: flex;
        align-items: center;
        gap: 0.25rem;
    }

    .pagination-btn {
        padding: 0.5rem 0.75rem;
        border: 2px solid #e2e8f0;
        background: white;
        color: #64748b;
        border-radius: 0.375rem;
        cursor: pointer;
        transition: all 0.2s ease;
        font-size: 0.875rem;
        min-width: 40px;
        text-align: center;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }

    .pagination-btn:hover:not(.disabled) {
        border-color: #4f46e5;
        color: #4f46e5;
        background: #f8fafc;
        text-decoration: none;
    }

    .pagination-btn.active {
        background: #4f46e5;
        border-color: #4f46e5;
        color: white;
    }

    .pagination-btn.disabled {
        opacity: 0.5;
        cursor: not-allowed;
        pointer-events: none;
    }

    .pagination-ellipsis {
        padding: 0.5rem;
        color: #94a3b8;
        font-size: 0.875rem;
    }

    /* Loading state */
    .loading-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255, 255, 255, 0.8);
        backdrop-filter: blur(2px);
        display: none;
        align-items: center;
        justify-content: center;
        z-index: 100;
        border-radius: 0.5rem;
    }

    .loading-overlay.show {
        display: flex;
    }

    .loading-spinner {
        width: 32px;
        height: 32px;
        border: 3px solid #f3f3f3;
        border-top: 3px solid #4f46e5;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }
    
    .categories-section-wrapper {
        position: relative;
    }

    /* Form Overlays and other existing styles remain the same */
    .form-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        backdrop-filter: blur(4px);
        z-index: 1000;
        display: none;
        align-items: center;
        justify-content: center;
        padding: 1rem;
        opacity: 0;
        transition: all 0.3s ease;
    }

    .form-overlay.show {
        display: flex;
        opacity: 1;
    }

    .form-container {
        background: white;
        border-radius: 0.5rem;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
        width: 100%;
        max-width: 500px;
        max-height: 90vh;
        overflow-y: auto;
        transform: translateY(-20px);
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .form-overlay.show .form-container {
        transform: translateY(0);
    }

    .form-header {
        background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
        color: white;
        padding: 1.25rem 1.5rem;
        border-radius: 0.5rem 0.5rem 0 0;
    }

    .form-header h5 {
        margin: 0;
        font-size: 1.25rem;
        font-weight: 600;
    }

    .form-body {
        padding: 1.5rem;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-label {
        display: block;
        font-weight: 600;
        color: #374151;
        margin-bottom: 0.5rem;
        font-size: 0.875rem;
        text-transform: uppercase;
        letter-spacing: 0.025em;
    }

    .required {
        color: #ef4444;
        font-weight: 700;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem;
        border: 2px solid #e2e8f0;
        border-radius: 0.375rem;
        font-size: 0.875rem;
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        background: #fafbfc;
    }

    .form-control:focus {
        outline: none;
        border-color: #4f46e5;
        background: white;
        box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
    }

    #editMetadata, #metadata {
        font-family: 'Fira Code', 'Monaco', 'Consolas', monospace !important;
        font-size: 0.8rem;
        line-height: 1.4;
        white-space: pre;
        tab-size: 2;
    }

    .category-shortcode-badge {
        background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
        color: white;
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
        font-weight: 500;
        font-size: 0.7rem;
        text-transform: uppercase;
        display: inline-block;
        letter-spacing: 0.5px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    /* Compact Type list styles */
    .type-list-item {
        display: inline-flex;
        align-items: center;
        gap: 0.375rem;
        padding: 0.25rem 0.5rem;
        margin: 0.125rem 0.25rem 0.125rem 0;
        background: linear-gradient(135deg, #e0f2fe 0%, #b3e5fc 100%);
        border: 1px solid #0284c7;
        border-radius: 1rem;
        font-size: 0.75rem;
        font-weight: 500;
        color: #0369a1;
        transition: all 0.2s ease;
    }

    .type-list-item:hover {
        background: linear-gradient(135deg, #b3e5fc 0%, #81d4fa 100%);
        border-color: #0369a1;
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(3, 105, 161, 0.15);
    }

    .type-list-text {
        line-height: 1;
        color: #0369a1;
        font-weight: 500;
    }

    .type-remove-btn {
        background: #ef4444;
        color: white;
        border: none;
        width: 16px;
        height: 16px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.2s ease;
        font-size: 0.625rem;
        flex-shrink: 0;
    }

    .type-remove-btn:hover {
        background: #dc2626;
        transform: scale(1.2);
    }

    #typesContainer {
        background-color: #f8fafc;
        border: 1px solid #e2e8f0;
        border-radius: 0.375rem;
        padding: 0.5rem;
        max-height: 120px;
        overflow-y: auto;
        display: flex;
        flex-wrap: wrap;
        align-items: flex-start;
        min-height: 2rem;
    }

    #typesContainer:empty::before {
        content: 'No types added yet...';
        color: #94a3b8;
        font-size: 0.75rem;
        font-style: italic;
    }

    .input-group .btn-outline-success {
        border-color: #10b981;
        color: #10b981;
    }

    .input-group .btn-outline-success:hover {
        background-color: #10b981;
        border-color: #10b981;
        color: white;
    }

    .btn-outline-success:disabled {
        background-color: #f8fafc;
        border-color: #e2e8f0;
        color: #94a3b8;
        cursor: not-allowed;
        opacity: 0.6;
    }

    .duplicate-warning {
        color: #ef4444;
        font-size: 0.75rem;
        margin-top: 0.25rem;
        display: flex;
        align-items: center;
        gap: 0.25rem;
        font-weight: 500;
    }

    .form-control textarea {
        resize: vertical;
        min-height: 80px;
    }

    .validation-feedback {
        color: #ef4444;
        font-size: 0.75rem;
        margin-top: 0.25rem;
        display: flex;
        align-items: center;
        gap: 0.25rem;
        font-weight: 500;
    }

    .validation-feedback i {
        font-size: 0.7rem;
    }

    .is-invalid {
        border-color: #ef4444 !important;
        box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1) !important;
    }

    /* Buttons */
    .btn-base {
        padding: 0.75rem 1.5rem;
        border-radius: 0.375rem;
        font-weight: 600;
        font-size: 0.875rem;
        border: none;
        cursor: pointer;
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        text-decoration: none;
        text-align: center;
        justify-content: center;
        min-width: 100px;
    }

    .btn-cancel {
        background: #f1f5f9;
        color: #64748b;
        border: 2px solid #e2e8f0;
    }

    .btn-cancel:hover {
        background: #e2e8f0;
        color: #475569;
        transform: translateY(-1px);
    }

    .btn-save, .btn-create, .btn-update {
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        color: white;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
    }

    .btn-save:hover, .btn-create:hover, .btn-update:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.12);
    }

    .section-card {
        background: white;
        border-radius: 0.5rem;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
        overflow: hidden;
        margin-bottom: 2rem;
        border: 1px solid #f1f5f9;
    }

    .section-header {
        background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
        color: white;
        padding: 1.25rem 1.5rem;
        font-weight: 600;
        font-size: 1.125rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .section-header h3 {
        margin: 0;
        font-size: 1.125rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .section-controls {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
    }

    /* Add/Delete Buttons */
    .add-btn, .delete-btn {
        padding: 0.5rem 1rem;
        border-radius: 0.375rem;
        color: white;
        font-weight: 600;
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        font-size: 0.875rem;
        text-decoration: none;
        cursor: pointer;
        display: inline-flex;
        align-items: center;
        gap: 0.375rem;
        border: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
    }

    .add-btn {
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
    }

    .delete-btn {
        background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
    }

    .add-btn:hover, .delete-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.12);
        color: white;
        text-decoration: none;
    }

    .delete-btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
        pointer-events: none;
        transform: none;
    }

    /* Category Types */
    .types-list {
        display: flex;
        flex-wrap: wrap;
        gap: 0.75rem;
        padding: 1.5rem;
    }

    .type-item {
        background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
        border: 2px solid #e2e8f0;
        padding: 0.625rem 1rem;
        border-radius: 0.375rem;
        font-weight: 500;
        color: #1e293b;
        font-size: 0.875rem;
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        display: flex;
        align-items: center;
        gap: 0.5rem;
        cursor: pointer;
        user-select: none;
    }

    .type-item:hover {
        background: linear-gradient(135deg, #e2e8f0 0%, #cbd5e1 100%);
        border-color: #cbd5e1;
        transform: translateY(-2px);
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
    }

    .type-item.selected {
        border: 2px solid #3b82f6 !important;
        background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%) !important;
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.25);
    }

    /* Selection counter */
    .selection-count {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background: #3b82f6;
        color: white;
        padding: 0.75rem 1rem;
        border-radius: 0.5rem;
        font-weight: 600;
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.25);
        z-index: 1000;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .selection-count button {
        background: none;
        border: none;
        color: white;
        cursor: pointer;
        padding: 0.25rem;
        border-radius: 0.25rem;
        transition: background-color 0.2s ease;
    }

    .selection-count button:hover {
        background: rgba(255, 255, 255, 0.1);
    }

    /* Table Styles */
    .category-table {
        font-size: 0.875rem;
    }

    .category-table .table {
        margin: 0;
    }

    .category-table thead th {
        background: #b3e5fc;
        color: black;
        font-weight: 600;
        text-transform: uppercase;
        font-size: 0.75rem;
        letter-spacing: 0.05em;
        padding: 1rem 0.75rem;
        border: none;
        position: sticky;
        top: 0;
        z-index: 10;
    }

    .category-table tbody tr {
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        border-bottom: 1px solid #f1f5f9;
    }

    .category-table tbody tr:hover {
        background-color: #f8fafc;
        transform: translateY(-1px);
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
    }

    .category-table tbody td {
        padding: 1rem 0.75rem;
        vertical-align: middle;
        border-color: #f1f5f9;
    }

    .category-value {
        font-weight: 600;
        color: #1e293b;
        font-size: 0.875rem;
    }

    .category-type-badge {
        background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
        color: white;
        padding: 0.375rem 0.75rem;
        border-radius: 0.375rem;
        font-weight: 500;
        font-size: 0.75rem;
        text-transform: capitalize;
        display: inline-block;
    }

    .category-order-badge {
        background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
        color: white;
        padding: 0.375rem 0.75rem;
        border-radius: 0.375rem;
        font-weight: 500;
        font-size: 0.75rem;
        display: inline-block;
    }

    .category-id-container {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        max-width: 300px;
    }

    .category-id {
        font-family: 'Fira Code', 'Monaco', 'Consolas', monospace;
        font-size: 0.75rem;
        color: #64748b;
        background: #f8fafc;
        padding: 0.375rem 0.5rem;
        border-radius: 0.375rem;
        border: 1px solid #e2e8f0;
        flex: 1;
        min-width: 0;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .copy-btn {
        background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
        border: none;
        color: white;
        padding: 0.375rem 0.75rem;
        border-radius: 0.375rem;
        cursor: pointer;
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        font-size: 0.75rem;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.25rem;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
        white-space: nowrap;
    }

    .copy-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.12);
    }

    .copy-btn.copied {
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
    }

    /* Action Buttons */
    .action-buttons {
        display: flex;
        gap: 0.375rem;
        justify-content: center;
        flex-wrap: wrap;
    }

    .action-btn {
        padding: 0.5rem;
        border-radius: 0.375rem;
        border: none;
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        display: inline-flex;
        align-items: center;
        justify-content: center;
        width: 40px;
        height: 40px;
        font-size: 0.875rem;
        text-decoration: none;
        cursor: pointer;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
    }

    .action-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.12);
        text-decoration: none;
    }

    .btn-edit {
        background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
        color: white;
    }

    .btn-tree {
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        color: white;
    }

    .btn-delete {
        background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        color: white;
    }

    .btn-edit:hover, .btn-tree:hover, .btn-delete:hover {
        color: white;
    }

    /* Empty State */
    .empty-state {
        text-align: center;
        padding: 3rem 2rem;
        color: #64748b;
    }

    .empty-state-icon {
        font-size: 3rem;
        margin-bottom: 1rem;
        color: #cbd5e1;
    }

    .empty-state h4 {
        font-size: 1.25rem;
        margin-bottom: 0.75rem;
        color: #374151;
    }

    .empty-state p {
        font-size: 0.875rem;
        margin-bottom: 1.5rem;
        max-width: 400px;
        margin-left: auto;
        margin-right: auto;
    }

    /* Modal Styles */
    .modal {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.6);
        backdrop-filter: blur(4px);
        z-index: 2000;
        display: none;
        align-items: center;
        justify-content: center;
        padding: 1rem;
        opacity: 0;
        transition: all 0.3s ease;
    }

    .modal.show {
        display: flex;
        opacity: 1;
    }

    .modal-content {
        background: white;
        border-radius: 0.5rem;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
        width: 100%;
        max-width: 450px;
        max-height: 90vh;
        overflow-y: auto;
        transform: scale(0.9);
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .modal.show .modal-content {
        transform: scale(1);
    }

    .modal-header {
        background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        color: white;
        padding: 1.25rem 1.5rem;
        border-radius: 0.5rem 0.5rem 0 0;
    }

    .modal-header h4 {
        margin: 0;
        font-size: 1.125rem;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    /* Enhanced error alerts */
    .alert {
        border: none;
        border-radius: 0.5rem;
        padding: 1rem 1.25rem;
        margin-bottom: 1.5rem;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);
        border-left: 4px solid;
        white-space: pre-line;
    }

    .form-actions, .modal-actions {
        display: flex;
        gap: 0.75rem;
        justify-content: center;
        padding: 1.5rem;
        border-top: 1px solid #e2e8f0;
        background: #f8fafc;
    }

    .form-actions .btn-base,
    .modal-actions .btn-base {
        min-width: 140px;
    }

    .alert-success {
        background: linear-gradient(135deg, #ecfdf5 0%, #d1fae5 100%);
        color: #065f46;
        border-left-color: #10b981;
    }

    .alert-danger {
        background: linear-gradient(135deg, #fef2f2 0%, #fecaca 100%);
        color: #991b1b;
        border-left-color: #ef4444;
    }

    .alert-warning {
        background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
        color: #92400e;
        border-left-color: #f59e0b;
    }

    .btn-close {
        background: none;
        border: none;
        font-size: 1.2rem;
        cursor: pointer;
        color: inherit;
        opacity: 0.7;
        transition: opacity 0.2s ease;
    }

    .btn-close:hover {
        opacity: 1;
    }

    /* Loading states */
    .loading {
        pointer-events: none;
        opacity: 0.7;
    }

    .modal-body {
        padding: 1.5rem;
        text-align: center;
    }

    .modal-body p {
        font-size: 1rem;
        color: #374151;
        margin: 0;
        line-height: 1.6;
    }

    .btn-delete-confirm {
        background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        color: white;
        box-shadow: 0 2px 6px rgba(239, 68, 68, 0.25);
    }

    .btn-delete-confirm:hover {
        background: linear-gradient(135deg, #dc2626 0%, #b91c1c 100%);
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(239, 68, 68, 0.35);
    }

    /* Focus styles for accessibility */
    .btn-base:focus,
    .action-btn:focus,
    .copy-btn:focus {
        outline: 2px solid #4f46e5;
        outline-offset: 2px;
    }

    /* Smooth scrolling */
    html {
        scroll-behavior: smooth;
    }
</style>

<div class="container-fluid px-3">
    <!-- Header Section -->
    <div class="categories-header text-center">
        <div class="container">
            <h1 class="display-4 fw-bold mb-2">
                <i class="fas fa-layer-group me-2"></i>
                Categories Management
            </h1>
            <p class="lead mb-0">Manage your content categories and types</p>
        </div>
    </div>

    <!-- Alert container -->
    <div id="alertContainer">
        @if (ViewBag.ErrorMessage != null)
        {
        <div class="alert alert-danger rounded-3 shadow-sm mb-3" role="alert">
            <i class="fas fa-exclamation-circle me-2"></i>
            @ViewBag.ErrorMessage
        </div>
        }

        @if (ViewBag.SuccessMessage != null)
        {
        <div class="alert alert-success rounded-3 shadow-sm mb-3" role="alert">
            <i class="fas fa-check-circle me-2"></i>
            @ViewBag.SuccessMessage
        </div>
        }
    </div>

    <!-- Category Type Form Overlay -->
    <div class="form-overlay" id="typeForm">
        <div class="form-container">
            <div class="form-header">
                <h5><i class="fas fa-tags me-2"></i>Add Category Type(s)</h5>
            </div>
            <form id="categoryTypeForm">
                <div class="form-body">
                    <div class="form-group">
                        <label class="form-label">
                            Type Name <span class="required">*</span>
                        </label>
                        <div class="input-group mb-2">
                            <input type="text"
                                   class="form-control"
                                   id="typeNameInput"
                                   placeholder="Enter category type name"
                                   maxlength="100">
                            <button type="button"
                                    id="addMoreBtn"
                                    class="btn btn-outline-success"
                                    onclick="addTypeToList()"
                                    style="display: none;"
                                    title="Add to list">
                                <i class="fas fa-plus"></i> Add More
                            </button>
                        </div>

                        <!-- Add validation error container -->
                        <div id="validationError" class="duplicate-warning" style="display: none;">
                            <i class="fas fa-exclamation-triangle"></i>
                            <span id="validationErrorText"></span>
                        </div>
                        <!-- Add this warning message container -->
                        <div id="duplicateWarning" class="duplicate-warning" style="display: none;">
                            <i class="fas fa-exclamation-triangle"></i>
                            Adding duplicate types is not allowed
                        </div>

                        <!-- List of added types -->
                        <div id="typesList" style="display: none;">
                            <label class="form-label mb-2" style="font-size: 0.875rem; color: #64748b;">
                                <i class="fas fa-list me-1"></i>Types to Create:
                            </label>
                            <div id="typesContainer">
                                <!-- Types will be added here dynamically as compact chips -->
                            </div>
                        </div>
                    </div>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn-base btn-cancel" onclick="categoriesManager.cancelTypeForm()">
                        <i class="fas fa-times me-1"></i>Cancel
                    </button>
                    <button type="submit" class="btn-base btn-save" id="submitBtn" disabled>
                        <i class="fas fa-save me-1"></i><span id="submitButtonText">Create Type</span>
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Create Category Form Overlay -->
    <div class="form-overlay" id="createForm">
        <div class="form-container">
            <div class="form-header">
                <h5><i class="fas fa-plus me-2"></i>Create New Category</h5>
            </div>
            <form id="createCategoryForm">
                <div class="form-body">
                    <div class="form-group">
                        <label for="value" class="form-label">
                            Category Name <span class="required">*</span>
                        </label>
                        <input type="text"
                               class="form-control"
                               id="value"
                               name="value"
                               required
                               placeholder="Enter category name">
                    </div>

                    <div class="form-group">
                        <label for="type" class="form-label">
                            Type <span class="required">*</span>
                        </label>
                        <select class="form-control" id="type" name="type" required>
                            <option value="">Select a type</option>
                            <!-- Options will be populated dynamically -->
                        </select>
                    </div>

                    <!-- New Metadata Field -->
                    <div class="form-group">
                        <label for="metadata" class="form-label">Metadata (JSON)</label>
                        <textarea class="form-control"
                                  id="metadata"
                                  name="metadata"
                                  rows="3"
                                  placeholder='Optional JSON metadata, e.g., {"key": "value"}'></textarea>
                        <div id="metadataValidation" class="validation-feedback" style="display: none;">
                            <i class="fas fa-exclamation-triangle"></i>
                            <span>Invalid JSON format</span>
                        </div>
                    </div>

                    <!-- New Shortcode Field -->
                    <div class="form-group">
                        <label for="shortcode" class="form-label">Shortcode</label>
                        <input type="text"
                               class="form-control"
                               id="shortcode"
                               name="shortcode"
                               maxlength="5"
                               pattern="[a-zA-Z]{2,5}"
                               placeholder="2-5 letters only">
                        <div id="shortcodeValidation" class="validation-feedback" style="display: none;">
                            <i class="fas fa-exclamation-triangle"></i>
                            <span>Shortcode must be 2-5 letters only</span>
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="order" class="form-label">Order</label>
                        <input type="number"
                               class="form-control"
                               id="order"
                               name="order"
                               onkeypress="return categoriesManager.allowOnlyNumbers(event)"
                               oninput="this.value = this.value.replace(/[^0-9]/g, '')"
                               min="0"
                               placeholder="Display order">
                    </div>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn-base btn-cancel" onclick="toggleCreateForm()">
                        <i class="fas fa-times me-1"></i>Cancel
                    </button>
                    <button type="submit" class="btn-base btn-create">
                        <i class="fas fa-save me-1"></i>Create Category
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Edit Category Form Overlay -->
    <div class="form-overlay" id="editForm">
        <div class="form-container">
            <div class="form-header">
                <h5><i class="fas fa-edit me-2"></i>Update Category</h5>
            </div>
            <form id="editCategoryForm">
                <input type="hidden" id="editId" name="id"/>
                <div class="form-body">
                    <div class="form-row">
                        <div class="form-group">
                            <label for="editValue" class="form-label">Category Name</label>
                            <input type="text"
                                   class="form-control"
                                   id="editValue"
                                   name="value"
                                   placeholder="Enter category name">
                        </div>
                        <div class="form-group">
                            <label for="editOrder" class="form-label">Order</label>
                            <input type="number"
                                   class="form-control"
                                   id="editOrder"
                                   name="order"
                                   onkeypress="return categoriesManager.allowOnlyNumbers(event)"
                                   oninput="this.value = this.value.replace(/[^0-9]/g, '')"
                                   min="0"
                                   placeholder="Display order">
                        </div>
                    </div>

                    <!-- New Metadata Field -->
                    <div class="form-group">
                        <label for="editMetadata" class="form-label">Metadata (JSON)</label>
                        <textarea class="form-control"
                                  id="editMetadata"
                                  name="metadata"
                                  rows="3"
                                  placeholder='Optional JSON metadata, e.g., {"key": "value"}'></textarea>
                        <div id="editMetadataValidation" class="validation-feedback" style="display: none;">
                            <i class="fas fa-exclamation-triangle"></i>
                            <span>Invalid JSON format</span>
                        </div>
                    </div>

                    <!-- New Shortcode Field -->
                    <div class="form-group">
                        <label for="editShortcode" class="form-label">Shortcode</label>
                        <input type="text"
                               class="form-control"
                               id="editShortcode"
                               name="shortcode"
                               maxlength="5"
                               pattern="[a-zA-Z]{2,5}"
                               placeholder="2-5 letters only">
                        <div id="editShortcodeValidation" class="validation-feedback" style="display: none;">
                            <i class="fas fa-exclamation-triangle"></i>
                            <span>Shortcode must be 2-5 letters only</span>
                        </div>
                    </div>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn-base btn-cancel" onclick="toggleEditForm()">
                        <i class="fas fa-times me-1"></i>Cancel
                    </button>
                    <button type="submit" class="btn-base btn-update">
                        <i class="fas fa-save me-1"></i>Update Category
                    </button>
                </div>
            </form>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <!-- Category Types Section -->
            <div class="section-card">
                <div class="section-header">
                    <h3>
                        <i class="fas fa-tags me-2"></i>
                        Category Types
                    </h3>
                    <div class="section-controls">
                        <button type="button" class="add-btn" onclick="addCategoryType()">
                            <i class="fas fa-plus"></i>
                            Add Type
                        </button>
                        <button type="button" class="delete-btn" onclick="deleteCategoryType()" disabled>
                            <i class="fas fa-trash"></i>
                            Delete Type
                        </button>
                    </div>
                </div>

                <div id="categoryTypesSection">
                    <!-- Types will be loaded here -->
                </div>
            </div>

            <!-- Root Categories Section -->
            <div class="section-card">
                <div class="section-header">
                    <h3>
                        <i class="fas fa-sitemap me-2"></i>
                        Root Categories
                    </h3>
                    <div class="section-controls">
                        <button type="button" class="add-btn" onclick="openCreateForm()">
                            <i class="fas fa-plus"></i>
                            Add Category
                        </button>
                    </div>
                </div>

                <!-- Search Bar -->
                <div class="search-container">
                    <div class="search-input-group">
                        <i class="fas fa-search search-icon"></i>
                        <input type="text"
                               id="searchInput"
                               class="search-input"
                               placeholder="Search categories by name..."
                               value="@ViewBag.Search">
                        <button type="button" id="searchClearBtn" class="search-clear-btn" onclick="clearSearch()">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>

                <!-- Categories Section with Loading Overlay -->
                <div class="categories-section-wrapper">
                    <div class="loading-overlay" id="loadingOverlay">
                        <div class="loading-spinner"></div>
                    </div>

                    <div id="rootCategoriesSection">
                        <!-- Categories will be loaded here -->
                    </div>

                    <!-- Pagination Container -->
                    <div class="pagination-container" id="paginationContainer">
                        <div class="pagination-info">
                            <span id="paginationInfo">Showing 0 - 0 of 0 categories</span>
                            <div class="page-size-selector">
                                <label for="pageSizeSelect">Show:</label>
                                <select id="pageSizeSelect" onchange="changePageSize()">
                                    <option value="5" @(ViewBag.PageSize == 5 ? "selected" : "")>5</option>
                                    <option value="10" @(ViewBag.PageSize == 10 ? "selected" : "")>10</option>
                                    <option value="25" @(ViewBag.PageSize == 25 ? "selected" : "")>25</option>
                                    <option value="50" @(ViewBag.PageSize == 50 ? "selected" : "")>50</option>
                                </select>
                            </div>
                        </div>
                        <div class="pagination-controls" id="paginationControls">
                            <!-- Pagination buttons will be generated here -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Type Modal -->
<div class="modal" id="deleteTypeModal">
    <div class="modal-content">
        <div class="modal-header">
            <h4><i class="fas fa-trash me-2"></i>Delete Category Type</h4>
        </div>
        <form id="deleteTypeForm">
            <div class="form-body">
                <div class="form-group">
                    <label class="form-label">
                        Selected Types to Delete:
                    </label>
                    <div id="selectedTypesContainer"
                         style="background: #f8fafc; border: 1px solid #e2e8f0; border-radius: 0.375rem; padding: 0.75rem; max-height: 150px; overflow-y: auto;">
                        <!-- Selected types will be populated here -->
                    </div>
                </div>
            </div>
            <div class="modal-actions">
                <button type="button" class="btn-base btn-cancel" onclick="closeDeleteTypeModal()">
                    <i class="fas fa-times me-1"></i>Cancel
                </button>
                <button type="submit" class="btn-base btn-delete">
                    <i class="fas fa-trash me-1"></i>Delete Types
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Custom Delete Confirmation Modal -->
<div class="modal" id="deleteConfirmModal">
    <div class="modal-content">
        <div class="modal-header">
            <h4><i class="fas fa-exclamation-triangle me-2"></i>Confirm Deletion</h4>
        </div>
        <div class="modal-body">
            <p id="deleteConfirmMessage">Are you sure you want to delete this category?</p>
        </div>
        <div class="modal-actions">
            <button type="button" class="btn-base btn-cancel" onclick="closeDeleteConfirmModal()">
                <i class="fas fa-times me-1"></i>Cancel
            </button>
            <button type="button" class="btn-base btn-delete-confirm" onclick="confirmDelete()">
                <i class="fas fa-trash me-1"></i>Delete
            </button>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    let deleteFormToSubmit = null;
    let categoryToDelete = null;
    let typesList = [];
    let selectedTypes = new Set();
    let categoryTypes = @Html.Raw(Json.Serialize(ViewBag.CategoryTypes ?? new List<string>()));
    let categories = [];
    let currentPagination = {
        page: @(ViewBag.Page ?? 1),
        pageSize: @(ViewBag.PageSize ?? 10),
        totalItems: 0,
        totalPages: 0,
        hasNextPage: false,
        hasPreviousPage: false,
        isFirstPage: true,
        isLastPage: true
    };
    let currentSearch = '@(ViewBag.Search ?? "")';
    let searchTimeout = null;

    // Add validation constants (adjust these values based on your DatabaseConstants)
    const VALIDATION_CONSTANTS = {
        TYPE_NAME_MIN_LENGTH: 2,
        TYPE_NAME_MAX_LENGTH: 48,
        TYPE_NAME_PATTERN: /^[a-zA-Z-]+$/
    };

    class CategoriesManager {
        constructor() {
            this.validationTimeout = null;
            this.categoriesData = {};
            // Ensure we have valid arrays
            if (!Array.isArray(categoryTypes)) {
                categoryTypes = [];
            }
            this.init();
        }

        init() {
            this.loadInitialData();
            this.bindEvents();
            this.setupFieldValidation();
            this.setupSearchFunctionality();
        }

        setupSearchFunctionality() {
            const searchInput = $('#searchInput');
            const searchClearBtn = $('#searchClearBtn');

            // Show/hide clear button based on input value
            const updateClearButton = () => {
                if (searchInput.val().trim()) {
                    searchClearBtn.addClass('show');
                } else {
                    searchClearBtn.removeClass('show');
                }
            };

            // Initial state
            updateClearButton();

            // Search input handler with debounce
            searchInput.on('input', () => {
                updateClearButton();

                if (searchTimeout) {
                    clearTimeout(searchTimeout);
                }

                searchTimeout = setTimeout(() => {
                    this.performSearch();
                }, 500); // 500ms debounce
            });

            // Enter key handler
            searchInput.on('keydown', (e) => {
                if (e.key === 'Enter') {
                    if (searchTimeout) {
                        clearTimeout(searchTimeout);
                    }
                    this.performSearch();
                }
            });
        }

        performSearch() {
            const searchValue = $('#searchInput').val().trim();
            currentSearch = searchValue;
            currentPagination.page = 1; // Reset to first page on new search
            this.loadCategories();
        }

        clearSearch() {
            $('#searchInput').val('');
            $('#searchClearBtn').removeClass('show');
            currentSearch = '';
            currentPagination.page = 1;
            this.loadCategories();
        }

        changePageSize(newPageSize) {
            currentPagination.pageSize = parseInt(newPageSize);
            currentPagination.page = 1; // Reset to first page
            this.loadCategories();
        }

        goToPage(page) {
            currentPagination.page = page;
            this.loadCategories();
        }

        async loadCategories() {
            this.showLoading(true);

            try {
                const params = new URLSearchParams({
                    page: currentPagination.page,
                    pageSize: currentPagination.pageSize
                });

                if (currentSearch) {
                    params.append('search', currentSearch);
                }

                const response = await $.ajax({
                    url: `/Categories?${params.toString()}`,
                    method: 'GET',
                    headers: {'X-Requested-With': 'XMLHttpRequest'}
                });

                if (response.success) {
                    categories = response.categories || [];
                    currentPagination = response.pagination;
                    this.renderCategories(categories);
                    this.updatePagination();
                } else {
                    this.showError(response.message || 'Failed to load categories');
                    categories = [];
                    this.renderCategories(categories);
                    this.updatePagination();
                }
            } catch (error) {
                console.error('Error loading categories:', error);
                this.showError('Failed to load categories: ' + (error.message || 'Network error'));
                categories = [];
                this.renderCategories(categories);
                this.updatePagination();
            } finally {
                this.showLoading(false);
            }
        }

        showLoading(show) {
            if (show) {
                $('#loadingOverlay').addClass('show');
            } else {
                $('#loadingOverlay').removeClass('show');
            }
        }

        updatePagination() {
            const info = $('#paginationInfo');
            const controls = $('#paginationControls');
            const container = $('#paginationContainer');

            if (currentPagination.totalItems === 0) {
                info.text('No categories found');
                controls.empty();
                return;
            }

            // Update info text
            const startItem = ((currentPagination.page - 1) * currentPagination.pageSize) + 1;
            const endItem = Math.min(currentPagination.page * currentPagination.pageSize, currentPagination.totalItems);
            info.text(`Showing ${startItem} - ${endItem} of ${currentPagination.totalItems} categories`);

            // Update pagination controls
            controls.empty();

            const totalPages = currentPagination.totalPages;
            const currentPage = currentPagination.page;

            if (totalPages <= 1) {
                return; // No pagination needed for single page
            }

            // Previous button
            if (currentPagination.hasPreviousPage) {
                controls.append(`
            <button class="pagination-btn" onclick="categoriesManager.goToPage(${currentPage - 1})" title="Previous Page">
                <i class="fas fa-chevron-left"></i>
            </button>
        `);
            } else {
                controls.append('<button class="pagination-btn disabled"><i class="fas fa-chevron-left"></i></button>');
            }

            if (totalPages <= 5) {
                // Show all pages if 5 or fewer
                for (let i = 1; i <= totalPages; i++) {
                    const activeClass = i === currentPage ? ' active' : '';
                    controls.append(`
                <button class="pagination-btn${activeClass}" onclick="categoriesManager.goToPage(${i})">
                    ${i}
                </button>
            `);
                }
            } else {
                // For more than 5 pages: show First, Previous, Current, Next, Last pattern
                const buttonsToShow = new Set();

                // Always add first page
                buttonsToShow.add(1);

                // Add previous page if current page > 1
                if (currentPage > 1) {
                    buttonsToShow.add(currentPage - 1);
                }

                // Add current page if it's not first or last
                if (currentPage !== 1 && currentPage !== totalPages) {
                    buttonsToShow.add(currentPage);
                }

                // Add next page if current page < total
                if (currentPage < totalPages) {
                    buttonsToShow.add(currentPage + 1);
                }

                // Always add last page if total > 1
                if (totalPages > 1) {
                    buttonsToShow.add(totalPages);
                }

                // Convert to sorted array
                const sortedButtons = Array.from(buttonsToShow).sort((a, b) => a - b);

                // Add buttons with ellipsis where needed
                for (let i = 0; i < sortedButtons.length; i++) {
                    const pageNum = sortedButtons[i];
                    const prevPageNum = i > 0 ? sortedButtons[i - 1] : 0;

                    // Add ellipsis if there's a gap
                    if (i > 0 && pageNum - prevPageNum > 1) {
                        controls.append('<span class="pagination-ellipsis">...</span>');
                    }

                    // Add the page button
                    const activeClass = pageNum === currentPage ? ' active' : '';
                    controls.append(`
                <button class="pagination-btn${activeClass}" onclick="categoriesManager.goToPage(${pageNum})">
                    ${pageNum}
                </button>
            `);
                }
            }

            // Next button
            if (currentPagination.hasNextPage) {
                controls.append(`
            <button class="pagination-btn" onclick="categoriesManager.goToPage(${currentPage + 1})" title="Next Page">
                <i class="fas fa-chevron-right"></i>
            </button>
        `);
            } else {
                controls.append('<button class="pagination-btn disabled"><i class="fas fa-chevron-right"></i></button>');
            }
        }

        loadInitialData() {
            // Load from the model data passed from the controller
            const modelData = @Html.Raw(Json.Serialize(Model ?? new object()));

            if (modelData && modelData.Items) {
                categories = modelData.Items || [];
                currentPagination = {
                    page: modelData.Page || 1,
                    pageSize: modelData.PageSize || 10,
                    totalItems: modelData.TotalItems || 0,
                    totalPages: modelData.TotalPages || 0,
                    hasNextPage: modelData.HasNextPage || false,
                    hasPreviousPage: modelData.HasPreviousPage || false,
                    isFirstPage: modelData.IsFirstPage || true,
                    isLastPage: modelData.IsLastPage || true
                };
            } else {
                // Fallback: Load data via AJAX if model is empty
                categories = [];
                currentPagination = {
                    page: 1,
                    pageSize: 10,
                    totalItems: 0,
                    totalPages: 0,
                    hasNextPage: false,
                    hasPreviousPage: false,
                    isFirstPage: true,
                    isLastPage: true
                };

                // Load data via AJAX on first load if no model data
                this.loadCategories();
            }

            this.renderCategoryTypes(categoryTypes);
            this.renderCategories(categories);
            this.populateTypeSelect(categoryTypes);
            this.updatePagination();
        }

        closeTypeForm() {
            if (this.validationTimeout) {
                clearTimeout(this.validationTimeout);
                this.validationTimeout = null;
            }
            $('#typeForm').removeClass('show');
        }

        bindEditButtons() {
            $('.edit-category-btn').off('click').on('click', (e) => {
                const button = $(e.currentTarget);
                const categoryId = button.data('category-id');
                const category = this.categoriesData[categoryId];

                if (category) {
                    this.showEditForm(
                        category.id,
                        category.value,
                        category.order || null,
                        category.metadata || null,
                        category.shortcode || null
                    );
                } else {
                    console.error('Category not found:', categoryId);
                    this.showError('Category data not found. Please refresh the page.');
                }
            });
        }

        cancelTypeForm() {
            this.resetTypeForm();
            this.closeTypeForm();
        }

        validateJSON(jsonString) {
            if (!jsonString || jsonString.trim() === '') {
                return true;
            }
            try {
                JSON.parse(jsonString);
                return true;
            } catch (e) {
                return false;
            }
        }

        validateShortcode(shortcode) {
            if (!shortcode || shortcode.trim() === '') {
                return true;
            }
            const trimmed = shortcode.trim();
            return /^[a-zA-Z]{2,5}$/.test(trimmed);
        }

        setupFieldValidation() {
            // Metadata validation for create form
            $('#metadata').on('input blur', () => {
                const input = $('#metadata');
                const validation = $('#metadataValidation');
                const isValid = this.validateJSON(input.val());

                if (isValid) {
                    input.removeClass('is-invalid');
                    validation.hide();
                } else {
                    input.addClass('is-invalid');
                    validation.show();
                }
            });

            // Shortcode validation for create form
            $('#shortcode').on('input blur', () => {
                const input = $('#shortcode');
                const validation = $('#shortcodeValidation');
                const isValid = this.validateShortcode(input.val());

                if (isValid) {
                    input.removeClass('is-invalid');
                    validation.hide();
                } else {
                    input.addClass('is-invalid');
                    validation.show();
                }
            });

            // Metadata validation for edit form
            $('#editMetadata').on('input blur', () => {
                const input = $('#editMetadata');
                const validation = $('#editMetadataValidation');
                const isValid = this.validateJSON(input.val());

                if (isValid) {
                    input.removeClass('is-invalid');
                    validation.hide();
                } else {
                    input.addClass('is-invalid');
                    validation.show();
                }
            });

            // Shortcode validation for edit form
            $('#editShortcode').on('input blur', () => {
                const input = $('#editShortcode');
                const validation = $('#editShortcodeValidation');
                const isValid = this.validateShortcode(input.val());

                if (isValid) {
                    input.removeClass('is-invalid');
                    validation.hide();
                } else {
                    input.addClass('is-invalid');
                    validation.show();
                }
            });
        }

        allowOnlyNumbers(event) {
            return /[0-9]/.test(event.key) ||
                ['Backspace', 'Delete', 'Tab', 'Escape', 'Enter', 'ArrowLeft', 'ArrowRight'].includes(event.key);
        }

        bindEvents() {
            // Category Type Form - Updated with debounced validation
            $('#categoryTypeForm').on('submit', (e) => this.handleCreateTypes(e));
            $('#typeNameInput').on('input', () => this.debouncedUpdateTypeForm());
            $('#typeNameInput').on('keydown', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    if ($('#typeNameInput').val().trim()) {
                        this.addTypeToList();
                    }
                }
            });

            // Create Category Form
            $('#createCategoryForm').on('submit', (e) => this.handleCreateCategory(e));

            // Edit Category Form
            $('#editCategoryForm').on('submit', (e) => this.handleUpdateCategory(e));

            // Delete Type Form
            $('#deleteTypeForm').on('submit', (e) => this.handleDeleteTypes(e));

            // Close overlays when clicking outside
            $('.form-overlay, .modal').on('click', (e) => {
                if (e.target === e.currentTarget) {
                    $(e.currentTarget).removeClass('show');
                }
            });

            // Escape key to close modals
            $(document).on('keydown', (e) => {
                if (e.key === 'Escape') {
                    if (selectedTypes.size > 0) {
                        this.clearAllSelections();
                    } else {
                        this.closeAllForms();
                    }
                }
            });
        }

        // Enhanced client-side validation
        validateTypeName(typeName) {
            const errors = [];

            if (!typeName || typeName.trim() === '') {
                errors.push('Type name is required.');
                return errors;
            }

            const trimmed = typeName.trim();

            if (trimmed.length < VALIDATION_CONSTANTS.TYPE_NAME_MIN_LENGTH) {
                errors.push(`Type must be at least ${VALIDATION_CONSTANTS.TYPE_NAME_MIN_LENGTH} characters.`);
            }

            if (trimmed.length > VALIDATION_CONSTANTS.TYPE_NAME_MAX_LENGTH) {
                errors.push(`Type cannot be longer than ${VALIDATION_CONSTANTS.TYPE_NAME_MAX_LENGTH} characters.`);
            }

            if (!VALIDATION_CONSTANTS.TYPE_NAME_PATTERN.test(trimmed)) {
                errors.push('Type name can only contain letters and hyphens.');
            }

            return errors;
        }

        debouncedUpdateTypeForm() {
            if (this.validationTimeout) {
                clearTimeout(this.validationTimeout);
            }

            const input = $('#typeNameInput');
            input.removeClass('is-invalid');
            this.hideValidationError();
            this.updateAddMoreButtonImmediate();
            this.updateSubmitButton();

            this.validationTimeout = setTimeout(() => {
                this.updateTypeFormWithValidation();
            }, 2000);
        }

        updateAddMoreButtonImmediate() {
            const input = $('#typeNameInput');
            const addMoreBtn = $('#addMoreBtn');
            const duplicateWarning = $('#duplicateWarning');
            const inputValue = input.val().trim();

            if (inputValue) {
                addMoreBtn.show();

                const isDuplicate = typesList.some(type => type.toLowerCase() === inputValue.toLowerCase());

                if (isDuplicate) {
                    addMoreBtn.prop('disabled', true);
                    addMoreBtn.attr('title', 'Cannot add duplicate type');
                    duplicateWarning.show();
                } else {
                    addMoreBtn.prop('disabled', false);
                    addMoreBtn.attr('title', 'Add to list');
                    duplicateWarning.hide();
                }
            } else {
                addMoreBtn.hide();
                duplicateWarning.hide();
            }
        }

        updateTypeFormWithValidation() {
            const input = $('#typeNameInput');
            const addMoreBtn = $('#addMoreBtn');
            const duplicateWarning = $('#duplicateWarning');
            const inputValue = input.val().trim();

            input.removeClass('is-invalid');
            this.hideValidationError();

            if (inputValue) {
                const validationErrors = this.validateTypeName(inputValue);

                if (validationErrors.length > 0) {
                    input.addClass('is-invalid');
                    this.showValidationError(validationErrors[0]);

                    addMoreBtn.show();
                    addMoreBtn.prop('disabled', true);
                    addMoreBtn.attr('title', 'Fix validation errors first');
                    duplicateWarning.hide();
                } else {
                    const isDuplicate = typesList.some(type => type.toLowerCase() === inputValue.toLowerCase());

                    addMoreBtn.show();

                    if (isDuplicate) {
                        addMoreBtn.prop('disabled', true);
                        addMoreBtn.attr('title', 'Cannot add duplicate type');
                        duplicateWarning.show();
                    } else {
                        addMoreBtn.prop('disabled', false);
                        addMoreBtn.attr('title', 'Add to list');
                        duplicateWarning.hide();
                    }
                }
            } else {
                addMoreBtn.hide();
                duplicateWarning.hide();
            }

            this.updateSubmitButton();
        }

        toTitleCase(str) {
            if (!str) return str;
            return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();
        }

        showValidationError(errorMessage) {
            const validationError = $('#validationError');
            const validationErrorText = $('#validationErrorText');

            validationErrorText.text(errorMessage);
            validationError.show();
        }

        hideValidationError() {
            const validationError = $('#validationError');
            validationError.hide();
        }

        updateAddMoreButton() {
            this.updateTypeFormWithValidation();
        }

        updateSubmitButton() {
            const submitBtn = $('#submitBtn');
            const submitText = $('#submitButtonText');
            const input = $('#typeNameInput');
            const inputValue = input.val().trim();

            const hasValidInputValue = inputValue && this.validateTypeName(inputValue).length === 0;
            const hasListItems = typesList.length > 0;

            submitBtn.prop('disabled', !hasValidInputValue && !hasListItems);

            const totalCount = typesList.length + (hasValidInputValue ? 1 : 0);
            submitText.text(totalCount > 1 ? 'Create Types' : 'Create Type');
        }

        updateTypeForm() {
            this.debouncedUpdateTypeForm();
        }

        renderCategoryTypes(types) {
            const container = $('#categoryTypesSection');

            if (!types || types.length === 0) {
                container.html(`
            <div class="empty-state">
                <div class="empty-state-icon">
                    <i class="fas fa-tags"></i>
                </div>
                <h4>No Category Types Found</h4>
                <p>Start by creating your first category type.</p>
                <button type="button" class="add-btn" onclick="categoriesManager.addCategoryType()">
                    <i class="fas fa-plus me-1"></i>Create First Type
                </button>
            </div>
        `);
                return;
            }

            const sortedTypes = types.sort();
            let html = '<div class="types-list" id="categoryTypesList">';

            sortedTypes.forEach((type, index) => {
                const rawTypeName = String(type).trim().toLowerCase();
                const displayName = this.toTitleCase(rawTypeName);

                html += `
            <div class="type-item" 
                 data-index="${index}" 
                 data-type-name="${this.escapeHtml(rawTypeName)}"
                 data-type="${this.escapeHtml(rawTypeName)}">
                <i class="fas fa-tag me-1"></i>
                ${this.escapeHtml(displayName)}
            </div>
        `;
            });

            html += '</div>';
            container.html(html);
            this.initializeCategoryTypeSelection();
        }

        renderCategories(categories) {
            const container = $('#rootCategoriesSection');

            if (!categories || categories.length === 0) {
                let emptyMessage = 'No Categories Found';
                let emptyDescription = 'Start by creating your first category.';

                if (currentSearch) {
                    emptyMessage = 'No Matching Categories';
                    emptyDescription = `No categories found matching "${currentSearch}". Try a different search term.`;
                }

                container.html(`
            <div class="empty-state">
                <div class="empty-state-icon">
                    <i class="fas fa-folder-open"></i>
                </div>
                <h4>${emptyMessage}</h4>
                <p>${emptyDescription}</p>
                ${!currentSearch ? '<button type="button" class="add-btn" onclick="categoriesManager.openCreateForm()"><i class="fas fa-plus me-1"></i>Create First Category</button>' : ''}
            </div>
        `);
                return;
            }

            const sortedCategories = categories.sort((a, b) => (a.order || Number.MAX_VALUE) - (b.order || Number.MAX_VALUE));

            this.categoriesData = {};

            let html = `
        <div class="category-table">
            <table class="table table-hover mb-0 table-sm" id="categoriesTable">
                <thead>
                    <tr>
                        <th style="width: 8%;">Order</th>
                        <th style="width: 22%;">Name</th>
                        <th style="width: 12%;">Type</th>
                        <th style="width: 33%;">ID</th>
                        <th style="width: 25%;" class="text-center">Actions</th>
                    </tr>
                </thead>
                <tbody>
    `;

            sortedCategories.forEach((category) => {
                this.categoriesData[category.id] = category;

                const rawTypeName = category.typeName.toLowerCase();
                const displayTypeName = this.toTitleCase(rawTypeName);
                const escapedValue = this.escapeHtml(category.value);

                let shortcodeBadge = '';
                if (category.shortcode && category.shortcode.trim() !== '') {
                    shortcodeBadge = `<span class="category-shortcode-badge ms-2">${this.escapeHtml(category.shortcode)}</span>`;
                }

                html += `
            <tr class="category-row">
                <td>
                    ${category.order != null
                    ? `<span class="category-order-badge">${category.order}</span>`
                    : '<span class="text-muted">—</span>'
                }
                </td>
                <td>
                    <div class="category-value">
                        ${escapedValue}${shortcodeBadge}
                    </div>
                </td>
                <td>
                    <span class="category-type-badge">${this.escapeHtml(displayTypeName)}</span>
                </td>
                <td>
                    <div class="category-id-container">
                        <code class="category-id">${category.id}</code>
                        <button type="button"
                                class="copy-btn"
                                onclick="categoriesManager.copyToClipboard('${category.id}', this)"
                                title="Copy ID">
                            <i class="fas fa-copy"></i>
                            <span class="copy-text d-none d-md-inline">Copy</span>
                        </button>
                    </div>
                </td>
                <td>
                    <div class="action-buttons">
                        <button type="button"
                                class="action-btn btn-edit edit-category-btn"
                                data-category-id="${category.id}"
                                title="Update Category">
                            <i class="fas fa-edit"></i>
                        </button>
                        <a href="/Categories/Tree/${category.id}"
                           class="action-btn btn-tree"
                           title="Show Tree">
                            <i class="fas fa-sitemap"></i>
                        </a>
                        <button type="button"
                                class="action-btn btn-delete"
                                onclick="categoriesManager.showDeleteConfirmation('${category.id}', '${escapedValue}')"
                                title="Delete ${escapedValue}">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            </tr>
        `;
            });

            html += '</tbody></table></div>';
            container.html(html);
            this.bindEditButtons();
        }

        populateTypeSelect(types) {
            const select = $('#type');
            select.html('<option value="">Select a type</option>');
            types.forEach(type => {
                const rawType = String(type).trim().toLowerCase();
                const displayName = this.toTitleCase(rawType);
                select.append(`<option value="${this.escapeHtml(rawType)}">${this.escapeHtml(displayName)}</option>`);
            });
        }

        initializeCategoryTypeSelection() {
            $('.type-item').off('click').on('click', (e) => {
                this.toggleTypeSelection(e.currentTarget);
            });
            this.updateDeleteButtonState();
        }

        toggleTypeSelection(typeElement) {
            let typeName = $(typeElement).attr('data-type-name');

            if (!typeName) {
                typeName = $(typeElement).data('type');
            }

            if (!typeName) {
                const displayText = $(typeElement).text().trim().replace(/^\s*\S+\s+/, '');
                typeName = displayText;
            }

            typeName = String(typeName).trim();

            if (selectedTypes.has(typeName)) {
                selectedTypes.delete(typeName);
                $(typeElement).removeClass('selected');
            } else {
                selectedTypes.add(typeName);
                $(typeElement).addClass('selected');
            }

            this.updateDeleteButtonState();
            this.showSelectionCount();
        }

        clearAllSelections() {
            selectedTypes.clear();
            $('.type-item').removeClass('selected');
            this.updateDeleteButtonState();
            this.hideSelectionCount();

            setTimeout(() => {
                this.updateDeleteButtonState();
            }, 100);
        }

        updateDeleteButtonState() {
            const deleteBtn = $('.delete-btn');

            if (selectedTypes.size === 0) {
                deleteBtn.prop('disabled', true);
                deleteBtn.css({
                    'opacity': '0.5',
                    'cursor': 'not-allowed',
                    'pointer-events': 'none'
                });
            } else {
                deleteBtn.prop('disabled', false);
                deleteBtn.css({
                    'opacity': '1',
                    'cursor': 'pointer',
                    'pointer-events': 'auto'
                });
            }
        }

        showSelectionCount() {
            this.hideSelectionCount();
            if (selectedTypes.size > 0) {
                const countDiv = $(`
                    <div class="selection-count">
                        <i class="fas fa-check-circle me-2"></i>
                        ${selectedTypes.size} type${selectedTypes.size > 1 ? 's' : ''} selected
                        <button onclick="categoriesManager.clearAllSelections()" title="Clear selection">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                `);
                $('body').append(countDiv);
            }
        }

        hideSelectionCount() {
            $('.selection-count').remove();
        }

        addCategoryType() {
            this.closeAllForms();
            $('#typeForm').addClass('show');
            setTimeout(() => $('#typeNameInput').focus(), 300);
        }

        resetTypeForm() {
            if (this.validationTimeout) {
                clearTimeout(this.validationTimeout);
                this.validationTimeout = null;
            }

            $('#typeNameInput').val('').removeClass('is-invalid');
            this.hideValidationError();
            $('#duplicateWarning').hide();
            typesList = [];
            this.updateTypesDisplay();
            this.updateAddMoreButtonImmediate();
            this.updateSubmitButton();
        }

        addTypeToList() {
            const input = $('#typeNameInput');
            const typeName = input.val().trim();

            if (this.validationTimeout) {
                clearTimeout(this.validationTimeout);
                this.validationTimeout = null;
            }

            const validationErrors = this.validateTypeName(typeName);
            if (validationErrors.length > 0) {
                input.addClass('is-invalid');
                this.showValidationError(validationErrors[0]);
                this.showError('Please fix validation errors before adding the type.');

                const addMoreBtn = $('#addMoreBtn');
                addMoreBtn.prop('disabled', true);
                addMoreBtn.attr('title', 'Fix validation errors first');
                return;
            }

            if (typeName && !typesList.some(type => type.toLowerCase() === typeName.toLowerCase())) {
                typesList.push(typeName);
                input.val('').removeClass('is-invalid');
                this.hideValidationError();
                $('#duplicateWarning').hide();
                this.updateTypesDisplay();
                this.updateAddMoreButtonImmediate();
                this.updateSubmitButton();
                input.focus();
            } else if (typesList.some(type => type.toLowerCase() === typeName.toLowerCase())) {
                this.showError('This type already exists in the list!');
                input.select();
            }
        }

        removeTypeFromList(typeName) {
            typesList = typesList.filter(type => type !== typeName);
            this.updateTypesDisplay();
            this.updateSubmitButton();
            this.updateAddMoreButtonImmediate();
            $('#typeNameInput').focus();
        }

                updateTypesDisplay() {
            const typesList_div = $('#typesList');
            const typesContainer = $('#typesContainer');

            if (typesList.length === 0) {
                typesList_div.hide();
                typesContainer.html('');
            } else {
                typesList_div.show();
                typesContainer.html(typesList.map(type => `
                    <span class="type-list-item">
                        <span class="type-list-text">${this.escapeHtml(type)}</span>
                        <button type="button" 
                                class="type-remove-btn" 
                                onclick="categoriesManager.removeTypeFromList('${type}')"
                                title="Remove ${type}">
                            <i class="fas fa-times"></i>
                        </button>
                    </span>
                `).join(''));
            }
        }

        toggleTypeForm() {
            if (this.validationTimeout) {
                clearTimeout(this.validationTimeout);
                this.validationTimeout = null;
            }
            $('#typeForm').removeClass('show');
        }

        openCreateForm() {
            this.closeAllForms();
            $('#createForm').addClass('show');
            setTimeout(() => $('#value').focus(), 300);
        }

        toggleCreateForm() {
            $('#createForm').removeClass('show');
        }

        showEditForm(id, value, order, metadata = null, shortcode = null) {
            this.closeAllForms();

            $('#editId').val(id);
            $('#editValue').val(value);
            $('#editOrder').val(order === null || order === 'null' ? '' : order);

            // Handle metadata with prettier JSON formatting
            let metadataValue = '';
            if (metadata && metadata !== 'null' && metadata !== 'undefined') {
                try {
                    if (typeof metadata === 'string') {
                        const parsedMetadata = JSON.parse(metadata);
                        metadataValue = JSON.stringify(parsedMetadata, null, 2);
                    } else {
                        metadataValue = JSON.stringify(metadata, null, 2);
                    }
                } catch (error) {
                    console.warn('Failed to parse metadata JSON:', error);
                    metadataValue = typeof metadata === 'string' ? metadata : JSON.stringify(metadata, null, 2);
                }
            }
            $('#editMetadata').val(metadataValue);

            // Handle shortcode properly  
            let shortcodeValue = '';
            if (shortcode && shortcode !== 'null' && shortcode !== 'undefined') {
                shortcodeValue = shortcode;
            }
            $('#editShortcode').val(shortcodeValue);

            // Clear any previous validation states
            $('#editMetadata, #editShortcode').removeClass('is-invalid');
            $('#editMetadataValidation, #editShortcodeValidation').hide();

            $('#editForm').addClass('show');
            setTimeout(() => $('#editValue').focus(), 300);
        }

        toggleEditForm() {
            $('#editForm').removeClass('show');
        }

        showDeleteConfirmation(categoryId, categoryValue) {
            categoryToDelete = categoryId;
            $('#deleteConfirmMessage').text(`Are you sure you want to delete the category "${categoryValue}"?`);
            $('#deleteConfirmModal').addClass('show');
        }

        closeDeleteConfirmModal() {
            $('#deleteConfirmModal').removeClass('show');
            categoryToDelete = null;
        }

        confirmDelete() {
            if (categoryToDelete) {
                this.deleteCategory(categoryToDelete);
            }
            this.closeDeleteConfirmModal();
        }

        deleteCategoryType() {
            if (selectedTypes.size === 0) {
                this.showError('Please select at least one category type to delete.');
                return;
            }

            this.closeAllForms();
            this.updateDeleteModal();
            $('#deleteTypeModal').addClass('show');
        }

        updateDeleteModal() {
            const container = $('#selectedTypesContainer');
            const selectedArray = Array.from(selectedTypes);

            if (selectedArray.length === 0) return;

            container.html(selectedArray.map(type => `
                <div style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.5rem;">
                    <i class="fas fa-tag" style="color: #3b82f6;"></i>
                    <span style="font-weight: 500;">${this.escapeHtml(type)}</span>
                </div>
            `).join(''));

            const isMultiple = selectedArray.length > 1;
            const modalHeader = $('#deleteTypeModal .modal-header h4');
            const deleteButton = $('#deleteTypeModal .btn-delete');

            modalHeader.html(`<i class="fas fa-trash me-2"></i>${isMultiple ? 'Delete Category Types' : 'Delete Category Type'}`);
            deleteButton.html(`<i class="fas fa-trash me-1"></i>${isMultiple ? 'Delete Types' : 'Delete Type'}`);
        }

        closeDeleteTypeModal() {
            $('#deleteTypeModal').removeClass('show');

            $('#selectedTypesContainer').html('');

            setTimeout(() => {
                const modalHeader = $('#deleteTypeModal .modal-header h4');
                const deleteButton = $('#deleteTypeModal .btn-delete');
                modalHeader.html('<i class="fas fa-trash me-2"></i>Delete Category Type');
                deleteButton.html('<i class="fas fa-trash me-1"></i>Delete Type');
            }, 300);
        }

        closeAllForms() {
            $('.form-overlay, .modal').removeClass('show');
        }

        // AJAX form handlers
        async handleCreateTypes(e) {
            e.preventDefault();

            const input = $('#typeNameInput');
            const currentInput = input.val().trim();

            let allTypeNames = [...typesList];

            if (currentInput) {
                const validationErrors = this.validateTypeName(currentInput);
                if (validationErrors.length > 0) {
                    this.showError('Please fix validation errors: ' + validationErrors.join(' '));
                    return;
                }

                if (!allTypeNames.some(type => type.toLowerCase() === currentInput.toLowerCase())) {
                    allTypeNames.push(currentInput);
                }
            }

            if (allTypeNames.length === 0) {
                this.showError('Please enter at least one category type name.');
                return;
            }

            const submitBtn = $('#submitBtn');
            const originalText = submitBtn.html();
            submitBtn.prop('disabled', true);
            submitBtn.html('<i class="fas fa-spinner fa-spin me-1"></i>Creating...');

            try {
                let response;
                if (allTypeNames.length === 1) {
                    response = await $.ajax({
                        url: '/Categories/CreateCategoryType',
                        method: 'POST',
                        data: {typeName: allTypeNames[0]},
                        headers: {'X-Requested-With': 'XMLHttpRequest'}
                    });
                } else {
                    response = await $.ajax({
                        url: '/Categories/CreateBulkCategoryType',
                        method: 'POST',
                        data: {typeNames: allTypeNames},
                        headers: {'X-Requested-With': 'XMLHttpRequest'}
                    });
                }

                if (response.success) {
                    if (response.warning) {
                        this.showSuccess(response.message);
                        this.showWarning(response.warning);
                    } else {
                        this.showSuccess(response.message);
                    }

                    categoryTypes = response.categoryTypes;
                    
                    // Update pagination data and categories
                    if (response.pagination) {
                        currentPagination = response.pagination;
                        categories = response.categories || [];
                    }

                    this.renderCategoryTypes(categoryTypes);
                    this.renderCategories(categories);
                    this.populateTypeSelect(categoryTypes);
                    this.updatePagination();
                } else {
                    if (response.validationErrors && response.validationErrors.length > 0) {
                        const errorMessages = response.validationErrors.map(ve => ve.error).join('\n');
                        this.showError(`Validation failed:\n${errorMessages}`);
                    } else if (response.existingTypes && response.existingTypes.length > 0) {
                        const existingTypesText = response.existingTypes.join(', ');
                        this.showError(`${response.error}\n\nExisting types: ${existingTypesText}`);
                    } else {
                        this.showError(response.error || 'Failed to create category types');
                    }
                }

                this.resetTypeForm();
                this.closeTypeForm();

            } catch (error) {
                console.error('Error:', error);

                if (error.responseJSON && error.responseJSON.validationErrors) {
                    const errorMessages = error.responseJSON.validationErrors.map(ve => ve.error).join('\n');
                    this.showError(`Validation failed:\n${errorMessages}`);
                } else if (error.responseJSON && error.responseJSON.error) {
                    this.showError(error.responseJSON.error);
                } else {
                    this.showError('An error occurred while creating category types.');
                }

                this.resetTypeForm();
                this.closeTypeForm();
            } finally {
                submitBtn.prop('disabled', false);
                submitBtn.html(originalText);
            }
        }

        async handleCreateCategory(e) {
            e.preventDefault();

            const metadataValid = this.validateJSON($('#metadata').val());
            const shortcodeValid = this.validateShortcode($('#shortcode').val());

            if (!metadataValid || !shortcodeValid) {
                this.showError('Please fix validation errors before submitting.');
                return;
            }

            const formData = {
                value: $('#value').val(),
                type: $('#type').val(),
                metadata: $('#metadata').val().trim() || null,
                shortcode: $('#shortcode').val().trim() || null,
                order: $('#order').val() || null
            };

            if (!formData.value || !formData.type) {
                this.showError('Name and Type are required.');
                return;
            }

            const submitBtn = $('#createCategoryForm button[type="submit"]');
            const originalText = submitBtn.html();
            submitBtn.prop('disabled', true);
            submitBtn.html('<i class="fas fa-spinner fa-spin me-1"></i>Creating...');

            try {
                const response = await $.ajax({
                    url: '/Categories/Create',
                    method: 'POST',
                    data: formData,
                    headers: {'X-Requested-With': 'XMLHttpRequest'}
                });

                if (response.success) {
                    this.showSuccess(response.message);

                    categoryTypes = response.categoryTypes || categoryTypes;
                    
                    // Update pagination data and categories
                    if (response.pagination) {
                        currentPagination = response.pagination;
                        categories = response.categories || [];
                        
                        this.renderCategories(categories);
                        this.updatePagination();
                    } else {
                        // Fallback: reload categories
                        await this.loadCategories();
                    }

                    this.populateTypeSelect(categoryTypes);

                    $('#createCategoryForm')[0].reset();
                    $('#metadata, #shortcode').removeClass('is-invalid');
                    $('#metadataValidation, #shortcodeValidation').hide();
                    this.toggleCreateForm();
                } else {
                    this.showError(response.message);
                }
            } catch (error) {
                console.error('Error:', error);
                if (error.responseJSON && error.responseJSON.validationErrors) {
                    const errorMessages = error.responseJSON.validationErrors.map(ve => ve.error).join('\n');
                    this.showError(`Validation failed:\n${errorMessages}`);
                } else {
                    this.showError('An error occurred while creating the category.');
                }
            } finally {
                submitBtn.prop('disabled', false);
                submitBtn.html(originalText);
            }
        }

        async handleUpdateCategory(e) {
            e.preventDefault();

            const metadataValid = this.validateJSON($('#editMetadata').val());
            const shortcodeValid = this.validateShortcode($('#editShortcode').val());

            if (!metadataValid || !shortcodeValid) {
                this.showError('Please fix validation errors before submitting.');
                return;
            }

            const formData = {
                id: $('#editId').val(),
                value: $('#editValue').val() || null,
                metadata: $('#editMetadata').val().trim() || null,
                shortcode: $('#editShortcode').val().trim() || null,
                order: $('#editOrder').val() || null
            };

            const submitBtn = $('#editCategoryForm button[type="submit"]');
            const originalText = submitBtn.html();
            submitBtn.prop('disabled', true);
            submitBtn.html('<i class="fas fa-spinner fa-spin me-1"></i>Updating...');

            try {
                const response = await $.ajax({
                    url: '/Categories/Update',
                    method: 'POST',
                    data: formData,
                    headers: {'X-Requested-With': 'XMLHttpRequest'}
                });

                if (response.success) {
                    this.showSuccess(response.message);

                    categoryTypes = response.categoryTypes || categoryTypes;
                    
                    // Update pagination data and categories
                    if (response.pagination) {
                        currentPagination = response.pagination;
                        categories = response.categories || [];
                        
                        this.renderCategories(categories);
                        this.updatePagination();
                    } else {
                        // Fallback: reload categories
                        await this.loadCategories();
                    }

                    this.populateTypeSelect(categoryTypes);
                    this.toggleEditForm();
                } else {
                    this.showError(response.message);
                }
            } catch (error) {
                console.error('Error:', error);
                if (error.responseJSON && error.responseJSON.validationErrors) {
                    const errorMessages = error.responseJSON.validationErrors.map(ve => ve.error).join('\n');
                    this.showError(`Validation failed:\n${errorMessages}`);
                } else {
                    this.showError('An error occurred while updating the category.');
                }
            } finally {
                submitBtn.prop('disabled', false);
                submitBtn.html(originalText);
            }
        }

        async deleteCategory(categoryId) {
            try {
                const response = await $.ajax({
                    url: '/Categories/Delete',
                    method: 'POST',
                    data: {id: categoryId},
                    headers: {'X-Requested-With': 'XMLHttpRequest'}
                });

                if (response.success) {
                    this.showSuccess(response.message);

                    categoryTypes = response.categoryTypes || categoryTypes;
                    
                    // Update pagination data and categories
                    if (response.pagination) {
                        currentPagination = response.pagination;
                        categories = response.categories || [];
                        
                        this.renderCategories(categories);
                        this.updatePagination();
                    } else {
                        // Fallback: reload categories
                        await this.loadCategories();
                    }

                    this.populateTypeSelect(categoryTypes);
                } else {
                    this.showError(response.message);
                }
            } catch (error) {
                console.error('Error:', error);
                this.showError('An error occurred while deleting the category.');
            }
        }

        async handleDeleteTypes(e) {
            e.preventDefault();

            const selectedTypeNames = Array.from(selectedTypes)
                .map(type => String(type).trim())
                .filter(type => type.length > 0);

            if (selectedTypeNames.length === 0) {
                this.showError('No types selected for deletion.');
                return;
            }

            const submitBtn = $('#deleteTypeForm button[type="submit"]');
            const originalText = submitBtn.html();
            submitBtn.prop('disabled', true);
            submitBtn.html('<i class="fas fa-spinner fa-spin me-1"></i>Deleting...');

            try {
                const response = await $.ajax({
                    url: '/Categories/DeleteCategoryTypes',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(selectedTypeNames),
                    headers: {'X-Requested-With': 'XMLHttpRequest'}
                });

                this.closeDeleteTypeModal();
                this.clearAllSelections();

                if (response.success) {
                    this.showSuccess(response.message);

                    categoryTypes = response.categoryTypes || [];
                    
                    // Update pagination data and categories
                    if (response.pagination) {
                        currentPagination = response.pagination;
                        categories = response.categories || [];
                    }

                    this.renderCategoryTypes(categoryTypes);
                    this.renderCategories(categories);
                    this.populateTypeSelect(categoryTypes);
                    this.updatePagination();
                } else {
                    this.showError(response.error || 'Failed to delete category types');
                    await this.loadCategories();
                }
            } catch (error) {
                console.error('Error deleting types:', error);

                this.closeDeleteTypeModal();
                this.clearAllSelections();

                if (error.responseJSON && error.responseJSON.validationErrors) {
                    const errorMessages = error.responseJSON.validationErrors.map(ve => ve.error).join('\n');
                    this.showError(`Validation failed:\n${errorMessages}`);
                } else if (error.responseJSON && error.responseJSON.error) {
                    this.showError(error.responseJSON.error);
                } else {
                    this.showError('An error occurred while deleting category types: ' + error.message);
                }

                try {
                    await this.loadCategories();
                } catch (loadError) {
                    console.error('Error reloading data:', loadError);
                }
            } finally {
                submitBtn.prop('disabled', false);
                submitBtn.html(originalText);
            }
        }

        // Utility methods
        async copyToClipboard(text, button) {
            try {
                if (navigator.clipboard && window.isSecureContext) {
                    await navigator.clipboard.writeText(text);
                } else {
                    const textArea = document.createElement('textarea');
                    textArea.value = text;
                    textArea.style.position = 'absolute';
                    textArea.style.left = '-9999px';
                    document.body.appendChild(textArea);
                    textArea.select();
                    document.execCommand('copy');
                    document.body.removeChild(textArea);
                }

                const $button = $(button);
                const $icon = $button.find('i');
                const $textSpan = $button.find('.copy-text');

                $button.addClass('copied');
                $icon.removeClass().addClass('fas fa-check');
                if ($textSpan.length) $textSpan.text('Done!');

                setTimeout(() => {
                    $button.removeClass('copied');
                    $icon.removeClass().addClass('fas fa-copy');
                    if ($textSpan.length) $textSpan.text('Copy');
                }, 2000);

            } catch (err) {
                console.error('Failed to copy text: ', err);
                this.showError('Failed to copy to clipboard');
            }
        }

        showSuccess(message) {
            this.showAlert(message, 'success');
        }

        showError(message) {
            const htmlMessage = message.replace(/\n/g, '<br>');
            this.showAlert(htmlMessage, 'danger');
        }

        showWarning(message) {
            this.showAlert(message, 'warning');
        }

        showAlert(message, type) {
            const container = $('#alertContainer');
            const alertDiv = $(`
                <div class="alert alert-${type} alert-dismissible fade show">
                    <i class="fas fa-${this.getAlertIcon(type)} me-2"></i>
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `);

            container.html('');
            container.append(alertDiv);

            setTimeout(() => {
                alertDiv.fadeOut(() => alertDiv.remove());
            }, 5000);
        }

        getAlertIcon(type) {
            switch (type) {
                case 'success':
                    return 'check-circle';
                case 'warning':
                    return 'exclamation-triangle';
                case 'danger':
                    return 'exclamation-circle';
                default:
                    return 'info-circle';
            }
        }

        escapeHtml(text) {
            if (text === null || text === undefined) return '';
            if (typeof text !== 'string') return text;
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }
    }

    // Global functions for backward compatibility
    function addCategoryType() {
        categoriesManager.addCategoryType();
    }

    function deleteCategoryType() {
        categoriesManager.deleteCategoryType();
    }

    function addTypeToList() {
        categoriesManager.addTypeToList();
    }

    function removeTypeFromList(typeName) {
        categoriesManager.removeTypeFromList(typeName);
    }

    function toggleTypeForm() {
        categoriesManager.cancelTypeForm();
    }

    function openCreateForm() {
        categoriesManager.openCreateForm();
    }

    function toggleCreateForm() {
        categoriesManager.toggleCreateForm();
    }

    function showEditForm(id, value, order, metadata = null, shortcode = null) {
        categoriesManager.showEditForm(id, value, order, metadata, shortcode);
    }

    function toggleEditForm() {
        categoriesManager.toggleEditForm();
    }

    function showDeleteConfirmation(id, value) {
        categoriesManager.showDeleteConfirmation(id, value);
    }

    function closeDeleteConfirmModal() {
        categoriesManager.closeDeleteConfirmModal();
    }

    function confirmDelete() {
        categoriesManager.confirmDelete();
    }

    function closeDeleteTypeModal() {
        categoriesManager.closeDeleteTypeModal();
    }

    function copyToClipboard(text, button) {
        categoriesManager.copyToClipboard(text, button);
    }

    function clearSearch() {
        categoriesManager.clearSearch();
    }

    function changePageSize() {
        const newPageSize = $('#pageSizeSelect').val();
        categoriesManager.changePageSize(newPageSize);
    }

    // Initialize
    let categoriesManager;
    $(document).ready(() => {
        categoriesManager = new CategoriesManager();
    });
</script>
